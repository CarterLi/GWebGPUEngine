{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/gpgpu/basic/bitonicSort","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","githubUrl":"https://github.com/antvis/GWebGPUEngine","examples":[{"slug":"gpgpu","icon":null,"title":{"zh":"GPGPU","en":"GPGPU"}},{"slug":"gpgpu/basic","icon":null,"title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":null,"title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":null,"title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"min-height: 500px; justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"只能在支持 WebGPU 的浏览器中运行，详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/reduce"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Compute Shader 中进行光线追踪，详见："},{"type":"element","tagName":"a","properties":{"href":"https://zhuanlan.zhihu.com/p/212162113%E3%80%82","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://zhuanlan.zhihu.com/p/212162113。"}]}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"gpgpu/basic/bitonicSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/bitonicSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"奇偶排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { World } from '@antv/g-webgpu';\nimport { Compiler } from '@antv/g-webgpu-compiler';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// ported from https://github.com/9ballsyndrome/WebGL_Compute_shader/blob/master/webgl-compute-bitonicSort/js/script.js\nconst gCode1 = `\nimport { localInvocationID, globalInvocationID } from 'g-webgpu';\n\n@numthreads(8, 1, 1)\nclass BitonicSort1 {\n  @in @out\n  gData: float[];\n\n  @shared(8)\n  sData: float[];\n\n  @main\n  compute() {\n    const tid = localInvocationID.x;\n    const gid = globalInvocationID.x;\n\n    this.sData[tid] = this.gData[gid];\n    barrier();\n\n    const offset = workGroupID.x * workGroupSize.x;\n\n    let tmp;\n    for (let k: int = 2; k <= workGroupSize.x; k <<= 1) {\n      for (let j: int = k >> 1; j > 0; j >>= 1) {\n        const ixj = (gid ^ j) - offset;\n        if (ixj > tid) {\n          if ((gid & k) == 0) {\n            if (this.sData[tid] > this.sData[ixj]) {\n              tmp = this.sData[tid];\n              this.sData[tid] = this.sData[ixj];\n              this.sData[ixj] = tmp;\n            }\n          } else {\n            if (this.sData[tid] < this.sData[ixj]) {\n              tmp = this.sData[tid];\n              this.sData[tid] = this.sData[ixj];\n              this.sData[ixj] = tmp;\n            }\n          }\n        }\n        barrier();\n      }\n    }\n    this.gData[gid] = this.sData[tid];\n  }\n}\n`;\n\nconst gCode2 = `\nimport { localInvocationID, globalInvocationID } from 'g-webgpu';\n\n@numthreads(8, 1, 1)\nclass BitonicSort2 {\n  @in @out\n  gData: float[];\n\n  @in\n  k: int;\n\n  @in\n  j: int;\n\n  @main\n  compute() {\n    let tmp;\n    const ixj = globalInvocationID.x ^ this.j;\n    if (ixj > globalInvocationID.x) {\n      if ((globalInvocationID.x & this.k) == 0) {\n        if (this.gData[globalInvocationID.x] > this.gData[ixj]) {\n          tmp = this.gData[globalInvocationID.x];\n          this.gData[globalInvocationID.x] = this.gData[ixj];\n          this.gData[ixj] = tmp;\n        }\n      } else {\n        if (this.gData[globalInvocationID.x] < this.gData[ixj]) {\n          tmp = this.gData[globalInvocationID.x];\n          this.gData[globalInvocationID.x] = this.gData[ixj];\n          this.gData[ixj] = tmp;\n        }\n      }\n    }\n  }\n}\n`;\n\nconst resetData = (arr: Float32Array, sortLength: number) => {\n  for (let i = 0; i < sortLength; i++) {\n    arr[i] = Math.random();\n  }\n};\n\nconst validateSorted = (arr: Float32Array) => {\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    if (i !== length - 1 && arr[i] > arr[i + 1]) {\n      console.log('validation error:', i, arr[i], arr[i + 1]);\n      return false;\n    }\n  }\n  return true;\n};\n\nconst MAX_THREAD_NUM = 8;\nconst ELEMENTS_NUM = 16;\nconst arr = new Float32Array([8, 6, 7, 1, 4, 3, 2, 5, 9, 10, 11, 12, 13, 14, 15, 16]);\n// resetData(arr, ELEMENTS_NUM);\nconst threadgroupsPerGrid = Math.max(1, ELEMENTS_NUM / MAX_THREAD_NUM);\n\nconst App = React.memo(function BitonicSort() {\n  const computeCPU = () => {\n    const now = performance.now();\n    arr.sort((a, b) => a - b);\n    console.log(`CPU sort time: ${Math.round(performance.now() - now)} ms`);\n    console.log(`CPU sort result validation: ${validateSorted(arr) ? 'success' : 'failure'}`);\n  };\n\n  const computeGPU = async () => {\n    // compile our kernel code\n    const compiler = new Compiler();\n    const precompiledBundle1 = compiler.compileBundle(gCode1);\n    const precompiledBundle2 = compiler.compileBundle(gCode2);\n\n    // create world\n    const world = World.create({\n      engineOptions: {\n        supportCompute: true,\n      },\n    });\n\n    const now = performance.now();\n    const kernel1 = world.createKernel(precompiledBundle1);\n\n    await kernel1\n      .setDispatch([threadgroupsPerGrid, 1, 1])\n      .setBinding('gData', arr)\n      .execute();\n\n    const output = await kernel1.getOutput();\n\n    console.log(output);\n\n    const kernel2 = world.createKernel(precompiledBundle2);\n    kernel2\n      .setDispatch([threadgroupsPerGrid, 1, 1])\n      .setBinding('gData', output);\n\n    if (threadgroupsPerGrid > 1) {\n      for (let k = threadgroupsPerGrid; k <= ELEMENTS_NUM; k <<= 1) {\n        for (let j = k >> 1; j > 0; j >>= 1) {\n          console.log(k, j);\n          kernel2.setBinding('k', k);\n          kernel2.setBinding('j', j);\n          await kernel2.execute();\n\n          const output2 = await kernel2.getOutput();\n\n          console.log(output2);\n        }\n      }\n\n      // console.log(`GPU sort time: ${Math.round(performance.now() - now)} ms`);\n      // console.log(`GPU sort result validation: ${validateSorted(output2) ? 'success' : 'failure'}`);\n    }\n  };\n\n  useEffect(() => {\n    computeGPU();\n    // computeCPU();\n  }, []);\n\n  return (\n    <>\n      {/* <li>Result: {result.toString()}</li> */}\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-compiler\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-compiler\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuCompiler, global.react, global.reactDom);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuCompiler, _react, _reactDom) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  // ported from https://github.com/9ballsyndrome/WebGL_Compute_shader/blob/master/webgl-compute-bitonicSort/js/script.js\n  var gCode1 = \"\\nimport { localInvocationID, globalInvocationID } from 'g-webgpu';\\n\\n@numthreads(8, 1, 1)\\nclass BitonicSort1 {\\n  @in @out\\n  gData: float[];\\n\\n  @shared(8)\\n  sData: float[];\\n\\n  @main\\n  compute() {\\n    const tid = localInvocationID.x;\\n    const gid = globalInvocationID.x;\\n\\n    this.sData[tid] = this.gData[gid];\\n    barrier();\\n\\n    const offset = workGroupID.x * workGroupSize.x;\\n\\n    let tmp;\\n    for (let k: int = 2; k <= workGroupSize.x; k <<= 1) {\\n      for (let j: int = k >> 1; j > 0; j >>= 1) {\\n        const ixj = (gid ^ j) - offset;\\n        if (ixj > tid) {\\n          if ((gid & k) == 0) {\\n            if (this.sData[tid] > this.sData[ixj]) {\\n              tmp = this.sData[tid];\\n              this.sData[tid] = this.sData[ixj];\\n              this.sData[ixj] = tmp;\\n            }\\n          } else {\\n            if (this.sData[tid] < this.sData[ixj]) {\\n              tmp = this.sData[tid];\\n              this.sData[tid] = this.sData[ixj];\\n              this.sData[ixj] = tmp;\\n            }\\n          }\\n        }\\n        barrier();\\n      }\\n    }\\n    this.gData[gid] = this.sData[tid];\\n  }\\n}\\n\";\n  var gCode2 = \"\\nimport { localInvocationID, globalInvocationID } from 'g-webgpu';\\n\\n@numthreads(8, 1, 1)\\nclass BitonicSort2 {\\n  @in @out\\n  gData: float[];\\n\\n  @in\\n  k: int;\\n\\n  @in\\n  j: int;\\n\\n  @main\\n  compute() {\\n    let tmp;\\n    const ixj = globalInvocationID.x ^ this.j;\\n    if (ixj > globalInvocationID.x) {\\n      if ((globalInvocationID.x & this.k) == 0) {\\n        if (this.gData[globalInvocationID.x] > this.gData[ixj]) {\\n          tmp = this.gData[globalInvocationID.x];\\n          this.gData[globalInvocationID.x] = this.gData[ixj];\\n          this.gData[ixj] = tmp;\\n        }\\n      } else {\\n        if (this.gData[globalInvocationID.x] < this.gData[ixj]) {\\n          tmp = this.gData[globalInvocationID.x];\\n          this.gData[globalInvocationID.x] = this.gData[ixj];\\n          this.gData[ixj] = tmp;\\n        }\\n      }\\n    }\\n  }\\n}\\n\";\n\n  var resetData = function resetData(arr, sortLength) {\n    for (var i = 0; i < sortLength; i++) {\n      arr[i] = Math.random();\n    }\n  };\n\n  var validateSorted = function validateSorted(arr) {\n    var length = arr.length;\n\n    for (var i = 0; i < length; i++) {\n      if (i !== length - 1 && arr[i] > arr[i + 1]) {\n        console.log('validation error:', i, arr[i], arr[i + 1]);\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var MAX_THREAD_NUM = 8;\n  var ELEMENTS_NUM = 16;\n  var arr = new Float32Array([8, 6, 7, 1, 4, 3, 2, 5, 9, 10, 11, 12, 13, 14, 15, 16]); // resetData(arr, ELEMENTS_NUM);\n\n  var threadgroupsPerGrid = Math.max(1, ELEMENTS_NUM / MAX_THREAD_NUM);\n\n  var App = /*#__PURE__*/_react.default.memo(function BitonicSort() {\n    var computeCPU = function computeCPU() {\n      var now = performance.now();\n      arr.sort(function (a, b) {\n        return a - b;\n      });\n      console.log(\"CPU sort time: \".concat(Math.round(performance.now() - now), \" ms\"));\n      console.log(\"CPU sort result validation: \".concat(validateSorted(arr) ? 'success' : 'failure'));\n    };\n\n    var computeGPU = async function computeGPU() {\n      // compile our kernel code\n      var compiler = new _gWebgpuCompiler.Compiler();\n      var precompiledBundle1 = compiler.compileBundle(gCode1);\n      var precompiledBundle2 = compiler.compileBundle(gCode2); // create world\n\n      var world = _gWebgpu.World.create({\n        engineOptions: {\n          supportCompute: true\n        }\n      });\n\n      var now = performance.now();\n      var kernel1 = world.createKernel(precompiledBundle1);\n      await kernel1.setDispatch([threadgroupsPerGrid, 1, 1]).setBinding('gData', arr).execute();\n      var output = await kernel1.getOutput();\n      console.log(output);\n      var kernel2 = world.createKernel(precompiledBundle2);\n      kernel2.setDispatch([threadgroupsPerGrid, 1, 1]).setBinding('gData', output);\n\n      if (threadgroupsPerGrid > 1) {\n        for (var k = threadgroupsPerGrid; k <= ELEMENTS_NUM; k <<= 1) {\n          for (var j = k >> 1; j > 0; j >>= 1) {\n            console.log(k, j);\n            kernel2.setBinding('k', k);\n            kernel2.setBinding('j', j);\n            await kernel2.execute();\n            var output2 = await kernel2.getOutput();\n            console.log(output2);\n          }\n        } // console.log(`GPU sort time: ${Math.round(performance.now() - now)} ms`);\n        // console.log(`GPU sort result validation: ${validateSorted(output2) ? 'success' : 'failure'}`);\n\n      }\n    };\n\n    (0, _react.useEffect)(function () {\n      computeGPU(); // computeCPU();\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]}}},"staticQueryHashes":["3000541721","3000541721","653731124"]}