{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/gpgpu/graph/sssp","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","githubUrl":"https://github.com/antvis/GWebGPUEngine","examples":[{"slug":"gpgpu","icon":null,"title":{"zh":"GPGPU","en":"GPGPU"}},{"slug":"gpgpu/basic","icon":null,"title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":null,"title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":null,"title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"min-height: 500px; justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"只能在支持 WebGPU 的浏览器中运行，详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/reduce"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Compute Shader 中进行光线追踪，详见："},{"type":"element","tagName":"a","properties":{"href":"https://zhuanlan.zhihu.com/p/212162113%E3%80%82","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://zhuanlan.zhihu.com/p/212162113。"}]}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"gpgpu/graph/sssp/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/index.tsx","order":0,"filename":"index.tsx","title":"Bellman-Ford","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*U_ynS4APYr8AAAAAAAAAAAAAARQnAQ","source":"import { Canvas } from '@antv/g-canvas';\nimport { Kernel, World } from '@antv/g-webgpu';\nimport { Compiler } from '@antv/g-webgpu-compiler';\nimport G6 from '@antv/g6';\nimport { Select, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst gCode = `\nimport { globalInvocationID } from 'g-webgpu';\n\nconst MAX_EDGE_PER_VERTEX;\nconst VERTEX_COUNT;\nconst MAX_DISTANCE;\n\n@numthreads(16, 1, 1)\nclass BellmanFord {\n  @in @out\n  gData: vec4[];\n\n  @shared(16)\n  sData: vec4[];\n\n  @main\n  compute() {\n    const tid = localInvocationID.x;\n    const i = workGroupID.x * workGroupSize.x + localInvocationID.x;\n\n    if (i >= VERTEX_COUNT) {\n      return;\n    }\n\n    this.sData[tid] = this.gData[i];\n    barrier();\n\n    const currentNode = this.sData[tid];\n\n    const arr_offset = floor(currentNode[2]);\n    const length = floor(currentNode[3]);\n    const node_buffer: vec4;\n    for (let p: int = 0; p < MAX_EDGE_PER_VERTEX; p++) {\n      if (p >= length) break;\n      const arr_idx = arr_offset + p * 2;\n      const buf_offset = arr_idx - arr_idx / 4 * 4;\n      if (p == 0 || buf_offset == 0) {\n        node_buffer = this.gData[int(arr_idx / 4)];\n      }\n      const float_j = buf_offset == 0 ? node_buffer[0] : node_buffer[2];\n      const w = buf_offset == 0 ? node_buffer[1] : node_buffer[3];\n\n      const du = this.sData[tid].x;\n      const dv = this.sData[int(float_j)].x;\n      let newDist = du + w;\n\n      if (newDist < dv) {\n        this.sData[int(float_j)].x = newDist;\n        this.sData[int(float_j)].y = tid;\n        barrier();\n      }\n    }\n\n    this.gData[i].xy = this.sData[tid].xy;\n  }\n}\n`;\n\nconst data = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n      value: 9,\n    },\n    {\n      source: 'A',\n      target: 'C',\n      value: 4,\n    },\n    {\n      source: 'B',\n      target: 'C',\n      value: 10,\n    },\n    {\n      source: 'B',\n      target: 'D',\n      value: 2,\n    },\n    {\n      source: 'B',\n      target: 'E',\n      value: 3,\n    },\n    {\n      source: 'C',\n      target: 'D',\n      value: 2,\n    },\n    {\n      source: 'C',\n      target: 'E',\n      value: 11,\n    },\n    {\n      source: 'D',\n      target: 'B',\n      value: 2,\n    },\n    {\n      source: 'E',\n      target: 'D',\n      value: 2,\n    },\n  ],\n};\n\nlet kernel: Kernel;\nconst MAX_DISTANCE = 10000;\n\nconst App = React.memo(function BellmanFord() {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [datasource, setDatasource] = useState<\n    Array<{\n      destination: string;\n      weight: number;\n      prevPoint: string;\n    }>\n  >([]);\n\n  const renderFruchterman = () => {\n    const graph = new G6.Graph({\n      container: 'container',\n      width: 300,\n      height: 300,\n      modes: {\n        default: ['drag-canvas', 'drag-node'],\n      },\n      layout: {\n        type: 'fruchterman',\n        gravity: 5,\n        speed: 5,\n      },\n      animate: true,\n      defaultNode: {\n        size: 30,\n        style: {\n          lineWidth: 2,\n          stroke: '#5B8FF9',\n          fill: '#C6E5FF',\n        },\n      },\n      defaultEdge: {\n        size: 1,\n        color: '#e2e2e2',\n        style: {\n          endArrow: {\n            path: 'M 0,0 L 8,4 L 8,-4 Z',\n            fill: '#e2e2e2',\n          },\n        },\n      },\n    });\n    graph.data(data);\n    graph.render();\n  };\n\n  const buildAdjacencyList = (\n    nodes: Array<{\n      id: string;\n      label: string;\n    }>,\n    edges: Array<{\n      source: string;\n      target: string;\n      value: number;\n    }>,\n    sourceNodeIdx: number,\n  ) => {\n    const adjacencyList = [];\n    const nodeDict = [];\n    const mapIdPos = {};\n    let i = 0;\n    for (i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      mapIdPos[n.id] = i;\n      if (i === sourceNodeIdx) {\n        adjacencyList.push(0); // distance\n      } else {\n        adjacencyList.push(MAX_DISTANCE); // Infinity\n      }\n      adjacencyList.push(-1); // predecessor\n      adjacencyList.push(0); // offset\n      adjacencyList.push(0); // outputing edge length\n      nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n      const e = edges[i];\n      nodeDict[mapIdPos[e.source]].push({\n        target: mapIdPos[e.target],\n        weight: e.value,\n      });\n    }\n\n    let maxEdgePerVertex = 0;\n    for (i = 0; i < nodes.length; i++) {\n      const offset = adjacencyList.length;\n      const dests = nodeDict[i];\n      adjacencyList[i * 4 + 2] = offset;\n      adjacencyList[i * 4 + 3] = dests.length;\n      maxEdgePerVertex = Math.max(maxEdgePerVertex, dests.length);\n      for (const dest of dests) {\n        const { target, weight } = dest;\n        adjacencyList.push(target); // dest vertex index\n        adjacencyList.push(weight); // edge weight\n      }\n    }\n\n    while (adjacencyList.length % 4 !== 0) {\n      adjacencyList.push(0);\n    }\n    return [new Float32Array(adjacencyList), maxEdgePerVertex];\n  };\n\n  const calcShortestPath = async (source: string) => {\n    const [adjacencyList, maxEdgePerVertex] = buildAdjacencyList(\n      data.nodes,\n      data.edges,\n      data.nodes.findIndex((n) => n.id === source),\n    );\n\n    if (kernel) {\n      const timeStart = window.performance.now();\n      await kernel\n        .setBinding({\n          gData: adjacencyList,\n          MAX_EDGE_PER_VERTEX: maxEdgePerVertex,\n          VERTEX_COUNT: data.nodes.length,\n          MAX_DISTANCE,\n        })\n        .execute();\n\n      const output = await kernel.getOutput();\n      setTimeElapsed(window.performance.now() - timeStart);\n\n      setDatasource(\n        new Array(data.nodes.length).fill(0).map((_, i) => {\n          const prevPoint = data.nodes[output[i * 4 + 1]];\n          const weight = output[i * 4];\n\n          return {\n            destination: data.nodes[i].id,\n            weight: weight === MAX_DISTANCE ? 'MAX' : weight,\n            prevPoint: (prevPoint && prevPoint.id) || '-',\n          };\n        }),\n      );\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      renderFruchterman();\n\n      // compile our kernel code\n      const compiler = new Compiler();\n      const precompiledBundle = compiler.compileBundle(gCode);\n\n      // create world\n      const world = World.create({\n        engineOptions: {\n          supportCompute: true,\n        },\n      });\n\n      const vertexNum = data.nodes.length;\n\n      kernel = world\n        .createKernel(precompiledBundle)\n        .setDispatch([Math.ceil(vertexNum / 16), 1, 1])\n        .setMaxIteration(vertexNum - 1); // relax all edges |V|-1 times\n\n      await calcShortestPath('A');\n    })();\n  }, []);\n\n  return (\n    <>\n      <div id=\"container\" />\n      <div>Elapsed time: {Math.round(timeElapsed)} ms</div>\n      <div>\n        Shortest path from\n        <Select\n          defaultValue=\"A\"\n          options={data.nodes.map((node) => ({\n            value: node.id,\n            label: node.label,\n          }))}\n          onChange={calcShortestPath}\n        />\n      </div>\n      <Table\n        rowKey=\"destination\"\n        columns={[\n          {\n            dataIndex: 'destination',\n            title: 'destination',\n          },\n          {\n            dataIndex: 'weight',\n            title: 'weight',\n          },\n          {\n            dataIndex: 'prevPoint',\n            title: 'previous point',\n          },\n        ]}\n        dataSource={datasource}\n        pagination={false}\n      />\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-compiler\", \"@antv/g6\", \"antd\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-compiler\"), require(\"@antv/g6\"), require(\"antd\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuCompiler, global.g6, global.antd, global.react, global.reactDom);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuCompiler, _g, _antd, _react, _reactDom) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var gCode = \"\\nimport { globalInvocationID } from 'g-webgpu';\\n\\nconst MAX_EDGE_PER_VERTEX;\\nconst VERTEX_COUNT;\\nconst MAX_DISTANCE;\\n\\n@numthreads(16, 1, 1)\\nclass BellmanFord {\\n  @in @out\\n  gData: vec4[];\\n\\n  @shared(16)\\n  sData: vec4[];\\n\\n  @main\\n  compute() {\\n    const tid = localInvocationID.x;\\n    const i = workGroupID.x * workGroupSize.x + localInvocationID.x;\\n\\n    if (i >= VERTEX_COUNT) {\\n      return;\\n    }\\n\\n    this.sData[tid] = this.gData[i];\\n    barrier();\\n\\n    const currentNode = this.sData[tid];\\n\\n    const arr_offset = floor(currentNode[2]);\\n    const length = floor(currentNode[3]);\\n    const node_buffer: vec4;\\n    for (let p: int = 0; p < MAX_EDGE_PER_VERTEX; p++) {\\n      if (p >= length) break;\\n      const arr_idx = arr_offset + p * 2;\\n      const buf_offset = arr_idx - arr_idx / 4 * 4;\\n      if (p == 0 || buf_offset == 0) {\\n        node_buffer = this.gData[int(arr_idx / 4)];\\n      }\\n      const float_j = buf_offset == 0 ? node_buffer[0] : node_buffer[2];\\n      const w = buf_offset == 0 ? node_buffer[1] : node_buffer[3];\\n\\n      const du = this.sData[tid].x;\\n      const dv = this.sData[int(float_j)].x;\\n      let newDist = du + w;\\n\\n      if (newDist < dv) {\\n        this.sData[int(float_j)].x = newDist;\\n        this.sData[int(float_j)].y = tid;\\n        barrier();\\n      }\\n    }\\n\\n    this.gData[i].xy = this.sData[tid].xy;\\n  }\\n}\\n\";\n  var data = {\n    nodes: [{\n      id: 'A',\n      label: 'A'\n    }, {\n      id: 'B',\n      label: 'B'\n    }, {\n      id: 'C',\n      label: 'C'\n    }, {\n      id: 'D',\n      label: 'D'\n    }, {\n      id: 'E',\n      label: 'E'\n    }],\n    edges: [{\n      source: 'A',\n      target: 'B',\n      value: 9\n    }, {\n      source: 'A',\n      target: 'C',\n      value: 4\n    }, {\n      source: 'B',\n      target: 'C',\n      value: 10\n    }, {\n      source: 'B',\n      target: 'D',\n      value: 2\n    }, {\n      source: 'B',\n      target: 'E',\n      value: 3\n    }, {\n      source: 'C',\n      target: 'D',\n      value: 2\n    }, {\n      source: 'C',\n      target: 'E',\n      value: 11\n    }, {\n      source: 'D',\n      target: 'B',\n      value: 2\n    }, {\n      source: 'E',\n      target: 'D',\n      value: 2\n    }]\n  };\n  var kernel;\n  var MAX_DISTANCE = 10000;\n\n  var App = /*#__PURE__*/_react.default.memo(function BellmanFord() {\n    var _useState = (0, _react.useState)(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        timeElapsed = _useState2[0],\n        setTimeElapsed = _useState2[1];\n\n    var _useState3 = (0, _react.useState)([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        datasource = _useState4[0],\n        setDatasource = _useState4[1];\n\n    var renderFruchterman = function renderFruchterman() {\n      var graph = new _g.default.Graph({\n        container: 'container',\n        width: 300,\n        height: 300,\n        modes: {\n          default: ['drag-canvas', 'drag-node']\n        },\n        layout: {\n          type: 'fruchterman',\n          gravity: 5,\n          speed: 5\n        },\n        animate: true,\n        defaultNode: {\n          size: 30,\n          style: {\n            lineWidth: 2,\n            stroke: '#5B8FF9',\n            fill: '#C6E5FF'\n          }\n        },\n        defaultEdge: {\n          size: 1,\n          color: '#e2e2e2',\n          style: {\n            endArrow: {\n              path: 'M 0,0 L 8,4 L 8,-4 Z',\n              fill: '#e2e2e2'\n            }\n          }\n        }\n      });\n      graph.data(data);\n      graph.render();\n    };\n\n    var buildAdjacencyList = function buildAdjacencyList(nodes, edges, sourceNodeIdx) {\n      var adjacencyList = [];\n      var nodeDict = [];\n      var mapIdPos = {};\n      var i = 0;\n\n      for (i = 0; i < nodes.length; i++) {\n        var n = nodes[i];\n        mapIdPos[n.id] = i;\n\n        if (i === sourceNodeIdx) {\n          adjacencyList.push(0); // distance\n        } else {\n          adjacencyList.push(MAX_DISTANCE); // Infinity\n        }\n\n        adjacencyList.push(-1); // predecessor\n\n        adjacencyList.push(0); // offset\n\n        adjacencyList.push(0); // outputing edge length\n\n        nodeDict.push([]);\n      }\n\n      for (i = 0; i < edges.length; i++) {\n        var e = edges[i];\n        nodeDict[mapIdPos[e.source]].push({\n          target: mapIdPos[e.target],\n          weight: e.value\n        });\n      }\n\n      var maxEdgePerVertex = 0;\n\n      for (i = 0; i < nodes.length; i++) {\n        var offset = adjacencyList.length;\n        var dests = nodeDict[i];\n        adjacencyList[i * 4 + 2] = offset;\n        adjacencyList[i * 4 + 3] = dests.length;\n        maxEdgePerVertex = Math.max(maxEdgePerVertex, dests.length);\n\n        var _iterator = _createForOfIteratorHelper(dests),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var dest = _step.value;\n            var target = dest.target,\n                weight = dest.weight;\n            adjacencyList.push(target); // dest vertex index\n\n            adjacencyList.push(weight); // edge weight\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      while (adjacencyList.length % 4 !== 0) {\n        adjacencyList.push(0);\n      }\n\n      return [new Float32Array(adjacencyList), maxEdgePerVertex];\n    };\n\n    var calcShortestPath = async function calcShortestPath(source) {\n      var _buildAdjacencyList = buildAdjacencyList(data.nodes, data.edges, data.nodes.findIndex(function (n) {\n        return n.id === source;\n      })),\n          _buildAdjacencyList2 = _slicedToArray(_buildAdjacencyList, 2),\n          adjacencyList = _buildAdjacencyList2[0],\n          maxEdgePerVertex = _buildAdjacencyList2[1];\n\n      if (kernel) {\n        var timeStart = window.performance.now();\n        await kernel.setBinding({\n          gData: adjacencyList,\n          MAX_EDGE_PER_VERTEX: maxEdgePerVertex,\n          VERTEX_COUNT: data.nodes.length,\n          MAX_DISTANCE: MAX_DISTANCE\n        }).execute();\n        var output = await kernel.getOutput();\n        setTimeElapsed(window.performance.now() - timeStart);\n        setDatasource(new Array(data.nodes.length).fill(0).map(function (_, i) {\n          var prevPoint = data.nodes[output[i * 4 + 1]];\n          var weight = output[i * 4];\n          return {\n            destination: data.nodes[i].id,\n            weight: weight === MAX_DISTANCE ? 'MAX' : weight,\n            prevPoint: prevPoint && prevPoint.id || '-'\n          };\n        }));\n      }\n    };\n\n    (0, _react.useEffect)(function () {\n      (async function () {\n        renderFruchterman(); // compile our kernel code\n\n        var compiler = new _gWebgpuCompiler.Compiler();\n        var precompiledBundle = compiler.compileBundle(gCode); // create world\n\n        var world = _gWebgpu.World.create({\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n\n        var vertexNum = data.nodes.length;\n        kernel = world.createKernel(precompiledBundle).setDispatch([Math.ceil(vertexNum / 16), 1, 1]).setMaxIteration(vertexNum - 1); // relax all edges |V|-1 times\n\n        await calcShortestPath('A');\n      })();\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      id: \"container\"\n    }), /*#__PURE__*/_react.default.createElement(\"div\", null, \"Elapsed time: \", Math.round(timeElapsed), \" ms\"), /*#__PURE__*/_react.default.createElement(\"div\", null, \"Shortest path from\", /*#__PURE__*/_react.default.createElement(_antd.Select, {\n      defaultValue: \"A\",\n      options: data.nodes.map(function (node) {\n        return {\n          value: node.id,\n          label: node.label\n        };\n      }),\n      onChange: calcShortestPath\n    })), /*#__PURE__*/_react.default.createElement(_antd.Table, {\n      rowKey: \"destination\",\n      columns: [{\n        dataIndex: 'destination',\n        title: 'destination'\n      }, {\n        dataIndex: 'weight',\n        title: 'weight'\n      }, {\n        dataIndex: 'prevPoint',\n        title: 'previous point'\n      }],\n      dataSource: datasource,\n      pagination: false\n    }));\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"},{"relativePath":"gpgpu/graph/sssp/demo/perf.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/perf.tsx","order":1,"filename":"perf.tsx","title":"Bellman-Ford in a large directed graph","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { Canvas } from '@antv/g-canvas';\nimport { Kernel, World } from '@antv/g-webgpu';\nimport { Compiler } from '@antv/g-webgpu-compiler';\nimport { Select, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst gCode = `\nimport { globalInvocationID } from 'g-webgpu';\n\nconst MAX_EDGE_PER_VERTEX;\nconst VERTEX_COUNT;\nconst MAX_DISTANCE;\n\n@numthreads(16, 1, 1)\nclass BellmanFord {\n  @in @out\n  gData: vec4[];\n\n  @shared(16)\n  sData: vec4[];\n\n  @main\n  compute() {\n    const tid = localInvocationID.x;\n    const i = workGroupID.x * workGroupSize.x + localInvocationID.x;\n\n    if (i >= VERTEX_COUNT) {\n      return;\n    }\n\n    this.sData[tid] = this.gData[i];\n    barrier();\n\n    const currentNode = this.sData[tid];\n\n    const arr_offset = floor(currentNode[2]);\n    const length = floor(currentNode[3]);\n    const node_buffer: vec4;\n    for (let p: int = 0; p < MAX_EDGE_PER_VERTEX; p++) {\n      if (p >= length) break;\n      const arr_idx = arr_offset + p * 2;\n      const buf_offset = arr_idx - arr_idx / 4 * 4;\n      if (p == 0 || buf_offset == 0) {\n        node_buffer = this.gData[int(arr_idx / 4)];\n      }\n      const float_j = buf_offset == 0 ? node_buffer[0] : node_buffer[2];\n      const w = buf_offset == 0 ? node_buffer[1] : node_buffer[3];\n\n      const du = this.sData[tid].x;\n      const dv = this.sData[int(float_j)].x;\n      let newDist = du + w;\n\n      if (newDist < dv) {\n        this.sData[int(float_j)].x = newDist;\n        this.sData[int(float_j)].y = tid;\n        barrier();\n      }\n    }\n\n    this.gData[i].xy = this.sData[tid].xy;\n  }\n}\n`;\n\nconst rawData = `1 0 2.5\n3 2 0.25\n4 2 0.25\n4 3 0.25\n5 2 0.25\n5 3 0.25\n5 4 0.25\n6 2 0.25\n6 3 0.25\n6 4 0.25\n6 5 0.25\n8 7 1\n9 7 3.16667\n10 7 1.16667\n10 9 1.16667\n11 7 0.666667\n11 10 0.666667\n11 9 0.666667\n13 12 0.333333\n14 12 0.333333\n14 13 0.333333\n15 12 0.333333\n15 13 0.333333\n15 14 0.333333\n17 16 0.5\n18 16 0.5\n18 17 0.5\n21 20 0.5\n22 20 0.5\n22 21 0.5\n24 23 0.5\n25 23 0.5\n25 24 2.33333\n28 27 0.5\n29 27 0.5\n29 28 0.5\n31 30 0.5\n32 30 0.5\n32 31 0.5\n33 30 3.58333\n34 30 1.58333\n34 33 4.225\n36 35 0.2\n37 35 0.2\n37 36 0.2\n38 35 0.2\n38 36 0.2\n38 37 0.2\n39 35 0.2\n39 36 0.2\n39 37 0.2\n39 38 0.2\n40 35 0.2\n40 36 0.2\n40 37 0.2\n40 38 0.2\n40 39 0.2\n43 42 1\n45 44 0.5\n46 44 0.5\n46 45 0.5\n48 47 0.333333\n49 47 0.333333\n49 48 0.333333\n50 47 0.333333\n50 48 0.333333\n50 49 0.333333\n51 33 0.75\n52 51 0.25\n52 33 0.25\n53 51 0.25\n53 52 0.25\n53 33 1.85833\n53 34 0.775\n54 51 0.25\n54 52 0.25\n54 53 0.625\n54 33 2.99167\n54 34 1.15833\n54 30 0.25\n55 51 0.5\n56 51 0.5\n56 55 3.83333\n57 51 1\n58 51 1\n58 57 1\n60 59 0.5\n61 59 0.5\n61 60 0.5\n63 62 0.47619\n64 62 0.333333\n64 63 0.333333\n65 62 0.333333\n65 63 0.333333\n65 64 0.333333\n67 66 0.5\n68 66 0.5\n68 67 0.5\n70 69 0.833333\n71 69 2.16667\n71 70 0.833333\n72 69 0.916667\n72 70 0.333333\n72 71 0.666667\n74 73 0.333333\n75 73 0.333333\n75 74 0.333333\n76 73 0.333333\n76 74 0.333333\n76 75 0.333333\n78 77 0.333333\n78 46 1\n79 77 0.333333\n79 78 0.333333\n80 77 0.333333\n80 78 0.333333\n80 79 0.333333\n82 81 0.5\n83 81 0.5\n83 82 0.5\n85 84 0.5\n86 84 0.5\n86 85 0.5\n88 87 2.5\n90 55 1\n92 91 0.5\n93 91 0.5\n93 92 0.5\n95 94 0.5\n96 94 2.66667\n96 95 0.5\n97 94 2.33333\n97 95 0.5\n97 96 2.33333\n97 69 1.83333\n98 94 0.5\n98 95 0.5\n98 96 0.5\n98 97 0.5\n99 94 0.5\n99 96 0.5\n99 97 0.5\n100 94 0.25\n100 99 1.25\n100 96 0.25\n100 97 0.25\n103 102 0.5\n104 102 0.5\n104 103 0.5\n106 105 0.5\n107 105 0.5\n107 106 0.5\n109 108 1\n112 111 1\n114 113 1\n117 116 1\n119 118 1\n121 120 1\n121 78 1\n123 122 0.5\n124 122 0.5\n124 123 0.5\n127 126 0.7\n128 126 0.5\n128 127 0.75\n130 129 1\n131 33 1.33333\n131 30 0.333333\n131 34 0.333333\n132 33 2.275\n132 34 0.525\n132 53 1.025\n132 54 0.375\n133 33 1.025\n133 34 1.025\n133 132 0.525\n133 53 0.525\n133 54 0.125\n134 33 0.525\n134 34 0.525\n134 132 0.525\n134 133 0.525\n134 53 0.525\n134 54 0.125\n136 135 1\n138 137 1\n140 139 0.111111\n141 139 0.111111\n141 140 0.111111\n142 139 0.111111\n142 140 0.111111\n142 141 0.111111\n143 139 0.111111\n143 140 0.111111\n143 141 0.111111\n143 142 0.111111\n144 139 0.111111\n144 140 0.111111\n144 141 0.111111\n144 142 0.111111\n144 143 0.111111\n145 139 0.111111\n145 140 0.111111\n145 141 0.111111\n145 142 0.111111\n145 143 0.111111\n145 144 0.111111\n146 139 0.111111\n146 140 0.111111\n146 141 0.111111\n146 142 0.111111\n146 143 0.111111\n146 144 0.111111\n146 145 0.111111\n147 139 0.111111\n147 140 0.111111\n147 141 0.111111\n147 142 0.111111\n147 143 0.111111\n147 144 0.111111\n147 145 0.111111\n147 146 0.111111\n148 139 0.111111\n148 140 0.111111\n148 141 0.111111\n148 142 0.111111\n148 143 0.111111\n148 144 0.111111\n148 145 0.111111\n148 146 0.111111\n148 147 0.111111\n149 71 1.16667\n150 149 0.666667\n150 71 0.666667\n150 96 0.833333\n150 94 0.333333\n151 149 1.16667\n151 71 1.16667\n151 150 4.75\n151 127 0.333333\n152 149 1\n154 153 1.33333\n155 153 0.333333\n155 154 0.333333\n156 153 0.333333\n156 154 0.333333\n156 155 0.333333\n157 71 0.5\n158 71 0.5\n158 157 0.5\n161 160 1\n163 162 1\n165 164 1\n167 166 1\n170 169 0.5\n171 169 0.5\n171 170 0.5\n173 172 0.5\n174 172 1.5\n174 173 0.5\n176 175 0.5\n177 175 0.5\n177 176 0.5\n180 179 1\n181 179 1\n181 180 1\n183 182 1\n184 55 0.5\n184 56 0.5\n185 184 0.5\n186 184 0.5\n186 185 0.5\n188 187 1.5\n189 187 0.5\n189 188 0.5\n190 33 0.583333\n191 46 0.833333\n192 191 0.333333\n192 46 0.333333\n193 191 0.333333\n193 192 0.333333\n193 46 0.333333\n194 191 0.5\n194 46 0.5\n196 195 1.25\n197 195 0.25\n197 196 0.25\n198 195 0.25\n198 196 0.25\n198 197 0.25\n199 195 0.25\n199 196 0.25\n199 197 0.25\n199 198 0.25\n201 200 0.5\n201 24 0.333333\n201 25 0.333333\n202 200 0.5\n202 201 0.833333\n202 24 0.333333\n202 25 0.333333\n203 131 1\n206 205 1\n208 207 0.5\n209 207 0.5\n209 208 0.5\n211 210 0.5\n212 210 0.5\n212 211 0.5\n214 213 0.5\n215 213 0.5\n215 214 0.5\n216 48 0.333333\n216 136 0.5\n217 216 1.08333\n217 48 0.333333\n218 216 1.66667\n218 217 1.08333\n218 48 0.333333\n219 216 0.5\n219 218 0.25\n220 216 1.5\n220 219 0.5\n220 218 0.25\n221 216 0.25\n221 219 0.583333\n221 220 0.25\n222 216 0.25\n222 219 1.75\n222 220 0.25\n222 221 0.25\n223 216 0.5\n223 136 0.5\n224 216 0.583333\n224 220 0.25\n224 219 0.25\n224 218 0.583333\n225 150 2.08333\n225 96 0.333333\n225 94 0.333333\n225 151 0.75\n227 226 1\n229 228 1.33333\n230 228 0.333333\n230 229 0.333333\n231 228 0.333333\n231 229 0.333333\n231 230 0.333333\n234 233 0.5\n235 233 0.5\n235 234 0.5\n235 72 1\n238 237 1\n240 239 1\n241 239 1\n243 242 1\n245 244 3.5\n246 244 1\n247 244 1\n249 248 0.5\n250 248 0.5\n250 249 0.5\n251 217 0.25\n251 216 0.25\n251 218 0.25\n252 217 0.25\n252 216 0.5\n252 251 0.25\n252 218 0.25\n255 254 1\n256 254 0.5\n256 255 0.5\n259 258 1.33333\n261 260 1\n263 262 0.142857\n264 262 0.142857\n264 263 0.142857\n265 262 0.142857\n265 263 0.67619\n265 264 0.142857\n266 262 0.142857\n266 263 0.67619\n266 264 0.142857\n266 265 0.92619\n267 262 0.142857\n267 263 0.142857\n267 264 0.142857\n267 265 0.142857\n267 266 0.142857\n268 262 0.142857\n268 263 0.67619\n268 264 0.142857\n268 265 0.92619\n268 266 0.92619\n268 267 0.142857\n269 262 0.142857\n269 263 0.142857\n269 264 0.142857\n269 265 0.142857\n269 266 0.142857\n269 267 0.142857\n269 268 0.142857\n271 270 1\n274 273 0.5\n275 273 0.5\n275 274 0.5\n277 276 0.5\n278 276 0.5\n278 277 1\n280 279 0.166667\n281 279 0.166667\n281 280 0.166667\n281 78 1\n281 150 1.83333\n282 279 0.166667\n282 280 0.166667\n282 281 0.166667\n283 279 0.166667\n283 280 0.166667\n283 281 3.16667\n283 282 0.166667\n284 279 0.166667\n284 280 0.166667\n284 281 0.166667\n284 282 0.166667\n284 283 0.166667\n285 279 0.166667\n285 280 0.166667\n285 281 0.166667\n285 282 0.166667\n285 283 0.166667\n285 284 0.166667\n287 286 0.5\n288 286 1\n288 287 0.5\n289 286 0.5\n289 288 0.5\n291 290 0.5\n292 290 0.5\n292 291 0.5\n294 293 2.1\n297 296 1\n298 296 0.333333\n299 296 0.333333\n299 298 0.333333\n300 296 1.33333\n300 298 0.333333\n300 299 0.333333\n301 203 1.16667\n301 150 0.5\n301 151 0.5\n301 162 0.25\n302 301 1.33333\n302 203 0.833333\n303 301 0.333333\n303 203 0.333333\n303 302 0.333333\n304 301 0.5\n304 302 0.5\n305 78 0.583333\n306 305 0.25\n306 78 0.25\n307 305 0.25\n307 306 0.25\n307 78 0.25\n307 265 0.25\n307 266 0.25\n307 268 0.25\n308 305 0.583333\n308 306 0.25\n308 307 0.25\n308 78 1.58333\n309 305 0.333333\n309 78 3.33333\n309 308 2.33333\n310 97 0.5\n310 69 0.5\n312 311 1\n314 313 0.5\n315 313 0.5\n315 314 0.5\n316 203 0.333333\n316 301 0.583333\n316 162 0.25\n317 203 0.333333\n317 316 0.333333\n317 301 0.333333\n319 318 1\n321 320 0.833333\n322 320 0.333333\n322 321 0.333333\n323 320 0.666667\n323 321 0.333333\n323 322 0.333333\n324 320 0.333333\n324 323 0.333333\n325 320 0.333333\n325 323 0.333333\n325 324 0.333333\n327 326 0.333333\n327 30 0.333333\n328 326 0.333333\n328 327 1.16667\n329 326 0.333333\n329 327 0.333333\n329 328 0.333333\n330 151 0.5\n331 330 0.5\n331 151 0.5\n333 332 0.333333\n334 332 0.333333\n334 333 0.333333\n335 332 0.333333\n335 333 0.333333\n335 334 0.333333\n337 336 1\n339 338 0.333333\n340 338 0.333333\n340 339 0.333333\n341 338 0.333333\n341 339 1.33333\n341 340 0.333333\n343 342 0.5\n343 221 0.333333\n343 219 2.47619\n344 342 0.5\n344 343 0.5\n345 252 0.25\n345 216 0.583333\n346 345 0.583333\n346 252 0.25\n346 216 0.916667\n347 345 0.583333\n347 346 0.583333\n347 252 0.25\n347 216 0.583333\n349 348 0.2\n350 348 0.2\n350 349 0.2\n351 348 0.2\n351 349 0.2\n351 350 0.2\n352 348 0.2\n352 349 0.2\n352 350 0.2\n352 351 0.2\n353 348 0.2\n353 349 0.2\n353 350 0.2\n353 351 0.2\n353 352 0.2\n355 354 0.5\n356 354 0.5\n356 355 0.5\n358 357 0.833333\n359 357 0.5\n359 358 0.5\n360 357 0.333333\n360 358 0.333333\n361 357 0.333333\n361 360 0.333333\n361 358 0.333333\n362 62 0.2\n363 362 1\n364 362 0.5\n365 362 0.5\n365 364 0.5\n367 366 0.5\n368 366 0.5\n368 367 0.5\n369 24 0.5\n369 25 0.5\n370 78 0.5\n371 370 0.5\n371 78 2.5\n371 309 0.5\n373 372 0.5\n374 372 0.5\n374 373 0.5\n375 33 0.25\n376 375 1.91667\n376 33 0.25\n377 375 2.91667\n377 376 1.91667\n377 33 0.25\n378 375 0.333333\n378 376 0.333333\n378 377 0.333333\n380 379 0.5\n381 379 0.5\n381 380 0.5\n383 382 0.5\n384 382 0.5\n384 383 0.5\n386 385 0.142857\n387 385 0.142857\n387 386 0.142857\n388 385 0.142857\n388 386 0.142857\n388 387 0.142857\n389 385 0.142857\n389 386 0.142857\n389 387 0.142857\n389 388 0.142857\n390 385 0.142857\n390 386 0.142857\n390 387 0.142857\n390 388 0.142857\n390 389 0.142857\n391 385 0.142857\n391 386 0.142857\n391 387 0.142857\n391 388 0.142857\n391 389 0.142857\n391 390 0.142857\n392 385 0.142857\n392 386 0.142857\n392 387 0.142857\n392 388 0.142857\n392 389 0.142857\n392 390 0.142857\n392 391 0.142857\n394 393 0.333333\n395 393 0.333333\n395 394 0.333333\n396 393 0.333333\n396 394 0.333333\n396 395 0.333333\n398 397 0.333333\n399 397 0.333333\n399 398 0.333333\n400 397 0.333333\n400 398 0.333333\n400 399 0.333333\n401 277 0.166667\n401 278 0.166667\n402 401 0.166667\n402 277 0.166667\n402 278 0.166667\n402 327 2.16667\n402 328 0.333333\n402 30 0.333333\n403 401 0.166667\n403 402 0.166667\n403 277 0.5\n403 278 0.5\n404 401 0.166667\n404 402 0.166667\n404 277 0.166667\n404 403 0.166667\n404 278 0.166667\n405 401 0.166667\n405 402 0.166667\n405 277 0.166667\n405 403 0.166667\n405 278 0.166667\n405 404 0.166667\n406 166 1\n409 408 0.25\n410 408 0.583333\n410 409 0.25\n411 408 0.25\n411 409 0.25\n411 410 0.25\n412 408 0.583333\n412 409 0.25\n412 410 0.583333\n412 411 0.25\n413 408 0.333333\n413 410 0.333333\n413 412 0.333333\n415 414 1\n415 247 0.333333\n416 402 0.833333\n416 327 3.5\n416 328 0.333333\n417 402 1\n417 327 1\n419 418 1\n421 319 1\n423 422 0.5\n424 422 0.5\n424 423 0.5\n426 425 0.5\n427 425 0.5\n427 426 0.5\n428 46 1.33333\n429 428 1\n431 430 1\n432 430 1\n434 433 1\n435 245 1\n435 244 1\n437 436 0.5\n438 436 0.5\n438 437 0.5\n439 118 0.5\n440 439 1\n441 439 0.5\n441 118 0.5\n443 442 1\n443 72 0.5\n445 444 1\n447 446 0.333333\n448 446 0.333333\n448 447 0.333333\n449 446 0.333333\n449 447 0.333333\n449 448 0.333333\n450 282 1\n453 452 0.142857\n454 452 0.142857\n454 453 0.142857\n455 452 0.142857\n455 453 0.142857\n455 454 0.142857\n456 452 0.142857\n456 453 0.142857\n456 454 0.142857\n456 455 0.142857\n457 452 0.142857\n457 453 0.142857\n457 454 0.142857\n457 455 0.142857\n457 456 0.142857\n458 452 0.142857\n458 453 0.642857\n458 454 0.142857\n458 455 0.142857\n458 456 0.142857\n458 457 0.142857\n459 452 0.142857\n459 453 0.642857\n459 454 0.142857\n459 455 0.142857\n459 456 0.142857\n459 457 0.142857\n459 458 0.642857\n461 460 0.333333\n462 460 0.333333\n462 461 0.333333\n463 460 0.333333\n463 461 0.333333\n463 462 0.333333\n463 301 0.5\n464 33 1\n465 464 1.5\n466 464 0.5\n466 465 0.5\n468 467 0.25\n469 467 0.25\n469 468 0.25\n470 467 0.25\n470 468 0.25\n470 469 0.25\n471 467 0.25\n471 468 0.25\n471 469 0.25\n471 470 0.25\n473 472 0.833333\n473 222 0.5\n473 219 0.5\n474 472 0.5\n474 473 0.5\n476 475 1\n477 475 0.5\n478 475 0.5\n478 477 0.5\n480 479 0.333333\n481 479 0.333333\n481 480 0.333333\n482 479 0.333333\n482 480 0.333333\n482 481 0.333333\n484 483 1\n485 33 1\n487 486 1\n488 33 0.333333\n488 54 0.333333\n489 488 0.333333\n489 33 0.333333\n489 54 0.333333\n490 309 1.5\n490 78 0.5\n491 490 0.5\n491 309 0.5\n492 490 1\n493 490 0.5\n493 309 0.5\n495 494 0.5\n496 494 0.5\n496 495 0.5\n498 497 1\n499 303 1\n500 150 0.5\n501 500 1\n502 500 2.5\n502 501 1\n503 500 1.5\n503 502 0.5\n506 505 1\n507 190 0.583333\n507 33 0.583333\n508 507 1.08333\n508 190 0.583333\n508 33 0.583333\n509 507 0.75\n509 508 0.75\n509 190 0.25\n509 33 0.25\n512 511 1\n513 245 0.5\n513 244 0.5\n515 514 0.833333\n516 514 0.833333\n516 515 2.33333\n516 346 0.333333\n516 216 0.333333\n516 151 1.58333\n516 150 1.08333\n516 225 0.25\n517 514 0.333333\n517 515 0.333333\n517 516 2.91667\n517 151 2.25\n517 150 1.58333\n517 225 0.25\n517 127 0.333333\n517 152 1\n519 518 1\n521 520 1\n522 76 1\n523 522 0.25\n524 522 0.25\n524 523 0.25\n525 522 0.25\n525 523 0.25\n525 524 0.25\n526 522 0.25\n526 523 0.25\n526 524 0.25\n526 525 0.25\n527 522 2\n529 528 1\n531 530 0.533333\n532 530 0.533333\n532 531 0.533333\n533 530 0.333333\n533 531 0.333333\n533 532 0.333333\n535 534 1\n538 537 0.5\n539 537 0.833333\n539 538 0.5\n540 537 0.333333\n541 537 0.333333\n541 540 0.333333\n542 537 0.333333\n542 540 0.333333\n542 541 0.333333\n545 544 1\n547 546 1\n547 55 0.5\n547 56 0.5\n547 329 1.5\n548 121 0.333333\n549 548 0.333333\n549 121 0.333333\n550 548 0.333333\n550 549 0.333333\n550 121 1.83333\n553 552 0.5\n554 552 0.5\n554 553 0.5\n557 556 0.5\n558 556 0.5\n558 557 0.5\n560 559 1\n561 33 0.708333\n561 53 0.708333\n561 34 0.375\n561 133 0.125\n561 54 0.375\n561 132 0.125\n561 134 0.125\n562 561 0.458333\n562 33 0.458333\n562 53 0.458333\n562 34 0.125\n562 133 0.125\n562 54 0.125\n562 132 0.125\n562 134 0.125\n563 82 1\n564 563 0.333333\n565 563 0.333333\n565 564 0.333333\n566 563 0.333333\n566 564 0.333333\n566 565 0.333333\n567 189 2.33333\n569 568 1\n571 570 1\n573 572 1\n574 281 2.5\n574 283 0.5\n575 574 0.5\n575 281 0.5\n576 574 0.5\n576 281 0.5\n578 577 1\n581 580 0.5\n582 580 0.5\n582 581 0.5\n584 583 1\n585 136 0.333333\n586 585 0.333333\n586 136 0.333333\n587 585 0.333333\n587 586 0.333333\n587 136 1.83333\n590 589 0.583333\n590 307 1\n591 589 0.583333\n591 590 1.58333\n592 589 0.333333\n592 590 0.333333\n592 591 0.333333\n594 593 1\n595 277 0.333333\n595 403 0.333333\n595 278 0.333333\n596 327 0.5\n596 416 0.5\n596 46 1\n598 597 1\n600 599 1\n603 602 1\n606 275 0.333333\n607 275 0.333333\n607 606 0.333333\n608 275 0.333333\n608 606 0.333333\n608 607 0.333333\n609 45 0.833333\n610 609 0.5\n610 45 0.5\n611 609 0.333333\n611 45 0.333333\n612 609 0.333333\n612 45 0.333333\n612 611 0.333333\n615 614 1\n617 616 1\n619 618 0.5\n620 618 0.5\n620 619 0.5\n622 621 1\n624 623 1\n626 625 0.333333\n627 625 0.333333\n627 626 0.333333\n628 625 0.333333\n628 626 0.333333\n628 627 0.333333\n630 629 0.5\n631 629 0.5\n631 630 1\n631 337 0.2\n633 632 1\n636 635 0.5\n637 635 0.5\n637 636 0.5\n638 162 0.25\n638 316 0.25\n638 301 0.75\n638 463 0.5\n639 638 0.25\n639 162 0.25\n639 316 0.25\n639 301 0.25\n640 638 1\n641 78 1\n643 642 1\n646 78 2.5\n648 647 1\n650 189 0.333333\n650 567 0.333333\n651 650 0.333333\n651 189 0.333333\n651 567 0.333333\n652 34 0.25\n653 652 0.333333\n654 652 2.08333\n654 653 0.333333\n654 34 1.25\n654 55 0.333333\n654 56 0.333333\n655 652 2.08333\n655 653 0.333333\n655 654 2.08333\n655 34 0.25\n656 652 0.333333\n656 654 0.333333\n656 655 0.333333\n657 652 0.583333\n657 34 0.25\n657 654 0.916667\n657 655 0.583333\n659 658 0.333333\n660 658 0.333333\n660 659 0.333333\n661 658 0.333333\n661 659 0.333333\n661 660 0.333333\n663 662 0.75\n664 662 0.25\n664 663 0.25\n665 662 0.25\n665 663 0.25\n665 664 0.25\n666 662 0.25\n666 663 0.25\n666 664 0.25\n666 665 0.25\n668 667 1\n670 669 1\n671 669 1\n673 672 1\n674 515 0.5\n674 516 0.5\n675 443 0.5\n676 675 0.5\n676 443 0.5\n677 663 0.5\n677 662 0.5\n679 678 0.5\n680 678 0.5\n680 679 0.5\n682 681 0.333333\n683 681 0.333333\n683 682 0.333333\n684 681 0.333333\n684 682 0.333333\n684 683 0.333333\n685 57 1\n686 350 1\n689 537 0.333333\n689 539 0.333333\n690 689 0.333333\n690 537 0.333333\n690 539 0.333333\n692 342 1\n694 693 0.2\n695 693 0.2\n695 694 0.2\n696 693 0.2\n696 694 0.2\n696 695 0.2\n697 693 1.2\n697 694 0.2\n697 695 0.2\n697 696 0.2\n697 219 0.142857\n697 343 0.142857\n698 693 0.2\n698 694 0.2\n698 695 0.2\n698 696 0.2\n698 697 0.2\n699 445 1\n700 96 0.333333\n701 700 0.333333\n701 96 0.333333\n702 700 0.333333\n702 96 0.333333\n702 701 0.333333\n705 704 0.333333\n706 704 0.333333\n706 705 0.333333\n707 704 0.333333\n707 705 0.333333\n707 706 0.333333\n708 97 0.583333\n708 94 0.583333\n708 96 0.583333\n708 99 0.25\n709 97 0.333333\n709 69 0.666667\n709 71 0.333333\n709 72 0.333333\n710 97 0.333333\n710 709 0.333333\n710 69 0.333333\n711 87 0.5\n711 88 0.5\n712 642 0.5\n713 712 0.5\n713 642 0.5\n715 695 0.25\n716 695 0.25\n716 715 0.25\n717 695 0.25\n717 715 0.25\n717 716 0.25\n718 695 0.25\n718 715 0.25\n718 716 0.25\n718 717 0.25\n720 719 2\n721 670 1\n724 723 0.333333\n725 723 0.333333\n725 724 0.333333\n726 723 0.333333\n726 724 0.333333\n726 725 0.333333\n729 136 0.5\n729 587 0.5\n731 730 1\n733 732 0.5\n734 732 0.5\n734 733 0.5\n736 71 0.5\n737 736 0.5\n737 71 0.5\n738 443 0.5\n738 72 0.5\n739 443 1\n742 293 0.9\n742 294 1.9\n742 523 0.333333\n743 742 1.4\n743 293 0.9\n743 294 1.4\n744 742 1.2\n744 293 0.7\n744 743 0.7\n744 294 2.7\n745 742 1\n746 742 2.33333\n746 294 0.333333\n746 523 0.333333\n748 747 1\n751 750 1\n752 719 0.5\n753 752 0.5\n753 719 0.5\n755 754 1\n756 34 0.5\n756 78 0.5\n757 756 0.5\n757 69 0.75\n757 72 0.25\n758 756 0.5\n758 757 1.25\n758 69 0.75\n758 72 0.25\n759 756 1\n759 78 0.5\n759 371 0.5\n760 756 1.5\n760 34 0.5\n761 756 1.86667\n761 34 0.333333\n762 756 0.333333\n762 761 0.666667\n762 34 0.333333\n763 756 0.333333\n763 761 0.666667\n763 762 0.666667\n763 34 0.333333\n764 756 0.533333\n764 761 0.533333\n764 121 0.833333\n765 756 0.533333\n765 764 0.866667\n765 761 0.533333\n765 121 0.333333\n767 766 0.333333\n768 766 0.333333\n768 767 0.333333\n769 766 0.333333\n769 767 0.333333\n769 768 0.333333\n770 127 0.2\n770 126 0.2\n771 770 0.2\n771 127 0.2\n771 126 0.2\n772 770 0.2\n772 771 0.2\n772 127 0.2\n772 126 0.2\n773 770 0.2\n773 771 0.2\n773 127 0.2\n773 772 0.2\n773 126 0.2\n774 761 1.33333\n774 657 0.333333\n774 654 0.333333\n775 774 1.33333\n775 761 1.53333\n775 764 0.2\n775 756 0.2\n775 765 0.2\n776 774 0.333333\n776 761 0.333333\n776 775 0.333333\n778 777 1\n780 496 0.5\n781 780 0.5\n781 496 0.5\n783 631 1\n784 631 0.5\n784 783 0.5\n786 785 0.5\n787 785 0.5\n787 786 0.5\n788 346 0.333333\n788 216 0.333333\n788 516 0.333333\n789 597 1\n790 789 1\n790 597 1\n792 662 0.333333\n793 792 0.333333\n793 662 0.333333\n794 792 0.333333\n794 662 0.333333\n794 793 0.333333\n795 64 0.25\n796 795 0.25\n796 64 0.25\n797 795 0.25\n797 796 0.25\n797 64 0.25\n798 795 0.25\n798 796 0.25\n798 797 0.25\n798 64 0.25\n800 799 0.2\n801 799 0.2\n801 800 0.2\n802 799 0.2\n802 800 0.2\n802 801 0.2\n803 799 0.2\n803 800 0.2\n803 801 0.2\n803 802 0.2\n804 799 0.2\n804 800 0.2\n804 801 0.2\n804 802 0.2\n804 803 0.2\n805 62 0.92619\n805 362 0.2\n806 805 0.92619\n806 62 1.25952\n806 362 0.2\n807 805 0.92619\n807 806 0.92619\n807 62 0.92619\n807 362 0.2\n808 805 0.25\n808 806 0.25\n808 807 0.25\n808 62 0.25\n810 809 1\n813 812 1\n815 814 0.5\n816 814 0.5\n816 815 0.5\n818 817 1\n820 819 1\n822 821 0.333333\n823 821 0.333333\n823 822 0.333333\n824 821 0.333333\n824 822 0.333333\n824 823 0.333333\n826 825 0.111111\n827 825 0.111111\n827 826 0.111111\n828 825 0.111111\n828 826 0.111111\n828 827 0.111111\n829 825 0.111111\n829 826 0.111111\n829 827 0.111111\n829 828 0.111111\n830 825 0.111111\n830 826 0.111111\n830 827 0.111111\n830 828 0.111111\n830 829 0.111111\n831 825 0.111111\n831 826 0.111111\n831 827 0.111111\n831 828 0.111111\n831 829 0.111111\n831 830 0.111111\n832 825 0.111111\n832 826 0.111111\n832 827 0.111111\n832 828 0.111111\n832 829 0.111111\n832 830 0.111111\n832 831 0.111111\n833 825 0.111111\n833 826 0.111111\n833 827 0.111111\n833 828 0.111111\n833 829 0.111111\n833 830 0.111111\n833 831 0.111111\n833 832 0.111111\n834 825 0.111111\n834 826 0.111111\n834 827 0.111111\n834 828 0.111111\n834 829 0.111111\n834 830 0.111111\n834 831 0.111111\n834 832 0.111111\n834 833 0.111111\n836 835 0.5\n837 835 0.5\n837 836 0.5\n839 34 0.333333\n839 33 0.333333\n839 54 0.333333\n840 34 0.45\n840 30 0.25\n840 54 0.45\n840 33 0.45\n842 841 1.5\n843 841 0.5\n843 842 0.5\n845 844 0.333333\n846 844 0.333333\n846 845 0.333333\n847 844 0.333333\n847 845 0.333333\n847 846 0.333333\n849 848 1\n851 850 0.5\n852 850 0.5\n852 851 0.5\n853 646 0.5\n853 78 0.5\n856 855 0.5\n857 855 0.5\n857 856 0.5\n859 106 1\n860 294 0.2\n861 860 0.5\n862 860 0.5\n862 861 0.5\n863 654 0.5\n864 863 0.5\n864 654 0.5\n865 654 0.5\n865 34 0.5\n866 371 0.5\n867 866 0.5\n867 371 0.5\n871 870 0.25\n872 870 0.25\n872 871 0.25\n873 870 0.25\n873 871 0.25\n873 872 0.25\n874 870 0.25\n874 871 0.25\n874 872 0.25\n874 873 0.25\n878 877 0.25\n879 877 0.25\n879 878 0.25\n880 877 0.25\n880 878 0.25\n880 879 0.25\n881 877 0.25\n881 878 0.25\n881 879 0.25\n881 880 0.25\n884 883 0.5\n885 883 0.5\n885 884 0.5\n887 886 1\n889 888 0.5\n890 888 0.5\n890 889 0.5\n892 761 0.2\n892 764 0.2\n892 756 0.2\n892 765 0.2\n892 775 0.2\n893 652 0.333333\n893 654 0.666667\n893 655 0.333333\n893 55 0.333333\n893 56 0.333333\n894 402 0.333333\n894 30 0.333333\n894 327 0.333333\n896 895 0.25\n897 895 0.25\n897 896 0.25\n898 895 0.25\n898 896 0.25\n898 897 0.25\n899 895 0.25\n899 896 0.25\n899 897 0.25\n899 898 0.25\n901 900 0.5\n902 900 0.5\n902 901 0.5\n904 903 0.5\n905 903 0.5\n905 904 0.5\n907 906 1\n908 307 0.25\n908 265 0.25\n908 266 0.25\n908 268 0.25\n910 909 0.5\n911 909 0.5\n911 910 0.5\n913 912 0.2\n914 912 0.2\n914 913 0.342857\n915 912 0.2\n915 913 0.342857\n915 914 0.342857\n916 912 0.2\n916 913 0.985714\n916 914 0.342857\n916 915 0.342857\n917 912 0.2\n917 913 0.2\n917 914 0.2\n917 915 0.2\n917 916 0.2\n918 171 1\n921 920 1\n922 415 1\n924 923 0.5\n925 923 0.5\n925 924 0.5\n926 177 1\n927 243 1.25\n930 929 1\n931 742 0.7\n931 293 0.4\n931 743 0.2\n931 294 0.4\n932 931 1.9\n932 742 0.7\n932 293 0.4\n932 743 0.2\n932 294 0.4\n933 931 1\n934 55 0.5\n934 56 0.5\n935 117 0.25\n936 935 0.25\n936 117 0.25\n937 935 0.25\n937 936 0.25\n937 117 0.25\n938 935 0.25\n938 936 0.25\n938 937 0.25\n938 117 0.25\n940 478 1\n942 941 0.5\n943 941 0.5\n943 942 0.5\n944 263 0.2\n944 265 0.2\n944 266 0.2\n944 268 0.2\n945 263 0.2\n945 265 0.2\n945 266 0.2\n945 944 0.2\n945 268 0.2\n946 1 1\n948 947 1\n950 949 1\n952 951 1.16667\n953 951 1.16667\n953 952 1.16667\n954 951 0.666667\n954 953 0.666667\n954 952 0.666667\n955 194 0.5\n956 955 0.5\n956 194 1.08333\n958 957 0.5\n959 957 0.5\n959 958 0.5\n961 960 0.5\n962 960 0.5\n962 961 0.5\n963 517 0.333333\n963 151 0.333333\n964 963 0.333333\n964 517 0.333333\n964 151 0.333333\n966 965 0.2\n967 965 0.2\n967 966 0.2\n968 965 0.2\n968 966 0.2\n968 967 0.2\n969 965 0.2\n969 966 0.2\n969 967 0.2\n969 968 0.2\n970 965 0.2\n970 966 0.2\n970 967 0.2\n970 968 0.2\n970 969 0.2\n973 972 1\n973 300 1\n975 974 0.5\n976 974 0.5\n976 975 0.5\n976 88 1\n977 758 0.25\n977 757 0.25\n977 69 0.25\n977 72 0.25\n979 978 1\n981 980 0.5\n982 980 0.5\n982 981 0.5\n984 983 1\n984 473 2.16667\n984 472 0.333333\n985 983 0.5\n985 984 0.833333\n985 473 0.333333\n986 983 0.5\n986 984 0.5\n988 987 1\n989 973 1\n991 88 2\n993 992 1\n995 994 0.25\n996 994 0.25\n996 995 0.25\n997 994 0.25\n997 995 0.25\n997 996 0.25\n998 994 0.25\n998 995 0.25\n998 996 0.25\n998 997 0.25\n1000 999 1\n1000 913 0.142857\n1000 916 0.142857\n1000 255 0.5\n1000 254 0.5\n1002 973 0.833333\n1003 1002 0.833333\n1003 973 0.833333\n1004 1002 0.333333\n1004 1003 0.333333\n1004 973 0.333333\n1005 78 1\n1007 1006 1\n1008 51 0.5\n1008 33 0.5\n1010 1009 1\n1012 1011 1\n1014 1013 1\n1016 62 1.33333\n1016 806 0.333333\n1018 1017 1.2\n1021 127 0.25\n1021 128 0.75\n1022 127 0.25\n1022 128 0.25\n1022 1021 0.25\n1023 127 0.25\n1023 128 1.75\n1023 1021 0.75\n1023 1022 0.25\n1024 53 0.5\n1025 1024 0.5\n1025 53 0.5\n1026 303 0.333333\n1027 1026 1\n1028 746 0.333333\n1028 294 0.333333\n1029 1028 0.333333\n1029 746 0.333333\n1029 294 0.333333\n1030 550 0.5\n1030 121 0.5\n1032 1031 1\n1034 1033 1\n1036 1035 1\n1037 1035 0.5\n1038 1035 0.5\n1038 1037 0.5\n1039 308 0.5\n1040 1039 0.5\n1040 308 1.5\n1041 224 0.333333\n1041 218 0.333333\n1041 216 0.333333\n1043 1042 0.5\n1044 1042 0.5\n1044 1043 0.5\n1045 1010 1\n1046 482 1\n1047 12 0.25\n1048 1047 0.25\n1048 12 0.25\n1049 1047 0.25\n1049 1048 0.25\n1049 12 0.25\n1050 1047 0.25\n1050 1048 0.25\n1050 1049 0.25\n1050 12 0.25\n1053 1052 1\n1055 1054 1\n1056 1054 0.333333\n1057 1054 0.333333\n1057 1056 0.333333\n1058 1054 0.333333\n1058 1056 0.333333\n1058 1057 0.333333\n1061 1060 0.111111\n1062 1060 0.111111\n1062 1061 0.111111\n1063 1060 0.111111\n1063 1061 0.111111\n1063 1062 0.111111\n1064 1060 0.111111\n1064 1061 0.111111\n1064 1062 0.111111\n1064 1063 0.111111\n1065 1060 0.111111\n1065 1061 0.111111\n1065 1062 0.111111\n1065 1063 0.111111\n1065 1064 0.111111\n1066 1060 0.111111\n1066 1061 0.111111\n1066 1062 0.111111\n1066 1063 0.111111\n1066 1064 0.111111\n1066 1065 0.111111\n1067 1060 0.111111\n1067 1061 0.111111\n1067 1062 0.111111\n1067 1063 0.111111\n1067 1064 0.111111\n1067 1065 0.111111\n1067 1066 0.111111\n1068 1060 0.111111\n1068 1061 0.111111\n1068 1062 0.111111\n1068 1063 0.111111\n1068 1064 0.111111\n1068 1065 0.111111\n1068 1066 0.111111\n1068 1067 0.111111\n1069 1060 0.111111\n1069 1061 0.111111\n1069 1062 0.111111\n1069 1063 0.111111\n1069 1064 0.111111\n1069 1065 0.111111\n1069 1066 0.111111\n1069 1067 0.111111\n1069 1068 0.111111\n1070 806 0.142857\n1070 805 0.142857\n1070 807 0.142857\n1070 62 0.142857\n1071 806 0.67619\n1071 805 0.342857\n1071 807 0.342857\n1071 1070 0.142857\n1071 62 0.67619\n1071 362 0.2\n1071 1016 0.333333\n1072 806 0.142857\n1072 805 0.142857\n1072 807 0.142857\n1072 1070 0.142857\n1072 1071 0.142857\n1072 62 0.142857\n1073 806 0.142857\n1073 805 0.142857\n1073 807 0.142857\n1073 1070 0.142857\n1073 1071 0.142857\n1073 1072 0.142857\n1073 62 0.142857\n1074 227 1\n1079 1078 1\n1081 281 2\n1082 69 0.5\n1083 1082 0.5\n1083 69 0.5\n1084 0 0.5\n1084 1 0.5\n1086 516 0.5\n1087 516 2.5\n1087 1086 0.5\n1088 516 1\n1088 1087 0.5\n1088 151 0.5\n1089 516 0.5\n1089 1087 0.5\n1091 473 0.333333\n1091 472 0.333333\n1091 984 0.333333\n1092 473 0.833333\n1092 984 0.833333\n1092 985 0.333333\n1094 1093 0.333333\n1095 1093 0.333333\n1095 1094 0.333333\n1096 1093 0.333333\n1096 1094 0.333333\n1096 1095 0.333333\n1098 1097 0.5\n1099 1097 0.5\n1099 1098 0.5\n1102 1101 0.5\n1103 1101 0.5\n1103 1102 0.5\n1106 1105 0.125\n1107 1105 0.125\n1107 1106 0.125\n1108 1105 0.125\n1108 1106 0.125\n1108 1107 0.125\n1109 1105 0.125\n1109 1106 0.125\n1109 1107 0.125\n1109 1108 0.125\n1110 1105 0.125\n1110 1106 0.125\n1110 1107 0.125\n1110 1108 0.125\n1110 1109 0.125\n1111 1105 0.125\n1111 1106 0.125\n1111 1107 0.125\n1111 1108 0.125\n1111 1109 0.125\n1111 1110 0.125\n1112 1105 0.125\n1112 1106 0.125\n1112 1107 0.125\n1112 1108 0.125\n1112 1109 0.125\n1112 1110 0.125\n1112 1111 0.125\n1113 1105 0.125\n1113 1106 0.125\n1113 1107 0.125\n1113 1108 0.125\n1113 1109 0.125\n1113 1110 0.125\n1113 1111 0.125\n1113 1112 0.125\n1115 1114 1\n1117 1116 0.25\n1118 1116 0.25\n1118 1117 0.25\n1119 1116 0.25\n1119 1117 0.25\n1119 1118 0.25\n1120 1116 0.25\n1120 1117 0.25\n1120 1118 0.25\n1120 1119 0.25\n1121 78 0.5\n1122 78 0.5\n1122 1121 0.5\n1123 78 0.5\n1123 756 0.5\n1124 247 0.333333\n1124 415 0.333333\n1125 1124 0.333333\n1125 247 0.333333\n1125 415 0.333333\n1128 1127 1\n1129 976 1\n1130 657 0.333333\n1130 774 0.333333\n1130 654 0.833333\n1130 34 0.5\n1132 1131 1\n1134 1133 1\n1135 956 0.583333\n1135 194 0.583333\n1136 1135 0.25\n1136 956 0.25\n1136 194 0.25\n1137 1135 0.25\n1137 1136 0.25\n1137 956 0.25\n1137 194 0.25\n1138 1135 0.333333\n1138 194 0.333333\n1138 956 0.333333\n1140 1139 1\n1142 1141 1\n1145 221 0.333333\n1145 343 1.47619\n1145 219 2.14286\n1145 697 0.142857\n1147 1146 0.25\n1148 1146 0.25\n1148 1147 0.25\n1149 1146 0.25\n1149 1147 0.25\n1149 1148 0.25\n1150 1146 0.25\n1150 1147 0.25\n1150 1148 0.25\n1150 1149 0.25\n1153 1152 0.125\n1154 1152 0.125\n1154 1153 0.125\n1155 1152 0.125\n1155 1153 0.125\n1155 1154 0.125\n1156 1152 0.125\n1156 1153 0.125\n1156 1154 0.125\n1156 1155 0.125\n1157 1152 0.125\n1157 1153 0.125\n1157 1154 0.125\n1157 1155 0.125\n1157 1156 0.125\n1158 1152 0.125\n1158 1153 0.125\n1158 1154 0.125\n1158 1155 0.125\n1158 1156 0.125\n1158 1157 0.125\n1159 1152 0.125\n1159 1153 0.125\n1159 1154 0.125\n1159 1155 0.125\n1159 1156 0.125\n1159 1157 0.125\n1159 1158 0.125\n1160 1152 0.125\n1160 1153 0.125\n1160 1154 0.125\n1160 1155 0.125\n1160 1156 0.125\n1160 1157 0.125\n1160 1158 0.125\n1160 1159 0.125\n1162 114 0.5\n1162 186 1.25\n1163 114 0.5\n1163 1162 0.5\n1165 1164 1\n1166 259 0.333333\n1166 258 0.333333\n1167 259 0.333333\n1167 258 0.333333\n1167 1166 0.333333\n1169 1168 1\n1170 820 1\n1172 78 1\n1175 931 0.5\n1176 1175 0.5\n1176 931 0.5\n1177 150 0.5\n1177 96 0.5\n1178 150 0.833333\n1178 281 0.833333\n1180 589 0.25\n1180 590 0.25\n1180 591 0.25\n1181 1180 0.25\n1181 589 0.25\n1181 590 0.25\n1181 591 0.25\n1182 302 1\n1185 1184 0.5\n1186 1184 0.5\n1186 1185 0.5\n1189 327 0.5\n1189 328 0.5\n1190 54 0.2\n1190 34 0.2\n1190 840 0.2\n1190 33 0.2\n1191 1190 0.2\n1191 54 0.2\n1191 34 0.2\n1191 840 0.2\n1191 33 0.2\n1194 1193 1\n1195 78 0.333333\n1196 1195 0.333333\n1196 78 0.333333\n1197 1195 0.333333\n1197 1196 0.333333\n1197 78 0.333333\n1199 1198 0.5\n1200 1198 0.5\n1200 1199 0.5\n1201 913 0.785714\n1201 916 1.11905\n1201 1000 0.142857\n1201 914 0.142857\n1201 915 0.142857\n1202 913 0.142857\n1202 916 0.142857\n1202 1201 0.142857\n1202 1000 0.142857\n1203 913 0.142857\n1203 916 0.142857\n1203 1201 0.142857\n1203 1202 0.142857\n1203 1000 0.142857\n1204 913 0.142857\n1204 916 0.142857\n1204 1201 0.142857\n1204 1202 0.142857\n1204 1203 0.142857\n1204 1000 0.142857\n1205 913 0.142857\n1205 916 0.142857\n1205 1201 0.142857\n1205 1202 0.142857\n1205 1203 0.142857\n1205 1204 0.142857\n1205 1000 0.142857\n1206 913 0.142857\n1206 916 0.142857\n1206 1201 0.142857\n1206 914 0.142857\n1206 915 0.142857\n1207 913 0.142857\n1207 1206 0.142857\n1207 916 0.142857\n1207 1201 0.142857\n1207 914 0.142857\n1207 915 0.142857\n1208 913 0.142857\n1208 1206 0.142857\n1208 916 0.142857\n1208 1201 0.142857\n1208 914 0.142857\n1208 1207 0.142857\n1208 915 0.142857\n1210 1209 0.333333\n1211 1209 0.333333\n1211 1210 0.333333\n1212 1209 0.333333\n1212 1210 0.333333\n1212 1211 0.333333\n1214 330 0.25\n1215 1214 0.25\n1215 330 0.25\n1216 1214 0.25\n1216 330 0.25\n1216 1215 0.25\n1217 1214 0.25\n1217 330 0.25\n1217 1215 0.25\n1217 1216 0.25\n1219 1218 1\n1221 500 0.5\n1221 150 0.5\n1223 1222 0.5\n1224 1222 0.5\n1224 1223 0.5\n1226 1225 1\n1227 1225 1\n1228 132 0.25\n1228 54 0.25\n1228 33 0.25\n1229 132 0.25\n1229 1228 0.25\n1229 54 0.25\n1229 33 0.25\n1230 244 1\n1232 1231 1\n1233 415 0.5\n1234 1233 0.5\n1234 415 0.5\n1235 481 0.5\n1236 1235 0.5\n1236 481 0.5\n1238 1237 1\n1239 547 1\n1241 1240 1\n1243 1242 1\n1244 482 0.25\n1245 1244 0.25\n1245 482 0.25\n1246 1244 0.25\n1246 1245 0.25\n1246 482 0.25\n1247 1244 0.25\n1247 1245 0.25\n1247 1246 0.25\n1247 482 0.25\n1249 1248 1\n1250 481 0.5\n1251 1250 0.5\n1251 481 0.5\n1253 1252 0.5\n1254 1252 1.5\n1254 1253 0.5\n1255 764 0.833333\n1255 765 0.333333\n1255 121 0.833333\n1256 1201 0.333333\n1256 916 0.333333\n1257 1201 0.333333\n1257 1256 0.333333\n1257 916 0.333333\n1259 1258 1\n1261 1260 0.5\n1262 1260 0.5\n1262 1261 0.5\n1263 375 0.333333\n1263 376 0.333333\n1263 377 0.333333\n1265 1264 0.333333\n1266 1264 0.333333\n1266 1265 0.333333\n1267 1264 0.333333\n1267 1265 0.333333\n1267 1266 0.333333\n1268 872 1\n1270 320 0.5\n1270 321 0.5\n1271 947 0.5\n1272 1271 0.5\n1272 947 0.5\n1273 843 0.75\n1274 1273 0.75\n1274 843 0.75\n1275 1273 0.25\n1275 1274 0.25\n1275 843 0.25\n1276 1273 0.25\n1276 1274 0.25\n1276 843 0.25\n1276 1275 0.25\n1278 744 0.7\n1278 294 0.7\n1278 743 0.2\n1278 742 0.2\n1278 293 0.2\n1279 744 0.333333\n1280 744 0.333333\n1280 1279 0.333333\n1281 744 0.333333\n1281 1279 0.333333\n1281 1280 0.333333\n1282 1145 0.333333\n1282 219 0.333333\n1283 1282 0.333333\n1283 1145 0.333333\n1283 219 0.333333\n1287 1286 0.25\n1288 1286 0.25\n1288 1287 0.25\n1289 1286 0.25\n1289 1287 0.25\n1289 1288 0.25\n1290 1286 0.25\n1290 1287 0.25\n1290 1288 0.25\n1290 1289 0.25\n1293 1292 0.5\n1294 1292 0.5\n1294 1293 0.5\n1295 375 0.25\n1295 376 0.25\n1295 33 0.25\n1295 377 0.25\n1299 1298 1\n1303 1018 0.5\n1304 1018 0.5\n1304 1303 0.5\n1305 1018 1\n1306 1018 0.2\n1306 1017 0.2\n1307 1018 0.2\n1307 1306 0.2\n1307 1017 0.2\n1308 1018 0.2\n1308 1306 0.2\n1308 1307 0.2\n1308 1017 0.2\n1309 1018 0.2\n1309 1306 0.2\n1309 1307 0.2\n1309 1308 0.2\n1309 1017 0.2\n1311 1310 1\n1313 1312 0.25\n1314 1312 0.25\n1314 1313 0.25\n1315 1312 0.25\n1315 1313 0.25\n1315 1314 0.25\n1315 53 0.25\n1316 1312 0.25\n1316 1313 0.25\n1316 1314 0.25\n1316 1315 0.25\n1318 900 1\n1321 1320 1\n1322 524 1\n1324 1323 0.5\n1325 1323 0.5\n1325 1324 0.5\n1327 1326 1\n1329 1328 1\n1332 1331 0.5\n1333 1331 0.5\n1333 1332 0.5\n1336 1335 0.333333\n1337 1335 0.333333\n1337 1336 0.333333\n1338 1335 0.333333\n1338 1336 0.333333\n1338 1337 0.333333\n1339 882 1\n1341 517 1\n1342 281 0.333333\n1342 150 0.333333\n1342 1178 0.333333\n1343 281 0.5\n1344 281 0.5\n1344 1343 0.5\n1345 1225 1\n1346 721 1\n1347 377 0.5\n1348 1347 0.5\n1348 377 0.5\n1349 362 0.25\n1350 1349 0.25\n1350 362 0.25\n1351 1349 0.25\n1351 1350 0.25\n1351 362 0.25\n1352 1349 0.25\n1352 1350 0.25\n1352 1351 0.25\n1352 362 0.25\n1355 1354 1\n1356 523 0.333333\n1356 746 0.333333\n1356 742 0.333333\n1356 931 1\n1357 1356 1\n1357 1107 0.333333\n1358 1356 1\n1358 1357 2.33333\n1358 1107 0.333333\n1359 1356 1\n1361 46 1.33333\n1361 428 0.333333\n1362 46 0.333333\n1362 1361 0.333333\n1362 428 0.333333\n1363 46 1\n1364 1286 0.25\n1365 1364 0.25\n1365 1286 0.25\n1366 1364 0.25\n1366 1365 0.25\n1366 1286 0.25\n1367 1364 0.25\n1367 1365 0.25\n1367 1366 0.25\n1367 1286 0.25\n1368 932 0.2\n1368 293 0.2\n1368 294 0.2\n1368 931 0.2\n1369 932 0.2\n1369 1368 0.2\n1369 293 0.2\n1369 294 0.2\n1369 931 0.2\n1371 1370 1\n1373 1372 1\n1375 1374 0.5\n1376 1374 0.5\n1376 1375 0.5\n1377 1294 0.5\n1378 1377 0.5\n1378 1294 0.5\n1381 522 0.5\n1381 76 0.5\n1384 194 0.5\n1385 1384 0.5\n1385 194 0.5\n1387 1386 1\n1389 329 1.5\n1389 547 0.5\n1391 1390 0.5\n1392 1390 0.5\n1392 1391 0.5\n1394 1145 0.142857\n1394 219 0.142857\n1394 343 0.142857\n1394 697 0.142857\n1395 1394 0.142857\n1395 1145 0.142857\n1395 219 0.142857\n1395 343 0.142857\n1395 697 0.142857\n1396 1394 0.142857\n1396 1145 0.142857\n1396 1395 0.142857\n1396 219 0.142857\n1396 343 0.142857\n1396 697 0.142857\n1397 1394 0.142857\n1397 1145 0.142857\n1397 1395 0.142857\n1397 219 0.142857\n1397 343 0.142857\n1397 1396 0.142857\n1397 697 0.142857\n1398 314 1\n1400 1399 0.25\n1401 1399 0.25\n1401 1400 0.25\n1402 1399 0.25\n1402 1400 0.25\n1402 1401 0.25\n1403 1399 0.25\n1403 1400 0.25\n1403 1401 0.25\n1403 1402 0.25\n1404 327 0.166667\n1404 416 0.166667\n1405 1404 0.166667\n1405 327 0.166667\n1405 416 0.166667\n1406 1404 0.166667\n1406 1405 0.166667\n1406 327 0.166667\n1406 416 0.166667\n1407 1404 0.166667\n1407 1405 0.166667\n1407 327 0.166667\n1407 1406 0.166667\n1407 416 0.166667\n1408 1404 0.166667\n1408 1405 0.166667\n1408 327 0.166667\n1408 1406 0.166667\n1408 416 0.166667\n1408 1407 0.166667\n1409 496 0.5\n1410 1409 0.5\n1410 496 0.5\n1411 1357 0.333333\n1411 1107 0.333333\n1411 1358 0.333333\n1412 1060 1\n1413 186 0.25\n1413 1162 0.25\n1414 186 0.25\n1414 1413 0.25\n1414 1162 0.25\n1415 186 0.25\n1415 1413 0.25\n1415 1162 0.25\n1415 1414 0.25\n1416 303 0.333333\n1416 1026 0.333333\n1417 1416 0.333333\n1417 303 0.333333\n1417 1026 0.333333\n1418 930 1\n1419 1336 1\n1421 1420 0.333333\n1422 1420 0.333333\n1422 1421 0.333333\n1423 1420 0.333333\n1423 1421 0.333333\n1423 1422 0.333333\n1424 9 0.5\n1425 1424 0.5\n1425 9 1.5\n1427 1426 0.5\n1428 1426 0.5\n1428 1427 0.5\n1429 645 0.0526316\n1430 1429 0.385965\n1430 645 0.0526316\n1431 1429 0.385965\n1431 645 0.0526316\n1431 1430 0.385965\n1432 1429 0.0526316\n1432 645 0.0526316\n1432 1430 0.0526316\n1432 1431 0.0526316\n1433 1429 0.0526316\n1433 645 0.0526316\n1433 1430 0.0526316\n1433 1431 0.0526316\n1433 1432 0.0526316\n1434 1429 0.0526316\n1434 645 0.0526316\n1434 1430 0.0526316\n1434 1431 0.0526316\n1434 1432 0.0526316\n1434 1433 0.0526316\n1435 1429 0.0526316\n1435 645 0.0526316\n1435 1430 0.0526316\n1435 1431 0.0526316\n1435 1432 0.0526316\n1435 1433 0.0526316\n1435 1434 0.0526316\n1436 1429 0.0526316\n1436 645 0.0526316\n1436 1430 0.0526316\n1436 1431 0.0526316\n1436 1432 0.0526316\n1436 1433 0.0526316\n1436 1434 0.0526316\n1436 1435 0.0526316\n1437 1429 0.0526316\n1437 645 0.0526316\n1437 1430 0.0526316\n1437 1431 0.0526316\n1437 1432 0.0526316\n1437 1433 0.0526316\n1437 1434 0.0526316\n1437 1435 0.0526316\n1437 1436 0.0526316\n1438 1429 0.0526316\n1438 645 0.0526316\n1438 1430 0.0526316\n1438 1431 0.0526316\n1438 1432 0.0526316\n1438 1433 0.0526316\n1438 1434 0.0526316\n1438 1435 0.0526316\n1438 1436 0.0526316\n1438 1437 0.0526316\n1439 1429 0.0526316\n1439 645 0.0526316\n1439 1430 0.0526316\n1439 1431 0.0526316\n1439 1432 0.0526316\n1439 1433 0.0526316\n1439 1434 0.0526316\n1439 1435 0.0526316\n1439 1436 0.0526316\n1439 1437 0.0526316\n1439 1438 0.0526316\n1440 1429 0.0526316\n1440 645 0.0526316\n1440 1430 0.0526316\n1440 1431 0.0526316\n1440 1432 0.0526316\n1440 1433 0.0526316\n1440 1434 0.0526316\n1440 1435 0.0526316\n1440 1436 0.0526316\n1440 1437 0.0526316\n1440 1438 0.0526316\n1440 1439 0.0526316\n1441 1429 0.0526316\n1441 645 0.0526316\n1441 1430 0.0526316\n1441 1431 0.0526316\n1441 1432 0.0526316\n1441 1433 0.0526316\n1441 1434 0.0526316\n1441 1435 0.0526316\n1441 1436 0.0526316\n1441 1437 0.0526316\n1441 1438 0.0526316\n1441 1439 0.0526316\n1441 1440 0.0526316\n1442 1429 0.0526316\n1442 645 0.0526316\n1442 1430 0.0526316\n1442 1431 0.0526316\n1442 1432 0.0526316\n1442 1433 0.0526316\n1442 1434 0.0526316\n1442 1435 0.0526316\n1442 1436 0.0526316\n1442 1437 0.0526316\n1442 1438 0.0526316\n1442 1439 0.0526316\n1442 1440 0.0526316\n1442 1441 0.0526316\n1443 1429 0.0526316\n1443 645 0.0526316\n1443 1430 0.0526316\n1443 1431 0.0526316\n1443 1432 0.0526316\n1443 1433 0.0526316\n1443 1434 0.0526316\n1443 1435 0.0526316\n1443 1436 0.0526316\n1443 1437 0.0526316\n1443 1438 0.0526316\n1443 1439 0.0526316\n1443 1440 0.0526316\n1443 1441 0.0526316\n1443 1442 0.0526316\n1444 1429 0.0526316\n1444 645 0.0526316\n1444 1430 0.0526316\n1444 1431 0.0526316\n1444 1432 0.0526316\n1444 1433 0.0526316\n1444 1434 0.0526316\n1444 1435 0.0526316\n1444 1436 0.0526316\n1444 1437 0.0526316\n1444 1438 0.0526316\n1444 1439 0.0526316\n1444 1440 0.0526316\n1444 1441 0.0526316\n1444 1442 0.0526316\n1444 1443 0.0526316\n1445 1429 0.0526316\n1445 645 0.0526316\n1445 1430 0.0526316\n1445 1431 0.0526316\n1445 1432 0.0526316\n1445 1433 0.0526316\n1445 1434 0.0526316\n1445 1435 0.0526316\n1445 1436 0.0526316\n1445 1437 0.0526316\n1445 1438 0.0526316\n1445 1439 0.0526316\n1445 1440 0.0526316\n1445 1441 0.0526316\n1445 1442 0.0526316\n1445 1443 0.0526316\n1445 1444 0.0526316\n1446 1429 0.0526316\n1446 645 0.0526316\n1446 1430 0.0526316\n1446 1431 0.0526316\n1446 1432 0.0526316\n1446 1433 0.0526316\n1446 1434 0.0526316\n1446 1435 0.0526316\n1446 1436 0.0526316\n1446 1437 0.0526316\n1446 1438 0.0526316\n1446 1439 0.0526316\n1446 1440 0.0526316\n1446 1441 0.0526316\n1446 1442 0.0526316\n1446 1443 0.0526316\n1446 1444 0.0526316\n1446 1445 0.0526316\n1447 1429 0.0526316\n1447 645 0.0526316\n1447 1430 0.0526316\n1447 1431 0.0526316\n1447 1432 0.0526316\n1447 1433 0.0526316\n1447 1434 0.0526316\n1447 1435 0.0526316\n1447 1436 0.0526316\n1447 1437 0.0526316\n1447 1438 0.0526316\n1447 1439 0.0526316\n1447 1440 0.0526316\n1447 1441 0.0526316\n1447 1442 0.0526316\n1447 1443 0.0526316\n1447 1444 0.0526316\n1447 1445 0.0526316\n1447 1446 0.0526316\n1448 1429 0.333333\n1448 1430 0.333333\n1448 1431 0.333333\n1450 1449 1\n1451 283 0.5\n1451 281 0.5\n1452 216 1\n1453 1360 1\n1454 721 1\n1455 482 1\n1457 1456 0.333333\n1458 1456 0.333333\n1458 1457 0.333333\n1459 1456 0.333333\n1459 1457 0.333333\n1459 1458 0.333333\n1460 517 0.333333\n1460 127 0.333333\n1460 151 0.333333\n1461 55 0.5\n1461 56 0.5\n1464 860 0.2\n1464 294 0.2\n1465 1464 0.2\n1465 860 0.2\n1465 294 0.2\n1466 1464 0.2\n1466 1465 0.2\n1466 860 0.2\n1466 294 0.2\n1467 1464 0.2\n1467 1465 0.2\n1467 860 0.2\n1467 1466 0.2\n1467 294 0.2\n1468 53 0.25\n1468 1315 0.25\n1469 53 0.25\n1469 1468 0.25\n1469 1315 0.25\n1470 53 0.25\n1470 1468 0.25\n1470 1315 0.25\n1470 1469 0.25\n1472 1471 0.5\n1473 1471 0.5\n1473 1472 0.5\n1475 1474 0.5\n1476 1474 0.5\n1476 1475 0.5\n1477 207 0.5\n1478 1477 0.5\n1478 207 0.5\n1480 1479 1\n1481 96 0.5\n1482 1481 0.5\n1482 96 0.5\n1484 1483 0.5\n1485 1483 0.5\n1485 1484 0.5\n1487 1486 1\n1488 1142 0.5\n1489 1488 0.5\n1489 1142 0.5\n1492 1491 1\n1493 1491 0.25\n1494 1493 1\n1496 1495 1\n1497 300 1\n1498 82 1\n1500 239 0.25\n1501 1500 0.25\n1501 239 0.25\n1502 1500 0.25\n1502 1501 0.25\n1502 239 0.25\n1503 1500 0.25\n1503 1501 0.25\n1503 239 0.25\n1503 1502 0.25\n1504 1000 0.5\n1505 1504 0.2\n1506 1504 0.2\n1506 1505 0.2\n1507 1504 0.2\n1507 1505 0.2\n1507 1506 0.2\n1508 1504 0.2\n1508 1505 0.2\n1508 1506 0.2\n1508 1507 0.2\n1509 1504 0.2\n1509 1505 0.2\n1509 1506 0.2\n1509 1507 0.2\n1509 1508 0.2\n1512 1511 0.5\n1513 1511 0.5\n1513 1512 0.5\n1514 1000 0.5\n1514 1504 0.5\n1515 1120 0.333333\n1516 1120 0.333333\n1516 1515 0.333333\n1517 1120 0.333333\n1517 1515 0.333333\n1517 1516 0.333333\n1518 243 0.25\n1518 927 0.25\n1519 1518 0.25\n1519 243 0.25\n1519 927 0.25\n1520 1518 0.25\n1520 1519 0.25\n1520 243 0.25\n1520 927 0.25\n1523 1522 1\n1526 1525 1\n1529 54 0.5\n1529 33 0.5\n1531 1530 1\n1532 9 1\n1533 532 0.2\n1533 531 0.2\n1533 530 0.2\n1534 532 0.2\n1534 1533 0.2\n1534 531 0.2\n1534 530 0.2\n1535 532 0.2\n1535 1533 0.2\n1535 1534 0.2\n1535 531 0.2\n1535 530 0.2\n1536 843 1\n1538 1537 0.5\n1539 1537 0.5\n1539 1538 0.5\n1540 1493 0.25\n1540 1491 0.25\n1541 1540 0.25\n1541 1493 0.25\n1541 1491 0.25\n1542 1540 0.25\n1542 1541 0.25\n1542 1493 0.25\n1542 1491 0.25\n1544 1543 1\n1546 1545 0.333333\n1547 1545 0.333333\n1547 1546 0.333333\n1548 1545 0.333333\n1548 1546 0.333333\n1548 1547 0.333333\n1549 308 1\n1550 34 0.833333\n1550 33 1.33333\n1550 54 0.5\n1551 1550 0.333333\n1551 34 0.333333\n1551 33 0.333333\n1553 294 0.333333\n1554 294 0.333333\n1554 1553 0.333333\n1555 294 0.333333\n1555 1553 0.333333\n1555 1554 0.333333\n1556 676 0.333333\n1557 1556 0.333333\n1557 676 0.333333\n1558 1556 0.333333\n1558 676 0.333333\n1558 1557 0.333333\n1560 1145 0.333333\n1560 219 0.333333\n1561 1560 0.333333\n1561 1145 0.333333\n1561 219 0.333333\n1562 63 0.142857\n1562 62 0.142857\n1563 1562 0.142857\n1563 63 0.142857\n1563 62 0.142857\n1564 1562 0.142857\n1564 1563 0.142857\n1564 63 0.142857\n1564 62 0.142857\n1565 1562 0.142857\n1565 1563 0.142857\n1565 1564 0.142857\n1565 63 0.142857\n1565 62 0.142857\n1566 1562 0.142857\n1566 1563 0.142857\n1566 1564 0.142857\n1566 1565 0.142857\n1566 63 0.142857\n1566 62 0.142857\n1567 1562 0.142857\n1567 1563 0.142857\n1567 1564 0.142857\n1567 1565 0.142857\n1567 1566 0.142857\n1567 63 0.142857\n1567 62 0.142857\n1569 1568 1\n1570 337 0.2\n1570 631 0.2\n1571 337 0.2\n1571 631 0.2\n1571 1570 0.2\n1572 337 0.2\n1572 631 0.2\n1572 1570 0.2\n1572 1571 0.2\n1573 337 0.2\n1573 631 0.2\n1573 1570 0.2\n1573 1571 0.2\n1573 1572 0.2\n1574 631 0.5\n1574 783 0.5\n1576 1575 0.333333\n1577 1575 0.333333\n1577 1576 0.333333\n1578 1575 0.333333\n1578 1576 0.333333\n1578 1577 0.333333\n1579 631 0.5\n1579 630 0.5\n1581 1580 1\n1584 1583 1\n1586 1585 1\n1587 1585 1\n1588 522 0.5\n1588 76 0.5`;\n\nconst nodes = new Set();\nconst edges = [];\nrawData.split('\\n').forEach((line) => {\n  const d = line.split(' ');\n  const u = d[0];\n  const v = d[1];\n  const weight = parseFloat(d[2]);\n\n  nodes.add(u);\n  nodes.add(v);\n\n  edges.push({\n    source: `${u}`,\n    target: `${v}`,\n    value: weight,\n  });\n});\n\nconst data = {\n  nodes: Array.from(nodes).map((u) => ({\n    id: `${u}`,\n    label: `${u}`,\n  })),\n  edges,\n};\n\nlet kernel: Kernel;\n\nconst App = React.memo(function BellmanFord() {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [datasource, setDatasource] = useState<\n    Array<{\n      destination: string;\n      weight: number;\n      prevPoint: string;\n    }>\n  >([]);\n\n  // @see https://github.com/nblintao/ParaGraphL/blob/master/sigma.layout.paragraphl.js#L192-L229\n  const buildTextureData = (nodes, edges, sourceNodeIdx) => {\n    const dataArray = [];\n    const nodeDict = [];\n    const mapIdPos = {};\n    let i = 0;\n    for (i = 0; i < nodes.length; i++) {\n      const n = nodes[i];\n      mapIdPos[n.id] = i;\n      if (i === sourceNodeIdx) {\n        dataArray.push(0); // distance\n      } else {\n        dataArray.push(10000); // Infinity\n      }\n      dataArray.push(-1); // predecessor\n      dataArray.push(0); // offset\n      dataArray.push(0); // outputing edge length\n      nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n      const e = edges[i];\n      nodeDict[mapIdPos[e.source]].push({\n        target: mapIdPos[e.target],\n        weight: e.value,\n      });\n      // lineIndexBufferData.push(mapIdPos[e.source], mapIdPos[e.target]);\n    }\n\n    let maxEdgePerVetex = 0;\n    for (i = 0; i < nodes.length; i++) {\n      const offset = dataArray.length;\n      const dests = nodeDict[i];\n      const len = dests.length;\n      dataArray[i * 4 + 2] = offset;\n      dataArray[i * 4 + 3] = dests.length;\n      maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n      for (let j = 0; j < len; ++j) {\n        const { target, weight } = dests[j];\n        dataArray.push(+target); // dest vertex index\n        dataArray.push(+weight); // edge weight\n      }\n    }\n\n    while (dataArray.length % 4 !== 0) {\n      dataArray.push(0);\n    }\n    return [new Float32Array(dataArray), maxEdgePerVetex];\n  };\n\n  const calcShortestPath = async (source: string) => {\n    const [nodesEdgesArray, maxEdgePerVetex] = buildTextureData(\n      data.nodes,\n      data.edges,\n      data.nodes.findIndex((n) => n.id === source),\n    );\n\n    if (kernel) {\n      const timeStart = window.performance.now();\n      await kernel\n        .setBinding({\n          gData: nodesEdgesArray,\n          MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n          VERTEX_COUNT: data.nodes.length,\n          MAX_DISTANCE: 10000,\n        })\n        .execute();\n\n      const output = await kernel.getOutput();\n      setTimeElapsed(window.performance.now() - timeStart);\n\n      setDatasource(\n        new Array(data.nodes.length)\n          .fill(0)\n          .map((_, i) => {\n            const prevPoint = data.nodes[output[i * 4 + 1]];\n            const weight = output[i * 4];\n\n            return {\n              destination: data.nodes[i].id,\n              weight: weight === 10000 ? 'MAX' : weight,\n              prevPoint: (prevPoint && prevPoint.id) || '-',\n            };\n          })\n          .filter(({ weight }) => weight !== 'MAX'),\n      );\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // compile our kernel code\n      const compiler = new Compiler();\n      const precompiledBundle = compiler.compileBundle(gCode);\n\n      // create world\n      const world = World.create({\n        engineOptions: {\n          supportCompute: true,\n        },\n      });\n\n      const vertexNum = data.nodes.length;\n\n      kernel = await world\n        .createKernel(precompiledBundle)\n        .setDispatch([Math.ceil(vertexNum / 16), 1, 1])\n        .setMaxIteration(vertexNum - 1); // relax all edges |V|-1 times\n\n      await calcShortestPath('1');\n    })();\n  }, []);\n\n  return (\n    <>\n      <div id=\"container\" />\n      <div>Directed Graph: {nodes.size} nodes, {edges.length} edges</div>\n      <div>Elapsed time: {timeElapsed} ms</div>\n      <div>\n        Shortest path from\n        <Select\n          defaultValue=\"1\"\n          options={data.nodes.map((node) => ({\n            value: node.id,\n            label: node.label,\n          }))}\n          onChange={calcShortestPath}\n        />\n      </div>\n      <Table\n        rowKey=\"destination\"\n        columns={[\n          {\n            dataIndex: 'destination',\n            title: 'destination',\n          },\n          {\n            dataIndex: 'weight',\n            title: 'weight',\n          },\n          {\n            dataIndex: 'prevPoint',\n            title: 'previous point',\n          },\n        ]}\n        dataSource={datasource}\n        pagination={false}\n      />\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-compiler\", \"antd\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-compiler\"), require(\"antd\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuCompiler, global.antd, global.react, global.reactDom);\n    global.perf = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuCompiler, _antd, _react, _reactDom) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var gCode = \"\\nimport { globalInvocationID } from 'g-webgpu';\\n\\nconst MAX_EDGE_PER_VERTEX;\\nconst VERTEX_COUNT;\\nconst MAX_DISTANCE;\\n\\n@numthreads(16, 1, 1)\\nclass BellmanFord {\\n  @in @out\\n  gData: vec4[];\\n\\n  @shared(16)\\n  sData: vec4[];\\n\\n  @main\\n  compute() {\\n    const tid = localInvocationID.x;\\n    const i = workGroupID.x * workGroupSize.x + localInvocationID.x;\\n\\n    if (i >= VERTEX_COUNT) {\\n      return;\\n    }\\n\\n    this.sData[tid] = this.gData[i];\\n    barrier();\\n\\n    const currentNode = this.sData[tid];\\n\\n    const arr_offset = floor(currentNode[2]);\\n    const length = floor(currentNode[3]);\\n    const node_buffer: vec4;\\n    for (let p: int = 0; p < MAX_EDGE_PER_VERTEX; p++) {\\n      if (p >= length) break;\\n      const arr_idx = arr_offset + p * 2;\\n      const buf_offset = arr_idx - arr_idx / 4 * 4;\\n      if (p == 0 || buf_offset == 0) {\\n        node_buffer = this.gData[int(arr_idx / 4)];\\n      }\\n      const float_j = buf_offset == 0 ? node_buffer[0] : node_buffer[2];\\n      const w = buf_offset == 0 ? node_buffer[1] : node_buffer[3];\\n\\n      const du = this.sData[tid].x;\\n      const dv = this.sData[int(float_j)].x;\\n      let newDist = du + w;\\n\\n      if (newDist < dv) {\\n        this.sData[int(float_j)].x = newDist;\\n        this.sData[int(float_j)].y = tid;\\n        barrier();\\n      }\\n    }\\n\\n    this.gData[i].xy = this.sData[tid].xy;\\n  }\\n}\\n\";\n  var rawData = \"1 0 2.5\\n3 2 0.25\\n4 2 0.25\\n4 3 0.25\\n5 2 0.25\\n5 3 0.25\\n5 4 0.25\\n6 2 0.25\\n6 3 0.25\\n6 4 0.25\\n6 5 0.25\\n8 7 1\\n9 7 3.16667\\n10 7 1.16667\\n10 9 1.16667\\n11 7 0.666667\\n11 10 0.666667\\n11 9 0.666667\\n13 12 0.333333\\n14 12 0.333333\\n14 13 0.333333\\n15 12 0.333333\\n15 13 0.333333\\n15 14 0.333333\\n17 16 0.5\\n18 16 0.5\\n18 17 0.5\\n21 20 0.5\\n22 20 0.5\\n22 21 0.5\\n24 23 0.5\\n25 23 0.5\\n25 24 2.33333\\n28 27 0.5\\n29 27 0.5\\n29 28 0.5\\n31 30 0.5\\n32 30 0.5\\n32 31 0.5\\n33 30 3.58333\\n34 30 1.58333\\n34 33 4.225\\n36 35 0.2\\n37 35 0.2\\n37 36 0.2\\n38 35 0.2\\n38 36 0.2\\n38 37 0.2\\n39 35 0.2\\n39 36 0.2\\n39 37 0.2\\n39 38 0.2\\n40 35 0.2\\n40 36 0.2\\n40 37 0.2\\n40 38 0.2\\n40 39 0.2\\n43 42 1\\n45 44 0.5\\n46 44 0.5\\n46 45 0.5\\n48 47 0.333333\\n49 47 0.333333\\n49 48 0.333333\\n50 47 0.333333\\n50 48 0.333333\\n50 49 0.333333\\n51 33 0.75\\n52 51 0.25\\n52 33 0.25\\n53 51 0.25\\n53 52 0.25\\n53 33 1.85833\\n53 34 0.775\\n54 51 0.25\\n54 52 0.25\\n54 53 0.625\\n54 33 2.99167\\n54 34 1.15833\\n54 30 0.25\\n55 51 0.5\\n56 51 0.5\\n56 55 3.83333\\n57 51 1\\n58 51 1\\n58 57 1\\n60 59 0.5\\n61 59 0.5\\n61 60 0.5\\n63 62 0.47619\\n64 62 0.333333\\n64 63 0.333333\\n65 62 0.333333\\n65 63 0.333333\\n65 64 0.333333\\n67 66 0.5\\n68 66 0.5\\n68 67 0.5\\n70 69 0.833333\\n71 69 2.16667\\n71 70 0.833333\\n72 69 0.916667\\n72 70 0.333333\\n72 71 0.666667\\n74 73 0.333333\\n75 73 0.333333\\n75 74 0.333333\\n76 73 0.333333\\n76 74 0.333333\\n76 75 0.333333\\n78 77 0.333333\\n78 46 1\\n79 77 0.333333\\n79 78 0.333333\\n80 77 0.333333\\n80 78 0.333333\\n80 79 0.333333\\n82 81 0.5\\n83 81 0.5\\n83 82 0.5\\n85 84 0.5\\n86 84 0.5\\n86 85 0.5\\n88 87 2.5\\n90 55 1\\n92 91 0.5\\n93 91 0.5\\n93 92 0.5\\n95 94 0.5\\n96 94 2.66667\\n96 95 0.5\\n97 94 2.33333\\n97 95 0.5\\n97 96 2.33333\\n97 69 1.83333\\n98 94 0.5\\n98 95 0.5\\n98 96 0.5\\n98 97 0.5\\n99 94 0.5\\n99 96 0.5\\n99 97 0.5\\n100 94 0.25\\n100 99 1.25\\n100 96 0.25\\n100 97 0.25\\n103 102 0.5\\n104 102 0.5\\n104 103 0.5\\n106 105 0.5\\n107 105 0.5\\n107 106 0.5\\n109 108 1\\n112 111 1\\n114 113 1\\n117 116 1\\n119 118 1\\n121 120 1\\n121 78 1\\n123 122 0.5\\n124 122 0.5\\n124 123 0.5\\n127 126 0.7\\n128 126 0.5\\n128 127 0.75\\n130 129 1\\n131 33 1.33333\\n131 30 0.333333\\n131 34 0.333333\\n132 33 2.275\\n132 34 0.525\\n132 53 1.025\\n132 54 0.375\\n133 33 1.025\\n133 34 1.025\\n133 132 0.525\\n133 53 0.525\\n133 54 0.125\\n134 33 0.525\\n134 34 0.525\\n134 132 0.525\\n134 133 0.525\\n134 53 0.525\\n134 54 0.125\\n136 135 1\\n138 137 1\\n140 139 0.111111\\n141 139 0.111111\\n141 140 0.111111\\n142 139 0.111111\\n142 140 0.111111\\n142 141 0.111111\\n143 139 0.111111\\n143 140 0.111111\\n143 141 0.111111\\n143 142 0.111111\\n144 139 0.111111\\n144 140 0.111111\\n144 141 0.111111\\n144 142 0.111111\\n144 143 0.111111\\n145 139 0.111111\\n145 140 0.111111\\n145 141 0.111111\\n145 142 0.111111\\n145 143 0.111111\\n145 144 0.111111\\n146 139 0.111111\\n146 140 0.111111\\n146 141 0.111111\\n146 142 0.111111\\n146 143 0.111111\\n146 144 0.111111\\n146 145 0.111111\\n147 139 0.111111\\n147 140 0.111111\\n147 141 0.111111\\n147 142 0.111111\\n147 143 0.111111\\n147 144 0.111111\\n147 145 0.111111\\n147 146 0.111111\\n148 139 0.111111\\n148 140 0.111111\\n148 141 0.111111\\n148 142 0.111111\\n148 143 0.111111\\n148 144 0.111111\\n148 145 0.111111\\n148 146 0.111111\\n148 147 0.111111\\n149 71 1.16667\\n150 149 0.666667\\n150 71 0.666667\\n150 96 0.833333\\n150 94 0.333333\\n151 149 1.16667\\n151 71 1.16667\\n151 150 4.75\\n151 127 0.333333\\n152 149 1\\n154 153 1.33333\\n155 153 0.333333\\n155 154 0.333333\\n156 153 0.333333\\n156 154 0.333333\\n156 155 0.333333\\n157 71 0.5\\n158 71 0.5\\n158 157 0.5\\n161 160 1\\n163 162 1\\n165 164 1\\n167 166 1\\n170 169 0.5\\n171 169 0.5\\n171 170 0.5\\n173 172 0.5\\n174 172 1.5\\n174 173 0.5\\n176 175 0.5\\n177 175 0.5\\n177 176 0.5\\n180 179 1\\n181 179 1\\n181 180 1\\n183 182 1\\n184 55 0.5\\n184 56 0.5\\n185 184 0.5\\n186 184 0.5\\n186 185 0.5\\n188 187 1.5\\n189 187 0.5\\n189 188 0.5\\n190 33 0.583333\\n191 46 0.833333\\n192 191 0.333333\\n192 46 0.333333\\n193 191 0.333333\\n193 192 0.333333\\n193 46 0.333333\\n194 191 0.5\\n194 46 0.5\\n196 195 1.25\\n197 195 0.25\\n197 196 0.25\\n198 195 0.25\\n198 196 0.25\\n198 197 0.25\\n199 195 0.25\\n199 196 0.25\\n199 197 0.25\\n199 198 0.25\\n201 200 0.5\\n201 24 0.333333\\n201 25 0.333333\\n202 200 0.5\\n202 201 0.833333\\n202 24 0.333333\\n202 25 0.333333\\n203 131 1\\n206 205 1\\n208 207 0.5\\n209 207 0.5\\n209 208 0.5\\n211 210 0.5\\n212 210 0.5\\n212 211 0.5\\n214 213 0.5\\n215 213 0.5\\n215 214 0.5\\n216 48 0.333333\\n216 136 0.5\\n217 216 1.08333\\n217 48 0.333333\\n218 216 1.66667\\n218 217 1.08333\\n218 48 0.333333\\n219 216 0.5\\n219 218 0.25\\n220 216 1.5\\n220 219 0.5\\n220 218 0.25\\n221 216 0.25\\n221 219 0.583333\\n221 220 0.25\\n222 216 0.25\\n222 219 1.75\\n222 220 0.25\\n222 221 0.25\\n223 216 0.5\\n223 136 0.5\\n224 216 0.583333\\n224 220 0.25\\n224 219 0.25\\n224 218 0.583333\\n225 150 2.08333\\n225 96 0.333333\\n225 94 0.333333\\n225 151 0.75\\n227 226 1\\n229 228 1.33333\\n230 228 0.333333\\n230 229 0.333333\\n231 228 0.333333\\n231 229 0.333333\\n231 230 0.333333\\n234 233 0.5\\n235 233 0.5\\n235 234 0.5\\n235 72 1\\n238 237 1\\n240 239 1\\n241 239 1\\n243 242 1\\n245 244 3.5\\n246 244 1\\n247 244 1\\n249 248 0.5\\n250 248 0.5\\n250 249 0.5\\n251 217 0.25\\n251 216 0.25\\n251 218 0.25\\n252 217 0.25\\n252 216 0.5\\n252 251 0.25\\n252 218 0.25\\n255 254 1\\n256 254 0.5\\n256 255 0.5\\n259 258 1.33333\\n261 260 1\\n263 262 0.142857\\n264 262 0.142857\\n264 263 0.142857\\n265 262 0.142857\\n265 263 0.67619\\n265 264 0.142857\\n266 262 0.142857\\n266 263 0.67619\\n266 264 0.142857\\n266 265 0.92619\\n267 262 0.142857\\n267 263 0.142857\\n267 264 0.142857\\n267 265 0.142857\\n267 266 0.142857\\n268 262 0.142857\\n268 263 0.67619\\n268 264 0.142857\\n268 265 0.92619\\n268 266 0.92619\\n268 267 0.142857\\n269 262 0.142857\\n269 263 0.142857\\n269 264 0.142857\\n269 265 0.142857\\n269 266 0.142857\\n269 267 0.142857\\n269 268 0.142857\\n271 270 1\\n274 273 0.5\\n275 273 0.5\\n275 274 0.5\\n277 276 0.5\\n278 276 0.5\\n278 277 1\\n280 279 0.166667\\n281 279 0.166667\\n281 280 0.166667\\n281 78 1\\n281 150 1.83333\\n282 279 0.166667\\n282 280 0.166667\\n282 281 0.166667\\n283 279 0.166667\\n283 280 0.166667\\n283 281 3.16667\\n283 282 0.166667\\n284 279 0.166667\\n284 280 0.166667\\n284 281 0.166667\\n284 282 0.166667\\n284 283 0.166667\\n285 279 0.166667\\n285 280 0.166667\\n285 281 0.166667\\n285 282 0.166667\\n285 283 0.166667\\n285 284 0.166667\\n287 286 0.5\\n288 286 1\\n288 287 0.5\\n289 286 0.5\\n289 288 0.5\\n291 290 0.5\\n292 290 0.5\\n292 291 0.5\\n294 293 2.1\\n297 296 1\\n298 296 0.333333\\n299 296 0.333333\\n299 298 0.333333\\n300 296 1.33333\\n300 298 0.333333\\n300 299 0.333333\\n301 203 1.16667\\n301 150 0.5\\n301 151 0.5\\n301 162 0.25\\n302 301 1.33333\\n302 203 0.833333\\n303 301 0.333333\\n303 203 0.333333\\n303 302 0.333333\\n304 301 0.5\\n304 302 0.5\\n305 78 0.583333\\n306 305 0.25\\n306 78 0.25\\n307 305 0.25\\n307 306 0.25\\n307 78 0.25\\n307 265 0.25\\n307 266 0.25\\n307 268 0.25\\n308 305 0.583333\\n308 306 0.25\\n308 307 0.25\\n308 78 1.58333\\n309 305 0.333333\\n309 78 3.33333\\n309 308 2.33333\\n310 97 0.5\\n310 69 0.5\\n312 311 1\\n314 313 0.5\\n315 313 0.5\\n315 314 0.5\\n316 203 0.333333\\n316 301 0.583333\\n316 162 0.25\\n317 203 0.333333\\n317 316 0.333333\\n317 301 0.333333\\n319 318 1\\n321 320 0.833333\\n322 320 0.333333\\n322 321 0.333333\\n323 320 0.666667\\n323 321 0.333333\\n323 322 0.333333\\n324 320 0.333333\\n324 323 0.333333\\n325 320 0.333333\\n325 323 0.333333\\n325 324 0.333333\\n327 326 0.333333\\n327 30 0.333333\\n328 326 0.333333\\n328 327 1.16667\\n329 326 0.333333\\n329 327 0.333333\\n329 328 0.333333\\n330 151 0.5\\n331 330 0.5\\n331 151 0.5\\n333 332 0.333333\\n334 332 0.333333\\n334 333 0.333333\\n335 332 0.333333\\n335 333 0.333333\\n335 334 0.333333\\n337 336 1\\n339 338 0.333333\\n340 338 0.333333\\n340 339 0.333333\\n341 338 0.333333\\n341 339 1.33333\\n341 340 0.333333\\n343 342 0.5\\n343 221 0.333333\\n343 219 2.47619\\n344 342 0.5\\n344 343 0.5\\n345 252 0.25\\n345 216 0.583333\\n346 345 0.583333\\n346 252 0.25\\n346 216 0.916667\\n347 345 0.583333\\n347 346 0.583333\\n347 252 0.25\\n347 216 0.583333\\n349 348 0.2\\n350 348 0.2\\n350 349 0.2\\n351 348 0.2\\n351 349 0.2\\n351 350 0.2\\n352 348 0.2\\n352 349 0.2\\n352 350 0.2\\n352 351 0.2\\n353 348 0.2\\n353 349 0.2\\n353 350 0.2\\n353 351 0.2\\n353 352 0.2\\n355 354 0.5\\n356 354 0.5\\n356 355 0.5\\n358 357 0.833333\\n359 357 0.5\\n359 358 0.5\\n360 357 0.333333\\n360 358 0.333333\\n361 357 0.333333\\n361 360 0.333333\\n361 358 0.333333\\n362 62 0.2\\n363 362 1\\n364 362 0.5\\n365 362 0.5\\n365 364 0.5\\n367 366 0.5\\n368 366 0.5\\n368 367 0.5\\n369 24 0.5\\n369 25 0.5\\n370 78 0.5\\n371 370 0.5\\n371 78 2.5\\n371 309 0.5\\n373 372 0.5\\n374 372 0.5\\n374 373 0.5\\n375 33 0.25\\n376 375 1.91667\\n376 33 0.25\\n377 375 2.91667\\n377 376 1.91667\\n377 33 0.25\\n378 375 0.333333\\n378 376 0.333333\\n378 377 0.333333\\n380 379 0.5\\n381 379 0.5\\n381 380 0.5\\n383 382 0.5\\n384 382 0.5\\n384 383 0.5\\n386 385 0.142857\\n387 385 0.142857\\n387 386 0.142857\\n388 385 0.142857\\n388 386 0.142857\\n388 387 0.142857\\n389 385 0.142857\\n389 386 0.142857\\n389 387 0.142857\\n389 388 0.142857\\n390 385 0.142857\\n390 386 0.142857\\n390 387 0.142857\\n390 388 0.142857\\n390 389 0.142857\\n391 385 0.142857\\n391 386 0.142857\\n391 387 0.142857\\n391 388 0.142857\\n391 389 0.142857\\n391 390 0.142857\\n392 385 0.142857\\n392 386 0.142857\\n392 387 0.142857\\n392 388 0.142857\\n392 389 0.142857\\n392 390 0.142857\\n392 391 0.142857\\n394 393 0.333333\\n395 393 0.333333\\n395 394 0.333333\\n396 393 0.333333\\n396 394 0.333333\\n396 395 0.333333\\n398 397 0.333333\\n399 397 0.333333\\n399 398 0.333333\\n400 397 0.333333\\n400 398 0.333333\\n400 399 0.333333\\n401 277 0.166667\\n401 278 0.166667\\n402 401 0.166667\\n402 277 0.166667\\n402 278 0.166667\\n402 327 2.16667\\n402 328 0.333333\\n402 30 0.333333\\n403 401 0.166667\\n403 402 0.166667\\n403 277 0.5\\n403 278 0.5\\n404 401 0.166667\\n404 402 0.166667\\n404 277 0.166667\\n404 403 0.166667\\n404 278 0.166667\\n405 401 0.166667\\n405 402 0.166667\\n405 277 0.166667\\n405 403 0.166667\\n405 278 0.166667\\n405 404 0.166667\\n406 166 1\\n409 408 0.25\\n410 408 0.583333\\n410 409 0.25\\n411 408 0.25\\n411 409 0.25\\n411 410 0.25\\n412 408 0.583333\\n412 409 0.25\\n412 410 0.583333\\n412 411 0.25\\n413 408 0.333333\\n413 410 0.333333\\n413 412 0.333333\\n415 414 1\\n415 247 0.333333\\n416 402 0.833333\\n416 327 3.5\\n416 328 0.333333\\n417 402 1\\n417 327 1\\n419 418 1\\n421 319 1\\n423 422 0.5\\n424 422 0.5\\n424 423 0.5\\n426 425 0.5\\n427 425 0.5\\n427 426 0.5\\n428 46 1.33333\\n429 428 1\\n431 430 1\\n432 430 1\\n434 433 1\\n435 245 1\\n435 244 1\\n437 436 0.5\\n438 436 0.5\\n438 437 0.5\\n439 118 0.5\\n440 439 1\\n441 439 0.5\\n441 118 0.5\\n443 442 1\\n443 72 0.5\\n445 444 1\\n447 446 0.333333\\n448 446 0.333333\\n448 447 0.333333\\n449 446 0.333333\\n449 447 0.333333\\n449 448 0.333333\\n450 282 1\\n453 452 0.142857\\n454 452 0.142857\\n454 453 0.142857\\n455 452 0.142857\\n455 453 0.142857\\n455 454 0.142857\\n456 452 0.142857\\n456 453 0.142857\\n456 454 0.142857\\n456 455 0.142857\\n457 452 0.142857\\n457 453 0.142857\\n457 454 0.142857\\n457 455 0.142857\\n457 456 0.142857\\n458 452 0.142857\\n458 453 0.642857\\n458 454 0.142857\\n458 455 0.142857\\n458 456 0.142857\\n458 457 0.142857\\n459 452 0.142857\\n459 453 0.642857\\n459 454 0.142857\\n459 455 0.142857\\n459 456 0.142857\\n459 457 0.142857\\n459 458 0.642857\\n461 460 0.333333\\n462 460 0.333333\\n462 461 0.333333\\n463 460 0.333333\\n463 461 0.333333\\n463 462 0.333333\\n463 301 0.5\\n464 33 1\\n465 464 1.5\\n466 464 0.5\\n466 465 0.5\\n468 467 0.25\\n469 467 0.25\\n469 468 0.25\\n470 467 0.25\\n470 468 0.25\\n470 469 0.25\\n471 467 0.25\\n471 468 0.25\\n471 469 0.25\\n471 470 0.25\\n473 472 0.833333\\n473 222 0.5\\n473 219 0.5\\n474 472 0.5\\n474 473 0.5\\n476 475 1\\n477 475 0.5\\n478 475 0.5\\n478 477 0.5\\n480 479 0.333333\\n481 479 0.333333\\n481 480 0.333333\\n482 479 0.333333\\n482 480 0.333333\\n482 481 0.333333\\n484 483 1\\n485 33 1\\n487 486 1\\n488 33 0.333333\\n488 54 0.333333\\n489 488 0.333333\\n489 33 0.333333\\n489 54 0.333333\\n490 309 1.5\\n490 78 0.5\\n491 490 0.5\\n491 309 0.5\\n492 490 1\\n493 490 0.5\\n493 309 0.5\\n495 494 0.5\\n496 494 0.5\\n496 495 0.5\\n498 497 1\\n499 303 1\\n500 150 0.5\\n501 500 1\\n502 500 2.5\\n502 501 1\\n503 500 1.5\\n503 502 0.5\\n506 505 1\\n507 190 0.583333\\n507 33 0.583333\\n508 507 1.08333\\n508 190 0.583333\\n508 33 0.583333\\n509 507 0.75\\n509 508 0.75\\n509 190 0.25\\n509 33 0.25\\n512 511 1\\n513 245 0.5\\n513 244 0.5\\n515 514 0.833333\\n516 514 0.833333\\n516 515 2.33333\\n516 346 0.333333\\n516 216 0.333333\\n516 151 1.58333\\n516 150 1.08333\\n516 225 0.25\\n517 514 0.333333\\n517 515 0.333333\\n517 516 2.91667\\n517 151 2.25\\n517 150 1.58333\\n517 225 0.25\\n517 127 0.333333\\n517 152 1\\n519 518 1\\n521 520 1\\n522 76 1\\n523 522 0.25\\n524 522 0.25\\n524 523 0.25\\n525 522 0.25\\n525 523 0.25\\n525 524 0.25\\n526 522 0.25\\n526 523 0.25\\n526 524 0.25\\n526 525 0.25\\n527 522 2\\n529 528 1\\n531 530 0.533333\\n532 530 0.533333\\n532 531 0.533333\\n533 530 0.333333\\n533 531 0.333333\\n533 532 0.333333\\n535 534 1\\n538 537 0.5\\n539 537 0.833333\\n539 538 0.5\\n540 537 0.333333\\n541 537 0.333333\\n541 540 0.333333\\n542 537 0.333333\\n542 540 0.333333\\n542 541 0.333333\\n545 544 1\\n547 546 1\\n547 55 0.5\\n547 56 0.5\\n547 329 1.5\\n548 121 0.333333\\n549 548 0.333333\\n549 121 0.333333\\n550 548 0.333333\\n550 549 0.333333\\n550 121 1.83333\\n553 552 0.5\\n554 552 0.5\\n554 553 0.5\\n557 556 0.5\\n558 556 0.5\\n558 557 0.5\\n560 559 1\\n561 33 0.708333\\n561 53 0.708333\\n561 34 0.375\\n561 133 0.125\\n561 54 0.375\\n561 132 0.125\\n561 134 0.125\\n562 561 0.458333\\n562 33 0.458333\\n562 53 0.458333\\n562 34 0.125\\n562 133 0.125\\n562 54 0.125\\n562 132 0.125\\n562 134 0.125\\n563 82 1\\n564 563 0.333333\\n565 563 0.333333\\n565 564 0.333333\\n566 563 0.333333\\n566 564 0.333333\\n566 565 0.333333\\n567 189 2.33333\\n569 568 1\\n571 570 1\\n573 572 1\\n574 281 2.5\\n574 283 0.5\\n575 574 0.5\\n575 281 0.5\\n576 574 0.5\\n576 281 0.5\\n578 577 1\\n581 580 0.5\\n582 580 0.5\\n582 581 0.5\\n584 583 1\\n585 136 0.333333\\n586 585 0.333333\\n586 136 0.333333\\n587 585 0.333333\\n587 586 0.333333\\n587 136 1.83333\\n590 589 0.583333\\n590 307 1\\n591 589 0.583333\\n591 590 1.58333\\n592 589 0.333333\\n592 590 0.333333\\n592 591 0.333333\\n594 593 1\\n595 277 0.333333\\n595 403 0.333333\\n595 278 0.333333\\n596 327 0.5\\n596 416 0.5\\n596 46 1\\n598 597 1\\n600 599 1\\n603 602 1\\n606 275 0.333333\\n607 275 0.333333\\n607 606 0.333333\\n608 275 0.333333\\n608 606 0.333333\\n608 607 0.333333\\n609 45 0.833333\\n610 609 0.5\\n610 45 0.5\\n611 609 0.333333\\n611 45 0.333333\\n612 609 0.333333\\n612 45 0.333333\\n612 611 0.333333\\n615 614 1\\n617 616 1\\n619 618 0.5\\n620 618 0.5\\n620 619 0.5\\n622 621 1\\n624 623 1\\n626 625 0.333333\\n627 625 0.333333\\n627 626 0.333333\\n628 625 0.333333\\n628 626 0.333333\\n628 627 0.333333\\n630 629 0.5\\n631 629 0.5\\n631 630 1\\n631 337 0.2\\n633 632 1\\n636 635 0.5\\n637 635 0.5\\n637 636 0.5\\n638 162 0.25\\n638 316 0.25\\n638 301 0.75\\n638 463 0.5\\n639 638 0.25\\n639 162 0.25\\n639 316 0.25\\n639 301 0.25\\n640 638 1\\n641 78 1\\n643 642 1\\n646 78 2.5\\n648 647 1\\n650 189 0.333333\\n650 567 0.333333\\n651 650 0.333333\\n651 189 0.333333\\n651 567 0.333333\\n652 34 0.25\\n653 652 0.333333\\n654 652 2.08333\\n654 653 0.333333\\n654 34 1.25\\n654 55 0.333333\\n654 56 0.333333\\n655 652 2.08333\\n655 653 0.333333\\n655 654 2.08333\\n655 34 0.25\\n656 652 0.333333\\n656 654 0.333333\\n656 655 0.333333\\n657 652 0.583333\\n657 34 0.25\\n657 654 0.916667\\n657 655 0.583333\\n659 658 0.333333\\n660 658 0.333333\\n660 659 0.333333\\n661 658 0.333333\\n661 659 0.333333\\n661 660 0.333333\\n663 662 0.75\\n664 662 0.25\\n664 663 0.25\\n665 662 0.25\\n665 663 0.25\\n665 664 0.25\\n666 662 0.25\\n666 663 0.25\\n666 664 0.25\\n666 665 0.25\\n668 667 1\\n670 669 1\\n671 669 1\\n673 672 1\\n674 515 0.5\\n674 516 0.5\\n675 443 0.5\\n676 675 0.5\\n676 443 0.5\\n677 663 0.5\\n677 662 0.5\\n679 678 0.5\\n680 678 0.5\\n680 679 0.5\\n682 681 0.333333\\n683 681 0.333333\\n683 682 0.333333\\n684 681 0.333333\\n684 682 0.333333\\n684 683 0.333333\\n685 57 1\\n686 350 1\\n689 537 0.333333\\n689 539 0.333333\\n690 689 0.333333\\n690 537 0.333333\\n690 539 0.333333\\n692 342 1\\n694 693 0.2\\n695 693 0.2\\n695 694 0.2\\n696 693 0.2\\n696 694 0.2\\n696 695 0.2\\n697 693 1.2\\n697 694 0.2\\n697 695 0.2\\n697 696 0.2\\n697 219 0.142857\\n697 343 0.142857\\n698 693 0.2\\n698 694 0.2\\n698 695 0.2\\n698 696 0.2\\n698 697 0.2\\n699 445 1\\n700 96 0.333333\\n701 700 0.333333\\n701 96 0.333333\\n702 700 0.333333\\n702 96 0.333333\\n702 701 0.333333\\n705 704 0.333333\\n706 704 0.333333\\n706 705 0.333333\\n707 704 0.333333\\n707 705 0.333333\\n707 706 0.333333\\n708 97 0.583333\\n708 94 0.583333\\n708 96 0.583333\\n708 99 0.25\\n709 97 0.333333\\n709 69 0.666667\\n709 71 0.333333\\n709 72 0.333333\\n710 97 0.333333\\n710 709 0.333333\\n710 69 0.333333\\n711 87 0.5\\n711 88 0.5\\n712 642 0.5\\n713 712 0.5\\n713 642 0.5\\n715 695 0.25\\n716 695 0.25\\n716 715 0.25\\n717 695 0.25\\n717 715 0.25\\n717 716 0.25\\n718 695 0.25\\n718 715 0.25\\n718 716 0.25\\n718 717 0.25\\n720 719 2\\n721 670 1\\n724 723 0.333333\\n725 723 0.333333\\n725 724 0.333333\\n726 723 0.333333\\n726 724 0.333333\\n726 725 0.333333\\n729 136 0.5\\n729 587 0.5\\n731 730 1\\n733 732 0.5\\n734 732 0.5\\n734 733 0.5\\n736 71 0.5\\n737 736 0.5\\n737 71 0.5\\n738 443 0.5\\n738 72 0.5\\n739 443 1\\n742 293 0.9\\n742 294 1.9\\n742 523 0.333333\\n743 742 1.4\\n743 293 0.9\\n743 294 1.4\\n744 742 1.2\\n744 293 0.7\\n744 743 0.7\\n744 294 2.7\\n745 742 1\\n746 742 2.33333\\n746 294 0.333333\\n746 523 0.333333\\n748 747 1\\n751 750 1\\n752 719 0.5\\n753 752 0.5\\n753 719 0.5\\n755 754 1\\n756 34 0.5\\n756 78 0.5\\n757 756 0.5\\n757 69 0.75\\n757 72 0.25\\n758 756 0.5\\n758 757 1.25\\n758 69 0.75\\n758 72 0.25\\n759 756 1\\n759 78 0.5\\n759 371 0.5\\n760 756 1.5\\n760 34 0.5\\n761 756 1.86667\\n761 34 0.333333\\n762 756 0.333333\\n762 761 0.666667\\n762 34 0.333333\\n763 756 0.333333\\n763 761 0.666667\\n763 762 0.666667\\n763 34 0.333333\\n764 756 0.533333\\n764 761 0.533333\\n764 121 0.833333\\n765 756 0.533333\\n765 764 0.866667\\n765 761 0.533333\\n765 121 0.333333\\n767 766 0.333333\\n768 766 0.333333\\n768 767 0.333333\\n769 766 0.333333\\n769 767 0.333333\\n769 768 0.333333\\n770 127 0.2\\n770 126 0.2\\n771 770 0.2\\n771 127 0.2\\n771 126 0.2\\n772 770 0.2\\n772 771 0.2\\n772 127 0.2\\n772 126 0.2\\n773 770 0.2\\n773 771 0.2\\n773 127 0.2\\n773 772 0.2\\n773 126 0.2\\n774 761 1.33333\\n774 657 0.333333\\n774 654 0.333333\\n775 774 1.33333\\n775 761 1.53333\\n775 764 0.2\\n775 756 0.2\\n775 765 0.2\\n776 774 0.333333\\n776 761 0.333333\\n776 775 0.333333\\n778 777 1\\n780 496 0.5\\n781 780 0.5\\n781 496 0.5\\n783 631 1\\n784 631 0.5\\n784 783 0.5\\n786 785 0.5\\n787 785 0.5\\n787 786 0.5\\n788 346 0.333333\\n788 216 0.333333\\n788 516 0.333333\\n789 597 1\\n790 789 1\\n790 597 1\\n792 662 0.333333\\n793 792 0.333333\\n793 662 0.333333\\n794 792 0.333333\\n794 662 0.333333\\n794 793 0.333333\\n795 64 0.25\\n796 795 0.25\\n796 64 0.25\\n797 795 0.25\\n797 796 0.25\\n797 64 0.25\\n798 795 0.25\\n798 796 0.25\\n798 797 0.25\\n798 64 0.25\\n800 799 0.2\\n801 799 0.2\\n801 800 0.2\\n802 799 0.2\\n802 800 0.2\\n802 801 0.2\\n803 799 0.2\\n803 800 0.2\\n803 801 0.2\\n803 802 0.2\\n804 799 0.2\\n804 800 0.2\\n804 801 0.2\\n804 802 0.2\\n804 803 0.2\\n805 62 0.92619\\n805 362 0.2\\n806 805 0.92619\\n806 62 1.25952\\n806 362 0.2\\n807 805 0.92619\\n807 806 0.92619\\n807 62 0.92619\\n807 362 0.2\\n808 805 0.25\\n808 806 0.25\\n808 807 0.25\\n808 62 0.25\\n810 809 1\\n813 812 1\\n815 814 0.5\\n816 814 0.5\\n816 815 0.5\\n818 817 1\\n820 819 1\\n822 821 0.333333\\n823 821 0.333333\\n823 822 0.333333\\n824 821 0.333333\\n824 822 0.333333\\n824 823 0.333333\\n826 825 0.111111\\n827 825 0.111111\\n827 826 0.111111\\n828 825 0.111111\\n828 826 0.111111\\n828 827 0.111111\\n829 825 0.111111\\n829 826 0.111111\\n829 827 0.111111\\n829 828 0.111111\\n830 825 0.111111\\n830 826 0.111111\\n830 827 0.111111\\n830 828 0.111111\\n830 829 0.111111\\n831 825 0.111111\\n831 826 0.111111\\n831 827 0.111111\\n831 828 0.111111\\n831 829 0.111111\\n831 830 0.111111\\n832 825 0.111111\\n832 826 0.111111\\n832 827 0.111111\\n832 828 0.111111\\n832 829 0.111111\\n832 830 0.111111\\n832 831 0.111111\\n833 825 0.111111\\n833 826 0.111111\\n833 827 0.111111\\n833 828 0.111111\\n833 829 0.111111\\n833 830 0.111111\\n833 831 0.111111\\n833 832 0.111111\\n834 825 0.111111\\n834 826 0.111111\\n834 827 0.111111\\n834 828 0.111111\\n834 829 0.111111\\n834 830 0.111111\\n834 831 0.111111\\n834 832 0.111111\\n834 833 0.111111\\n836 835 0.5\\n837 835 0.5\\n837 836 0.5\\n839 34 0.333333\\n839 33 0.333333\\n839 54 0.333333\\n840 34 0.45\\n840 30 0.25\\n840 54 0.45\\n840 33 0.45\\n842 841 1.5\\n843 841 0.5\\n843 842 0.5\\n845 844 0.333333\\n846 844 0.333333\\n846 845 0.333333\\n847 844 0.333333\\n847 845 0.333333\\n847 846 0.333333\\n849 848 1\\n851 850 0.5\\n852 850 0.5\\n852 851 0.5\\n853 646 0.5\\n853 78 0.5\\n856 855 0.5\\n857 855 0.5\\n857 856 0.5\\n859 106 1\\n860 294 0.2\\n861 860 0.5\\n862 860 0.5\\n862 861 0.5\\n863 654 0.5\\n864 863 0.5\\n864 654 0.5\\n865 654 0.5\\n865 34 0.5\\n866 371 0.5\\n867 866 0.5\\n867 371 0.5\\n871 870 0.25\\n872 870 0.25\\n872 871 0.25\\n873 870 0.25\\n873 871 0.25\\n873 872 0.25\\n874 870 0.25\\n874 871 0.25\\n874 872 0.25\\n874 873 0.25\\n878 877 0.25\\n879 877 0.25\\n879 878 0.25\\n880 877 0.25\\n880 878 0.25\\n880 879 0.25\\n881 877 0.25\\n881 878 0.25\\n881 879 0.25\\n881 880 0.25\\n884 883 0.5\\n885 883 0.5\\n885 884 0.5\\n887 886 1\\n889 888 0.5\\n890 888 0.5\\n890 889 0.5\\n892 761 0.2\\n892 764 0.2\\n892 756 0.2\\n892 765 0.2\\n892 775 0.2\\n893 652 0.333333\\n893 654 0.666667\\n893 655 0.333333\\n893 55 0.333333\\n893 56 0.333333\\n894 402 0.333333\\n894 30 0.333333\\n894 327 0.333333\\n896 895 0.25\\n897 895 0.25\\n897 896 0.25\\n898 895 0.25\\n898 896 0.25\\n898 897 0.25\\n899 895 0.25\\n899 896 0.25\\n899 897 0.25\\n899 898 0.25\\n901 900 0.5\\n902 900 0.5\\n902 901 0.5\\n904 903 0.5\\n905 903 0.5\\n905 904 0.5\\n907 906 1\\n908 307 0.25\\n908 265 0.25\\n908 266 0.25\\n908 268 0.25\\n910 909 0.5\\n911 909 0.5\\n911 910 0.5\\n913 912 0.2\\n914 912 0.2\\n914 913 0.342857\\n915 912 0.2\\n915 913 0.342857\\n915 914 0.342857\\n916 912 0.2\\n916 913 0.985714\\n916 914 0.342857\\n916 915 0.342857\\n917 912 0.2\\n917 913 0.2\\n917 914 0.2\\n917 915 0.2\\n917 916 0.2\\n918 171 1\\n921 920 1\\n922 415 1\\n924 923 0.5\\n925 923 0.5\\n925 924 0.5\\n926 177 1\\n927 243 1.25\\n930 929 1\\n931 742 0.7\\n931 293 0.4\\n931 743 0.2\\n931 294 0.4\\n932 931 1.9\\n932 742 0.7\\n932 293 0.4\\n932 743 0.2\\n932 294 0.4\\n933 931 1\\n934 55 0.5\\n934 56 0.5\\n935 117 0.25\\n936 935 0.25\\n936 117 0.25\\n937 935 0.25\\n937 936 0.25\\n937 117 0.25\\n938 935 0.25\\n938 936 0.25\\n938 937 0.25\\n938 117 0.25\\n940 478 1\\n942 941 0.5\\n943 941 0.5\\n943 942 0.5\\n944 263 0.2\\n944 265 0.2\\n944 266 0.2\\n944 268 0.2\\n945 263 0.2\\n945 265 0.2\\n945 266 0.2\\n945 944 0.2\\n945 268 0.2\\n946 1 1\\n948 947 1\\n950 949 1\\n952 951 1.16667\\n953 951 1.16667\\n953 952 1.16667\\n954 951 0.666667\\n954 953 0.666667\\n954 952 0.666667\\n955 194 0.5\\n956 955 0.5\\n956 194 1.08333\\n958 957 0.5\\n959 957 0.5\\n959 958 0.5\\n961 960 0.5\\n962 960 0.5\\n962 961 0.5\\n963 517 0.333333\\n963 151 0.333333\\n964 963 0.333333\\n964 517 0.333333\\n964 151 0.333333\\n966 965 0.2\\n967 965 0.2\\n967 966 0.2\\n968 965 0.2\\n968 966 0.2\\n968 967 0.2\\n969 965 0.2\\n969 966 0.2\\n969 967 0.2\\n969 968 0.2\\n970 965 0.2\\n970 966 0.2\\n970 967 0.2\\n970 968 0.2\\n970 969 0.2\\n973 972 1\\n973 300 1\\n975 974 0.5\\n976 974 0.5\\n976 975 0.5\\n976 88 1\\n977 758 0.25\\n977 757 0.25\\n977 69 0.25\\n977 72 0.25\\n979 978 1\\n981 980 0.5\\n982 980 0.5\\n982 981 0.5\\n984 983 1\\n984 473 2.16667\\n984 472 0.333333\\n985 983 0.5\\n985 984 0.833333\\n985 473 0.333333\\n986 983 0.5\\n986 984 0.5\\n988 987 1\\n989 973 1\\n991 88 2\\n993 992 1\\n995 994 0.25\\n996 994 0.25\\n996 995 0.25\\n997 994 0.25\\n997 995 0.25\\n997 996 0.25\\n998 994 0.25\\n998 995 0.25\\n998 996 0.25\\n998 997 0.25\\n1000 999 1\\n1000 913 0.142857\\n1000 916 0.142857\\n1000 255 0.5\\n1000 254 0.5\\n1002 973 0.833333\\n1003 1002 0.833333\\n1003 973 0.833333\\n1004 1002 0.333333\\n1004 1003 0.333333\\n1004 973 0.333333\\n1005 78 1\\n1007 1006 1\\n1008 51 0.5\\n1008 33 0.5\\n1010 1009 1\\n1012 1011 1\\n1014 1013 1\\n1016 62 1.33333\\n1016 806 0.333333\\n1018 1017 1.2\\n1021 127 0.25\\n1021 128 0.75\\n1022 127 0.25\\n1022 128 0.25\\n1022 1021 0.25\\n1023 127 0.25\\n1023 128 1.75\\n1023 1021 0.75\\n1023 1022 0.25\\n1024 53 0.5\\n1025 1024 0.5\\n1025 53 0.5\\n1026 303 0.333333\\n1027 1026 1\\n1028 746 0.333333\\n1028 294 0.333333\\n1029 1028 0.333333\\n1029 746 0.333333\\n1029 294 0.333333\\n1030 550 0.5\\n1030 121 0.5\\n1032 1031 1\\n1034 1033 1\\n1036 1035 1\\n1037 1035 0.5\\n1038 1035 0.5\\n1038 1037 0.5\\n1039 308 0.5\\n1040 1039 0.5\\n1040 308 1.5\\n1041 224 0.333333\\n1041 218 0.333333\\n1041 216 0.333333\\n1043 1042 0.5\\n1044 1042 0.5\\n1044 1043 0.5\\n1045 1010 1\\n1046 482 1\\n1047 12 0.25\\n1048 1047 0.25\\n1048 12 0.25\\n1049 1047 0.25\\n1049 1048 0.25\\n1049 12 0.25\\n1050 1047 0.25\\n1050 1048 0.25\\n1050 1049 0.25\\n1050 12 0.25\\n1053 1052 1\\n1055 1054 1\\n1056 1054 0.333333\\n1057 1054 0.333333\\n1057 1056 0.333333\\n1058 1054 0.333333\\n1058 1056 0.333333\\n1058 1057 0.333333\\n1061 1060 0.111111\\n1062 1060 0.111111\\n1062 1061 0.111111\\n1063 1060 0.111111\\n1063 1061 0.111111\\n1063 1062 0.111111\\n1064 1060 0.111111\\n1064 1061 0.111111\\n1064 1062 0.111111\\n1064 1063 0.111111\\n1065 1060 0.111111\\n1065 1061 0.111111\\n1065 1062 0.111111\\n1065 1063 0.111111\\n1065 1064 0.111111\\n1066 1060 0.111111\\n1066 1061 0.111111\\n1066 1062 0.111111\\n1066 1063 0.111111\\n1066 1064 0.111111\\n1066 1065 0.111111\\n1067 1060 0.111111\\n1067 1061 0.111111\\n1067 1062 0.111111\\n1067 1063 0.111111\\n1067 1064 0.111111\\n1067 1065 0.111111\\n1067 1066 0.111111\\n1068 1060 0.111111\\n1068 1061 0.111111\\n1068 1062 0.111111\\n1068 1063 0.111111\\n1068 1064 0.111111\\n1068 1065 0.111111\\n1068 1066 0.111111\\n1068 1067 0.111111\\n1069 1060 0.111111\\n1069 1061 0.111111\\n1069 1062 0.111111\\n1069 1063 0.111111\\n1069 1064 0.111111\\n1069 1065 0.111111\\n1069 1066 0.111111\\n1069 1067 0.111111\\n1069 1068 0.111111\\n1070 806 0.142857\\n1070 805 0.142857\\n1070 807 0.142857\\n1070 62 0.142857\\n1071 806 0.67619\\n1071 805 0.342857\\n1071 807 0.342857\\n1071 1070 0.142857\\n1071 62 0.67619\\n1071 362 0.2\\n1071 1016 0.333333\\n1072 806 0.142857\\n1072 805 0.142857\\n1072 807 0.142857\\n1072 1070 0.142857\\n1072 1071 0.142857\\n1072 62 0.142857\\n1073 806 0.142857\\n1073 805 0.142857\\n1073 807 0.142857\\n1073 1070 0.142857\\n1073 1071 0.142857\\n1073 1072 0.142857\\n1073 62 0.142857\\n1074 227 1\\n1079 1078 1\\n1081 281 2\\n1082 69 0.5\\n1083 1082 0.5\\n1083 69 0.5\\n1084 0 0.5\\n1084 1 0.5\\n1086 516 0.5\\n1087 516 2.5\\n1087 1086 0.5\\n1088 516 1\\n1088 1087 0.5\\n1088 151 0.5\\n1089 516 0.5\\n1089 1087 0.5\\n1091 473 0.333333\\n1091 472 0.333333\\n1091 984 0.333333\\n1092 473 0.833333\\n1092 984 0.833333\\n1092 985 0.333333\\n1094 1093 0.333333\\n1095 1093 0.333333\\n1095 1094 0.333333\\n1096 1093 0.333333\\n1096 1094 0.333333\\n1096 1095 0.333333\\n1098 1097 0.5\\n1099 1097 0.5\\n1099 1098 0.5\\n1102 1101 0.5\\n1103 1101 0.5\\n1103 1102 0.5\\n1106 1105 0.125\\n1107 1105 0.125\\n1107 1106 0.125\\n1108 1105 0.125\\n1108 1106 0.125\\n1108 1107 0.125\\n1109 1105 0.125\\n1109 1106 0.125\\n1109 1107 0.125\\n1109 1108 0.125\\n1110 1105 0.125\\n1110 1106 0.125\\n1110 1107 0.125\\n1110 1108 0.125\\n1110 1109 0.125\\n1111 1105 0.125\\n1111 1106 0.125\\n1111 1107 0.125\\n1111 1108 0.125\\n1111 1109 0.125\\n1111 1110 0.125\\n1112 1105 0.125\\n1112 1106 0.125\\n1112 1107 0.125\\n1112 1108 0.125\\n1112 1109 0.125\\n1112 1110 0.125\\n1112 1111 0.125\\n1113 1105 0.125\\n1113 1106 0.125\\n1113 1107 0.125\\n1113 1108 0.125\\n1113 1109 0.125\\n1113 1110 0.125\\n1113 1111 0.125\\n1113 1112 0.125\\n1115 1114 1\\n1117 1116 0.25\\n1118 1116 0.25\\n1118 1117 0.25\\n1119 1116 0.25\\n1119 1117 0.25\\n1119 1118 0.25\\n1120 1116 0.25\\n1120 1117 0.25\\n1120 1118 0.25\\n1120 1119 0.25\\n1121 78 0.5\\n1122 78 0.5\\n1122 1121 0.5\\n1123 78 0.5\\n1123 756 0.5\\n1124 247 0.333333\\n1124 415 0.333333\\n1125 1124 0.333333\\n1125 247 0.333333\\n1125 415 0.333333\\n1128 1127 1\\n1129 976 1\\n1130 657 0.333333\\n1130 774 0.333333\\n1130 654 0.833333\\n1130 34 0.5\\n1132 1131 1\\n1134 1133 1\\n1135 956 0.583333\\n1135 194 0.583333\\n1136 1135 0.25\\n1136 956 0.25\\n1136 194 0.25\\n1137 1135 0.25\\n1137 1136 0.25\\n1137 956 0.25\\n1137 194 0.25\\n1138 1135 0.333333\\n1138 194 0.333333\\n1138 956 0.333333\\n1140 1139 1\\n1142 1141 1\\n1145 221 0.333333\\n1145 343 1.47619\\n1145 219 2.14286\\n1145 697 0.142857\\n1147 1146 0.25\\n1148 1146 0.25\\n1148 1147 0.25\\n1149 1146 0.25\\n1149 1147 0.25\\n1149 1148 0.25\\n1150 1146 0.25\\n1150 1147 0.25\\n1150 1148 0.25\\n1150 1149 0.25\\n1153 1152 0.125\\n1154 1152 0.125\\n1154 1153 0.125\\n1155 1152 0.125\\n1155 1153 0.125\\n1155 1154 0.125\\n1156 1152 0.125\\n1156 1153 0.125\\n1156 1154 0.125\\n1156 1155 0.125\\n1157 1152 0.125\\n1157 1153 0.125\\n1157 1154 0.125\\n1157 1155 0.125\\n1157 1156 0.125\\n1158 1152 0.125\\n1158 1153 0.125\\n1158 1154 0.125\\n1158 1155 0.125\\n1158 1156 0.125\\n1158 1157 0.125\\n1159 1152 0.125\\n1159 1153 0.125\\n1159 1154 0.125\\n1159 1155 0.125\\n1159 1156 0.125\\n1159 1157 0.125\\n1159 1158 0.125\\n1160 1152 0.125\\n1160 1153 0.125\\n1160 1154 0.125\\n1160 1155 0.125\\n1160 1156 0.125\\n1160 1157 0.125\\n1160 1158 0.125\\n1160 1159 0.125\\n1162 114 0.5\\n1162 186 1.25\\n1163 114 0.5\\n1163 1162 0.5\\n1165 1164 1\\n1166 259 0.333333\\n1166 258 0.333333\\n1167 259 0.333333\\n1167 258 0.333333\\n1167 1166 0.333333\\n1169 1168 1\\n1170 820 1\\n1172 78 1\\n1175 931 0.5\\n1176 1175 0.5\\n1176 931 0.5\\n1177 150 0.5\\n1177 96 0.5\\n1178 150 0.833333\\n1178 281 0.833333\\n1180 589 0.25\\n1180 590 0.25\\n1180 591 0.25\\n1181 1180 0.25\\n1181 589 0.25\\n1181 590 0.25\\n1181 591 0.25\\n1182 302 1\\n1185 1184 0.5\\n1186 1184 0.5\\n1186 1185 0.5\\n1189 327 0.5\\n1189 328 0.5\\n1190 54 0.2\\n1190 34 0.2\\n1190 840 0.2\\n1190 33 0.2\\n1191 1190 0.2\\n1191 54 0.2\\n1191 34 0.2\\n1191 840 0.2\\n1191 33 0.2\\n1194 1193 1\\n1195 78 0.333333\\n1196 1195 0.333333\\n1196 78 0.333333\\n1197 1195 0.333333\\n1197 1196 0.333333\\n1197 78 0.333333\\n1199 1198 0.5\\n1200 1198 0.5\\n1200 1199 0.5\\n1201 913 0.785714\\n1201 916 1.11905\\n1201 1000 0.142857\\n1201 914 0.142857\\n1201 915 0.142857\\n1202 913 0.142857\\n1202 916 0.142857\\n1202 1201 0.142857\\n1202 1000 0.142857\\n1203 913 0.142857\\n1203 916 0.142857\\n1203 1201 0.142857\\n1203 1202 0.142857\\n1203 1000 0.142857\\n1204 913 0.142857\\n1204 916 0.142857\\n1204 1201 0.142857\\n1204 1202 0.142857\\n1204 1203 0.142857\\n1204 1000 0.142857\\n1205 913 0.142857\\n1205 916 0.142857\\n1205 1201 0.142857\\n1205 1202 0.142857\\n1205 1203 0.142857\\n1205 1204 0.142857\\n1205 1000 0.142857\\n1206 913 0.142857\\n1206 916 0.142857\\n1206 1201 0.142857\\n1206 914 0.142857\\n1206 915 0.142857\\n1207 913 0.142857\\n1207 1206 0.142857\\n1207 916 0.142857\\n1207 1201 0.142857\\n1207 914 0.142857\\n1207 915 0.142857\\n1208 913 0.142857\\n1208 1206 0.142857\\n1208 916 0.142857\\n1208 1201 0.142857\\n1208 914 0.142857\\n1208 1207 0.142857\\n1208 915 0.142857\\n1210 1209 0.333333\\n1211 1209 0.333333\\n1211 1210 0.333333\\n1212 1209 0.333333\\n1212 1210 0.333333\\n1212 1211 0.333333\\n1214 330 0.25\\n1215 1214 0.25\\n1215 330 0.25\\n1216 1214 0.25\\n1216 330 0.25\\n1216 1215 0.25\\n1217 1214 0.25\\n1217 330 0.25\\n1217 1215 0.25\\n1217 1216 0.25\\n1219 1218 1\\n1221 500 0.5\\n1221 150 0.5\\n1223 1222 0.5\\n1224 1222 0.5\\n1224 1223 0.5\\n1226 1225 1\\n1227 1225 1\\n1228 132 0.25\\n1228 54 0.25\\n1228 33 0.25\\n1229 132 0.25\\n1229 1228 0.25\\n1229 54 0.25\\n1229 33 0.25\\n1230 244 1\\n1232 1231 1\\n1233 415 0.5\\n1234 1233 0.5\\n1234 415 0.5\\n1235 481 0.5\\n1236 1235 0.5\\n1236 481 0.5\\n1238 1237 1\\n1239 547 1\\n1241 1240 1\\n1243 1242 1\\n1244 482 0.25\\n1245 1244 0.25\\n1245 482 0.25\\n1246 1244 0.25\\n1246 1245 0.25\\n1246 482 0.25\\n1247 1244 0.25\\n1247 1245 0.25\\n1247 1246 0.25\\n1247 482 0.25\\n1249 1248 1\\n1250 481 0.5\\n1251 1250 0.5\\n1251 481 0.5\\n1253 1252 0.5\\n1254 1252 1.5\\n1254 1253 0.5\\n1255 764 0.833333\\n1255 765 0.333333\\n1255 121 0.833333\\n1256 1201 0.333333\\n1256 916 0.333333\\n1257 1201 0.333333\\n1257 1256 0.333333\\n1257 916 0.333333\\n1259 1258 1\\n1261 1260 0.5\\n1262 1260 0.5\\n1262 1261 0.5\\n1263 375 0.333333\\n1263 376 0.333333\\n1263 377 0.333333\\n1265 1264 0.333333\\n1266 1264 0.333333\\n1266 1265 0.333333\\n1267 1264 0.333333\\n1267 1265 0.333333\\n1267 1266 0.333333\\n1268 872 1\\n1270 320 0.5\\n1270 321 0.5\\n1271 947 0.5\\n1272 1271 0.5\\n1272 947 0.5\\n1273 843 0.75\\n1274 1273 0.75\\n1274 843 0.75\\n1275 1273 0.25\\n1275 1274 0.25\\n1275 843 0.25\\n1276 1273 0.25\\n1276 1274 0.25\\n1276 843 0.25\\n1276 1275 0.25\\n1278 744 0.7\\n1278 294 0.7\\n1278 743 0.2\\n1278 742 0.2\\n1278 293 0.2\\n1279 744 0.333333\\n1280 744 0.333333\\n1280 1279 0.333333\\n1281 744 0.333333\\n1281 1279 0.333333\\n1281 1280 0.333333\\n1282 1145 0.333333\\n1282 219 0.333333\\n1283 1282 0.333333\\n1283 1145 0.333333\\n1283 219 0.333333\\n1287 1286 0.25\\n1288 1286 0.25\\n1288 1287 0.25\\n1289 1286 0.25\\n1289 1287 0.25\\n1289 1288 0.25\\n1290 1286 0.25\\n1290 1287 0.25\\n1290 1288 0.25\\n1290 1289 0.25\\n1293 1292 0.5\\n1294 1292 0.5\\n1294 1293 0.5\\n1295 375 0.25\\n1295 376 0.25\\n1295 33 0.25\\n1295 377 0.25\\n1299 1298 1\\n1303 1018 0.5\\n1304 1018 0.5\\n1304 1303 0.5\\n1305 1018 1\\n1306 1018 0.2\\n1306 1017 0.2\\n1307 1018 0.2\\n1307 1306 0.2\\n1307 1017 0.2\\n1308 1018 0.2\\n1308 1306 0.2\\n1308 1307 0.2\\n1308 1017 0.2\\n1309 1018 0.2\\n1309 1306 0.2\\n1309 1307 0.2\\n1309 1308 0.2\\n1309 1017 0.2\\n1311 1310 1\\n1313 1312 0.25\\n1314 1312 0.25\\n1314 1313 0.25\\n1315 1312 0.25\\n1315 1313 0.25\\n1315 1314 0.25\\n1315 53 0.25\\n1316 1312 0.25\\n1316 1313 0.25\\n1316 1314 0.25\\n1316 1315 0.25\\n1318 900 1\\n1321 1320 1\\n1322 524 1\\n1324 1323 0.5\\n1325 1323 0.5\\n1325 1324 0.5\\n1327 1326 1\\n1329 1328 1\\n1332 1331 0.5\\n1333 1331 0.5\\n1333 1332 0.5\\n1336 1335 0.333333\\n1337 1335 0.333333\\n1337 1336 0.333333\\n1338 1335 0.333333\\n1338 1336 0.333333\\n1338 1337 0.333333\\n1339 882 1\\n1341 517 1\\n1342 281 0.333333\\n1342 150 0.333333\\n1342 1178 0.333333\\n1343 281 0.5\\n1344 281 0.5\\n1344 1343 0.5\\n1345 1225 1\\n1346 721 1\\n1347 377 0.5\\n1348 1347 0.5\\n1348 377 0.5\\n1349 362 0.25\\n1350 1349 0.25\\n1350 362 0.25\\n1351 1349 0.25\\n1351 1350 0.25\\n1351 362 0.25\\n1352 1349 0.25\\n1352 1350 0.25\\n1352 1351 0.25\\n1352 362 0.25\\n1355 1354 1\\n1356 523 0.333333\\n1356 746 0.333333\\n1356 742 0.333333\\n1356 931 1\\n1357 1356 1\\n1357 1107 0.333333\\n1358 1356 1\\n1358 1357 2.33333\\n1358 1107 0.333333\\n1359 1356 1\\n1361 46 1.33333\\n1361 428 0.333333\\n1362 46 0.333333\\n1362 1361 0.333333\\n1362 428 0.333333\\n1363 46 1\\n1364 1286 0.25\\n1365 1364 0.25\\n1365 1286 0.25\\n1366 1364 0.25\\n1366 1365 0.25\\n1366 1286 0.25\\n1367 1364 0.25\\n1367 1365 0.25\\n1367 1366 0.25\\n1367 1286 0.25\\n1368 932 0.2\\n1368 293 0.2\\n1368 294 0.2\\n1368 931 0.2\\n1369 932 0.2\\n1369 1368 0.2\\n1369 293 0.2\\n1369 294 0.2\\n1369 931 0.2\\n1371 1370 1\\n1373 1372 1\\n1375 1374 0.5\\n1376 1374 0.5\\n1376 1375 0.5\\n1377 1294 0.5\\n1378 1377 0.5\\n1378 1294 0.5\\n1381 522 0.5\\n1381 76 0.5\\n1384 194 0.5\\n1385 1384 0.5\\n1385 194 0.5\\n1387 1386 1\\n1389 329 1.5\\n1389 547 0.5\\n1391 1390 0.5\\n1392 1390 0.5\\n1392 1391 0.5\\n1394 1145 0.142857\\n1394 219 0.142857\\n1394 343 0.142857\\n1394 697 0.142857\\n1395 1394 0.142857\\n1395 1145 0.142857\\n1395 219 0.142857\\n1395 343 0.142857\\n1395 697 0.142857\\n1396 1394 0.142857\\n1396 1145 0.142857\\n1396 1395 0.142857\\n1396 219 0.142857\\n1396 343 0.142857\\n1396 697 0.142857\\n1397 1394 0.142857\\n1397 1145 0.142857\\n1397 1395 0.142857\\n1397 219 0.142857\\n1397 343 0.142857\\n1397 1396 0.142857\\n1397 697 0.142857\\n1398 314 1\\n1400 1399 0.25\\n1401 1399 0.25\\n1401 1400 0.25\\n1402 1399 0.25\\n1402 1400 0.25\\n1402 1401 0.25\\n1403 1399 0.25\\n1403 1400 0.25\\n1403 1401 0.25\\n1403 1402 0.25\\n1404 327 0.166667\\n1404 416 0.166667\\n1405 1404 0.166667\\n1405 327 0.166667\\n1405 416 0.166667\\n1406 1404 0.166667\\n1406 1405 0.166667\\n1406 327 0.166667\\n1406 416 0.166667\\n1407 1404 0.166667\\n1407 1405 0.166667\\n1407 327 0.166667\\n1407 1406 0.166667\\n1407 416 0.166667\\n1408 1404 0.166667\\n1408 1405 0.166667\\n1408 327 0.166667\\n1408 1406 0.166667\\n1408 416 0.166667\\n1408 1407 0.166667\\n1409 496 0.5\\n1410 1409 0.5\\n1410 496 0.5\\n1411 1357 0.333333\\n1411 1107 0.333333\\n1411 1358 0.333333\\n1412 1060 1\\n1413 186 0.25\\n1413 1162 0.25\\n1414 186 0.25\\n1414 1413 0.25\\n1414 1162 0.25\\n1415 186 0.25\\n1415 1413 0.25\\n1415 1162 0.25\\n1415 1414 0.25\\n1416 303 0.333333\\n1416 1026 0.333333\\n1417 1416 0.333333\\n1417 303 0.333333\\n1417 1026 0.333333\\n1418 930 1\\n1419 1336 1\\n1421 1420 0.333333\\n1422 1420 0.333333\\n1422 1421 0.333333\\n1423 1420 0.333333\\n1423 1421 0.333333\\n1423 1422 0.333333\\n1424 9 0.5\\n1425 1424 0.5\\n1425 9 1.5\\n1427 1426 0.5\\n1428 1426 0.5\\n1428 1427 0.5\\n1429 645 0.0526316\\n1430 1429 0.385965\\n1430 645 0.0526316\\n1431 1429 0.385965\\n1431 645 0.0526316\\n1431 1430 0.385965\\n1432 1429 0.0526316\\n1432 645 0.0526316\\n1432 1430 0.0526316\\n1432 1431 0.0526316\\n1433 1429 0.0526316\\n1433 645 0.0526316\\n1433 1430 0.0526316\\n1433 1431 0.0526316\\n1433 1432 0.0526316\\n1434 1429 0.0526316\\n1434 645 0.0526316\\n1434 1430 0.0526316\\n1434 1431 0.0526316\\n1434 1432 0.0526316\\n1434 1433 0.0526316\\n1435 1429 0.0526316\\n1435 645 0.0526316\\n1435 1430 0.0526316\\n1435 1431 0.0526316\\n1435 1432 0.0526316\\n1435 1433 0.0526316\\n1435 1434 0.0526316\\n1436 1429 0.0526316\\n1436 645 0.0526316\\n1436 1430 0.0526316\\n1436 1431 0.0526316\\n1436 1432 0.0526316\\n1436 1433 0.0526316\\n1436 1434 0.0526316\\n1436 1435 0.0526316\\n1437 1429 0.0526316\\n1437 645 0.0526316\\n1437 1430 0.0526316\\n1437 1431 0.0526316\\n1437 1432 0.0526316\\n1437 1433 0.0526316\\n1437 1434 0.0526316\\n1437 1435 0.0526316\\n1437 1436 0.0526316\\n1438 1429 0.0526316\\n1438 645 0.0526316\\n1438 1430 0.0526316\\n1438 1431 0.0526316\\n1438 1432 0.0526316\\n1438 1433 0.0526316\\n1438 1434 0.0526316\\n1438 1435 0.0526316\\n1438 1436 0.0526316\\n1438 1437 0.0526316\\n1439 1429 0.0526316\\n1439 645 0.0526316\\n1439 1430 0.0526316\\n1439 1431 0.0526316\\n1439 1432 0.0526316\\n1439 1433 0.0526316\\n1439 1434 0.0526316\\n1439 1435 0.0526316\\n1439 1436 0.0526316\\n1439 1437 0.0526316\\n1439 1438 0.0526316\\n1440 1429 0.0526316\\n1440 645 0.0526316\\n1440 1430 0.0526316\\n1440 1431 0.0526316\\n1440 1432 0.0526316\\n1440 1433 0.0526316\\n1440 1434 0.0526316\\n1440 1435 0.0526316\\n1440 1436 0.0526316\\n1440 1437 0.0526316\\n1440 1438 0.0526316\\n1440 1439 0.0526316\\n1441 1429 0.0526316\\n1441 645 0.0526316\\n1441 1430 0.0526316\\n1441 1431 0.0526316\\n1441 1432 0.0526316\\n1441 1433 0.0526316\\n1441 1434 0.0526316\\n1441 1435 0.0526316\\n1441 1436 0.0526316\\n1441 1437 0.0526316\\n1441 1438 0.0526316\\n1441 1439 0.0526316\\n1441 1440 0.0526316\\n1442 1429 0.0526316\\n1442 645 0.0526316\\n1442 1430 0.0526316\\n1442 1431 0.0526316\\n1442 1432 0.0526316\\n1442 1433 0.0526316\\n1442 1434 0.0526316\\n1442 1435 0.0526316\\n1442 1436 0.0526316\\n1442 1437 0.0526316\\n1442 1438 0.0526316\\n1442 1439 0.0526316\\n1442 1440 0.0526316\\n1442 1441 0.0526316\\n1443 1429 0.0526316\\n1443 645 0.0526316\\n1443 1430 0.0526316\\n1443 1431 0.0526316\\n1443 1432 0.0526316\\n1443 1433 0.0526316\\n1443 1434 0.0526316\\n1443 1435 0.0526316\\n1443 1436 0.0526316\\n1443 1437 0.0526316\\n1443 1438 0.0526316\\n1443 1439 0.0526316\\n1443 1440 0.0526316\\n1443 1441 0.0526316\\n1443 1442 0.0526316\\n1444 1429 0.0526316\\n1444 645 0.0526316\\n1444 1430 0.0526316\\n1444 1431 0.0526316\\n1444 1432 0.0526316\\n1444 1433 0.0526316\\n1444 1434 0.0526316\\n1444 1435 0.0526316\\n1444 1436 0.0526316\\n1444 1437 0.0526316\\n1444 1438 0.0526316\\n1444 1439 0.0526316\\n1444 1440 0.0526316\\n1444 1441 0.0526316\\n1444 1442 0.0526316\\n1444 1443 0.0526316\\n1445 1429 0.0526316\\n1445 645 0.0526316\\n1445 1430 0.0526316\\n1445 1431 0.0526316\\n1445 1432 0.0526316\\n1445 1433 0.0526316\\n1445 1434 0.0526316\\n1445 1435 0.0526316\\n1445 1436 0.0526316\\n1445 1437 0.0526316\\n1445 1438 0.0526316\\n1445 1439 0.0526316\\n1445 1440 0.0526316\\n1445 1441 0.0526316\\n1445 1442 0.0526316\\n1445 1443 0.0526316\\n1445 1444 0.0526316\\n1446 1429 0.0526316\\n1446 645 0.0526316\\n1446 1430 0.0526316\\n1446 1431 0.0526316\\n1446 1432 0.0526316\\n1446 1433 0.0526316\\n1446 1434 0.0526316\\n1446 1435 0.0526316\\n1446 1436 0.0526316\\n1446 1437 0.0526316\\n1446 1438 0.0526316\\n1446 1439 0.0526316\\n1446 1440 0.0526316\\n1446 1441 0.0526316\\n1446 1442 0.0526316\\n1446 1443 0.0526316\\n1446 1444 0.0526316\\n1446 1445 0.0526316\\n1447 1429 0.0526316\\n1447 645 0.0526316\\n1447 1430 0.0526316\\n1447 1431 0.0526316\\n1447 1432 0.0526316\\n1447 1433 0.0526316\\n1447 1434 0.0526316\\n1447 1435 0.0526316\\n1447 1436 0.0526316\\n1447 1437 0.0526316\\n1447 1438 0.0526316\\n1447 1439 0.0526316\\n1447 1440 0.0526316\\n1447 1441 0.0526316\\n1447 1442 0.0526316\\n1447 1443 0.0526316\\n1447 1444 0.0526316\\n1447 1445 0.0526316\\n1447 1446 0.0526316\\n1448 1429 0.333333\\n1448 1430 0.333333\\n1448 1431 0.333333\\n1450 1449 1\\n1451 283 0.5\\n1451 281 0.5\\n1452 216 1\\n1453 1360 1\\n1454 721 1\\n1455 482 1\\n1457 1456 0.333333\\n1458 1456 0.333333\\n1458 1457 0.333333\\n1459 1456 0.333333\\n1459 1457 0.333333\\n1459 1458 0.333333\\n1460 517 0.333333\\n1460 127 0.333333\\n1460 151 0.333333\\n1461 55 0.5\\n1461 56 0.5\\n1464 860 0.2\\n1464 294 0.2\\n1465 1464 0.2\\n1465 860 0.2\\n1465 294 0.2\\n1466 1464 0.2\\n1466 1465 0.2\\n1466 860 0.2\\n1466 294 0.2\\n1467 1464 0.2\\n1467 1465 0.2\\n1467 860 0.2\\n1467 1466 0.2\\n1467 294 0.2\\n1468 53 0.25\\n1468 1315 0.25\\n1469 53 0.25\\n1469 1468 0.25\\n1469 1315 0.25\\n1470 53 0.25\\n1470 1468 0.25\\n1470 1315 0.25\\n1470 1469 0.25\\n1472 1471 0.5\\n1473 1471 0.5\\n1473 1472 0.5\\n1475 1474 0.5\\n1476 1474 0.5\\n1476 1475 0.5\\n1477 207 0.5\\n1478 1477 0.5\\n1478 207 0.5\\n1480 1479 1\\n1481 96 0.5\\n1482 1481 0.5\\n1482 96 0.5\\n1484 1483 0.5\\n1485 1483 0.5\\n1485 1484 0.5\\n1487 1486 1\\n1488 1142 0.5\\n1489 1488 0.5\\n1489 1142 0.5\\n1492 1491 1\\n1493 1491 0.25\\n1494 1493 1\\n1496 1495 1\\n1497 300 1\\n1498 82 1\\n1500 239 0.25\\n1501 1500 0.25\\n1501 239 0.25\\n1502 1500 0.25\\n1502 1501 0.25\\n1502 239 0.25\\n1503 1500 0.25\\n1503 1501 0.25\\n1503 239 0.25\\n1503 1502 0.25\\n1504 1000 0.5\\n1505 1504 0.2\\n1506 1504 0.2\\n1506 1505 0.2\\n1507 1504 0.2\\n1507 1505 0.2\\n1507 1506 0.2\\n1508 1504 0.2\\n1508 1505 0.2\\n1508 1506 0.2\\n1508 1507 0.2\\n1509 1504 0.2\\n1509 1505 0.2\\n1509 1506 0.2\\n1509 1507 0.2\\n1509 1508 0.2\\n1512 1511 0.5\\n1513 1511 0.5\\n1513 1512 0.5\\n1514 1000 0.5\\n1514 1504 0.5\\n1515 1120 0.333333\\n1516 1120 0.333333\\n1516 1515 0.333333\\n1517 1120 0.333333\\n1517 1515 0.333333\\n1517 1516 0.333333\\n1518 243 0.25\\n1518 927 0.25\\n1519 1518 0.25\\n1519 243 0.25\\n1519 927 0.25\\n1520 1518 0.25\\n1520 1519 0.25\\n1520 243 0.25\\n1520 927 0.25\\n1523 1522 1\\n1526 1525 1\\n1529 54 0.5\\n1529 33 0.5\\n1531 1530 1\\n1532 9 1\\n1533 532 0.2\\n1533 531 0.2\\n1533 530 0.2\\n1534 532 0.2\\n1534 1533 0.2\\n1534 531 0.2\\n1534 530 0.2\\n1535 532 0.2\\n1535 1533 0.2\\n1535 1534 0.2\\n1535 531 0.2\\n1535 530 0.2\\n1536 843 1\\n1538 1537 0.5\\n1539 1537 0.5\\n1539 1538 0.5\\n1540 1493 0.25\\n1540 1491 0.25\\n1541 1540 0.25\\n1541 1493 0.25\\n1541 1491 0.25\\n1542 1540 0.25\\n1542 1541 0.25\\n1542 1493 0.25\\n1542 1491 0.25\\n1544 1543 1\\n1546 1545 0.333333\\n1547 1545 0.333333\\n1547 1546 0.333333\\n1548 1545 0.333333\\n1548 1546 0.333333\\n1548 1547 0.333333\\n1549 308 1\\n1550 34 0.833333\\n1550 33 1.33333\\n1550 54 0.5\\n1551 1550 0.333333\\n1551 34 0.333333\\n1551 33 0.333333\\n1553 294 0.333333\\n1554 294 0.333333\\n1554 1553 0.333333\\n1555 294 0.333333\\n1555 1553 0.333333\\n1555 1554 0.333333\\n1556 676 0.333333\\n1557 1556 0.333333\\n1557 676 0.333333\\n1558 1556 0.333333\\n1558 676 0.333333\\n1558 1557 0.333333\\n1560 1145 0.333333\\n1560 219 0.333333\\n1561 1560 0.333333\\n1561 1145 0.333333\\n1561 219 0.333333\\n1562 63 0.142857\\n1562 62 0.142857\\n1563 1562 0.142857\\n1563 63 0.142857\\n1563 62 0.142857\\n1564 1562 0.142857\\n1564 1563 0.142857\\n1564 63 0.142857\\n1564 62 0.142857\\n1565 1562 0.142857\\n1565 1563 0.142857\\n1565 1564 0.142857\\n1565 63 0.142857\\n1565 62 0.142857\\n1566 1562 0.142857\\n1566 1563 0.142857\\n1566 1564 0.142857\\n1566 1565 0.142857\\n1566 63 0.142857\\n1566 62 0.142857\\n1567 1562 0.142857\\n1567 1563 0.142857\\n1567 1564 0.142857\\n1567 1565 0.142857\\n1567 1566 0.142857\\n1567 63 0.142857\\n1567 62 0.142857\\n1569 1568 1\\n1570 337 0.2\\n1570 631 0.2\\n1571 337 0.2\\n1571 631 0.2\\n1571 1570 0.2\\n1572 337 0.2\\n1572 631 0.2\\n1572 1570 0.2\\n1572 1571 0.2\\n1573 337 0.2\\n1573 631 0.2\\n1573 1570 0.2\\n1573 1571 0.2\\n1573 1572 0.2\\n1574 631 0.5\\n1574 783 0.5\\n1576 1575 0.333333\\n1577 1575 0.333333\\n1577 1576 0.333333\\n1578 1575 0.333333\\n1578 1576 0.333333\\n1578 1577 0.333333\\n1579 631 0.5\\n1579 630 0.5\\n1581 1580 1\\n1584 1583 1\\n1586 1585 1\\n1587 1585 1\\n1588 522 0.5\\n1588 76 0.5\";\n  var nodes = new Set();\n  var edges = [];\n  rawData.split('\\n').forEach(function (line) {\n    var d = line.split(' ');\n    var u = d[0];\n    var v = d[1];\n    var weight = parseFloat(d[2]);\n    nodes.add(u);\n    nodes.add(v);\n    edges.push({\n      source: \"\".concat(u),\n      target: \"\".concat(v),\n      value: weight\n    });\n  });\n  var data = {\n    nodes: Array.from(nodes).map(function (u) {\n      return {\n        id: \"\".concat(u),\n        label: \"\".concat(u)\n      };\n    }),\n    edges: edges\n  };\n  var kernel;\n\n  var App = /*#__PURE__*/_react.default.memo(function BellmanFord() {\n    var _useState = (0, _react.useState)(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        timeElapsed = _useState2[0],\n        setTimeElapsed = _useState2[1];\n\n    var _useState3 = (0, _react.useState)([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        datasource = _useState4[0],\n        setDatasource = _useState4[1]; // @see https://github.com/nblintao/ParaGraphL/blob/master/sigma.layout.paragraphl.js#L192-L229\n\n\n    var buildTextureData = function buildTextureData(nodes, edges, sourceNodeIdx) {\n      var dataArray = [];\n      var nodeDict = [];\n      var mapIdPos = {};\n      var i = 0;\n\n      for (i = 0; i < nodes.length; i++) {\n        var n = nodes[i];\n        mapIdPos[n.id] = i;\n\n        if (i === sourceNodeIdx) {\n          dataArray.push(0); // distance\n        } else {\n          dataArray.push(10000); // Infinity\n        }\n\n        dataArray.push(-1); // predecessor\n\n        dataArray.push(0); // offset\n\n        dataArray.push(0); // outputing edge length\n\n        nodeDict.push([]);\n      }\n\n      for (i = 0; i < edges.length; i++) {\n        var e = edges[i];\n        nodeDict[mapIdPos[e.source]].push({\n          target: mapIdPos[e.target],\n          weight: e.value\n        }); // lineIndexBufferData.push(mapIdPos[e.source], mapIdPos[e.target]);\n      }\n\n      var maxEdgePerVetex = 0;\n\n      for (i = 0; i < nodes.length; i++) {\n        var offset = dataArray.length;\n        var dests = nodeDict[i];\n        var len = dests.length;\n        dataArray[i * 4 + 2] = offset;\n        dataArray[i * 4 + 3] = dests.length;\n        maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n\n        for (var j = 0; j < len; ++j) {\n          var _dests$j = dests[j],\n              target = _dests$j.target,\n              weight = _dests$j.weight;\n          dataArray.push(+target); // dest vertex index\n\n          dataArray.push(+weight); // edge weight\n        }\n      }\n\n      while (dataArray.length % 4 !== 0) {\n        dataArray.push(0);\n      }\n\n      return [new Float32Array(dataArray), maxEdgePerVetex];\n    };\n\n    var calcShortestPath = async function calcShortestPath(source) {\n      var _buildTextureData = buildTextureData(data.nodes, data.edges, data.nodes.findIndex(function (n) {\n        return n.id === source;\n      })),\n          _buildTextureData2 = _slicedToArray(_buildTextureData, 2),\n          nodesEdgesArray = _buildTextureData2[0],\n          maxEdgePerVetex = _buildTextureData2[1];\n\n      if (kernel) {\n        var timeStart = window.performance.now();\n        await kernel.setBinding({\n          gData: nodesEdgesArray,\n          MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n          VERTEX_COUNT: data.nodes.length,\n          MAX_DISTANCE: 10000\n        }).execute();\n        var output = await kernel.getOutput();\n        setTimeElapsed(window.performance.now() - timeStart);\n        setDatasource(new Array(data.nodes.length).fill(0).map(function (_, i) {\n          var prevPoint = data.nodes[output[i * 4 + 1]];\n          var weight = output[i * 4];\n          return {\n            destination: data.nodes[i].id,\n            weight: weight === 10000 ? 'MAX' : weight,\n            prevPoint: prevPoint && prevPoint.id || '-'\n          };\n        }).filter(function (_ref) {\n          var weight = _ref.weight;\n          return weight !== 'MAX';\n        }));\n      }\n    };\n\n    (0, _react.useEffect)(function () {\n      (async function () {\n        // compile our kernel code\n        var compiler = new _gWebgpuCompiler.Compiler();\n        var precompiledBundle = compiler.compileBundle(gCode); // create world\n\n        var world = _gWebgpu.World.create({\n          engineOptions: {\n            supportCompute: true\n          }\n        });\n\n        var vertexNum = data.nodes.length;\n        kernel = await world.createKernel(precompiledBundle).setDispatch([Math.ceil(vertexNum / 16), 1, 1]).setMaxIteration(vertexNum - 1); // relax all edges |V|-1 times\n\n        await calcShortestPath('1');\n      })();\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      id: \"container\"\n    }), /*#__PURE__*/_react.default.createElement(\"div\", null, \"Directed Graph: \", nodes.size, \" nodes, \", edges.length, \" edges\"), /*#__PURE__*/_react.default.createElement(\"div\", null, \"Elapsed time: \", timeElapsed, \" ms\"), /*#__PURE__*/_react.default.createElement(\"div\", null, \"Shortest path from\", /*#__PURE__*/_react.default.createElement(_antd.Select, {\n      defaultValue: \"1\",\n      options: data.nodes.map(function (node) {\n        return {\n          value: node.id,\n          label: node.label\n        };\n      }),\n      onChange: calcShortestPath\n    })), /*#__PURE__*/_react.default.createElement(_antd.Table, {\n      rowKey: \"destination\",\n      columns: [{\n        dataIndex: 'destination',\n        title: 'destination'\n      }, {\n        dataIndex: 'weight',\n        title: 'weight'\n      }, {\n        dataIndex: 'prevPoint',\n        title: 'previous point'\n      }],\n      dataSource: datasource,\n      pagination: false\n    }));\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]}}},"staticQueryHashes":["3000541721","3000541721","653731124"]}