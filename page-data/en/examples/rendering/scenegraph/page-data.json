{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/rendering/scenegraph","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","examples":[{"slug":"gpgpu/basic","icon":"gallery","title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":"gallery","title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":"gallery","title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":"(function(history){\n        var pushState = history.pushState;\n        history.pushState = function(state) {\n          window.gwebgpuClean && window.gwebgpuClean();\n          return pushState.apply(history, arguments);\n        };\n      })(window.history);","playgroundWillUnmount":"window.gwebgpuClean && window.gwebgpuClean();","dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/interaction"},"frontmatter":{"title":"交互","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/interaction"},"frontmatter":{"title":"Interaction","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/camera"},"frontmatter":{"title":"相机","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/camera"},"frontmatter":{"title":"Camera","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/renderables"},"frontmatter":{"title":"Renderable","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/lighting"},"frontmatter":{"title":"Lighting","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/lighting"},"frontmatter":{"title":"光照","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/scenegraph"},"frontmatter":{"title":"SceneGraph","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/scenegraph"},"frontmatter":{"title":"场景图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/renderables"},"frontmatter":{"title":"Post Processing","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/material"},"frontmatter":{"title":"Material","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/material"},"frontmatter":{"title":"材质","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/geometry"},"frontmatter":{"title":"几何体","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/geometry"},"frontmatter":{"title":"Geometry","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.zh.md"}}}]}},"pageContext":{"allDemos":[{"relativePath":"rendering/scenegraph/demo/cubes.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/cubes.tsx","order":1,"filename":"cubes.tsx","title":"Attach cubes to a rotating group","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OEcdTJOyRQMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/scenegraph/demo/solar-system.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/solar-system.tsx","order":0,"filename":"solar-system.tsx","title":"Solar system","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*0d6WQa-BbUQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/renderables/demo/cube.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/cube.tsx","order":3,"filename":"cube.tsx","title":"A Rotating Cube","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/grid.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/grid.tsx","order":2,"filename":"grid.tsx","title":"Grid","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dYVxQoW7gmIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/line.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/line.tsx","order":1,"filename":"line.tsx","title":"2D Line","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/point.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/point.tsx","order":0,"filename":"point.tsx","title":"2D Point","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*UOGoTILse-0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/material/demo/basic.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/material/demo/basic.tsx","order":0,"filename":"basic.tsx","title":"Basic Material","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Material","order":303},"zh":{"title":"材质","order":303}}},{"relativePath":"rendering/interaction/demo/multi-canvas.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-canvas.tsx","order":2,"filename":"multi-canvas.tsx","hidden":true,"title":"Multi canvas contexts(Not recommended)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/multi-view.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-view.tsx","order":1,"filename":"multi-view.tsx","title":"Multi views(Recommended)","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ytT4SoKan_0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/pixel-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/pixel-picker.tsx","order":4,"filename":"pixel-picker.tsx","title":"PixelPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/ray-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/ray-picker.tsx","order":3,"filename":"ray-picker.tsx","title":"RayPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/responsive.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/responsive.tsx","order":0,"filename":"responsive.tsx","title":"Use a responsive viewport","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ByguS56BAO0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/geometry/demo/box.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/box.tsx","order":0,"filename":"box.tsx","title":"Box","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/merged.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/merged.tsx","order":3,"filename":"merged.tsx","title":"Merged geometry","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_fOKRJ18IcUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/plane.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/plane.tsx","order":2,"filename":"plane.tsx","title":"Plane","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*6zGmSbSJHgcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/world.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/world.tsx","order":4,"filename":"world.tsx","title":"World","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/sphere.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/sphere.tsx","order":1,"filename":"sphere.tsx","title":"Sphere","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/camera/demo/landmark.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/landmark.tsx","order":0,"filename":"landmark.tsx","title":"Switch to landmarks of a camera","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*nIKoSa3zNBMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/perspective.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/perspective.tsx","order":2,"filename":"perspective.tsx","title":"Camera with perspective projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*5aAORoqcdI0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/tracking.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/tracking.tsx","order":3,"filename":"tracking.tsx","title":"Tracking","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*RApkT63FesAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/ortho.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/ortho.tsx","order":1,"filename":"ortho.tsx","title":"Camera with orthographic projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*QQghSadPJnkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"gpgpu/graph/sssp/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/index.tsx","order":0,"filename":"index.tsx","title":"Bellman-Ford","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*U_ynS4APYr8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/sssp/demo/perf.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/perf.tsx","order":1,"filename":"perf.tsx","title":"Bellman-Ford in a large directed graph","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/fruchterman/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/index.tsx","order":0,"filename":"index.tsx","title":"Fruchterman 布局算法","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/precompiled.tsx","order":1,"filename":"precompiled.tsx","title":"Fruchterman 布局算法(预编译)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/cluster.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/cluster.tsx","order":2,"filename":"cluster.tsx","title":"Cluster","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce1.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce1.tsx","order":0,"filename":"reduce1.tsx","title":"Reduce 基础版本","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce2.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce2.tsx","order":1,"filename":"reduce2.tsx","title":"Reduce 改进 2.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce3.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce3.tsx","order":2,"filename":"reduce3.tsx","title":"Reduce 改进 3.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce4.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce4.tsx","order":3,"filename":"reduce4.tsx","title":"Reduce 改进 4.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce5.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce5.tsx","order":4,"filename":"reduce5.tsx","title":"Reduce 改进 5.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/mergeSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/mergeSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"归并排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Merge Sort","order":1},"zh":{"title":"归并排序","order":1}}},{"relativePath":"gpgpu/basic/bitonicSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/bitonicSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"奇偶排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Bitonic Sort (WebGPU Only)","order":1},"zh":{"title":"奇偶排序 (WebGPU Only)","order":1}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","order":-1,"filename":"add2vectors-precompiled.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors.tsx","order":-1,"filename":"add2vectors.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/iteration.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/iteration.tsx","order":2,"filename":"iteration.tsx","title":"迭代多次，串联自身","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/pipeline.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/pipeline.tsx","order":3,"filename":"pipeline.tsx","title":"串联多个 Kernel","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"experiment/unitchart/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/unitchart/demo/index.tsx","order":0,"filename":"index.tsx","title":"Unitchart","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Unitchart","order":6},"zh":{"title":"Unitchart","order":6}}},{"relativePath":"experiment/raytracer/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/raytracer/demo/index.tsx","order":0,"filename":"index.tsx","title":"RayTracer","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FARSSo38alcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"RayTracer","order":7},"zh":{"title":"RayTracer","order":7}}}],"exampleSections":{"examples":[{"relativePath":"rendering/scenegraph/demo/solar-system.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/solar-system.tsx","order":0,"filename":"solar-system.tsx","title":"Solar system","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*0d6WQa-BbUQAAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\n// @see https://threejsfundamentals.org/threejs/lessons/threejs-scenegraph.html\nfunction SolarSystem() {\n  let frameId;\n\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 10)\n      .setPerspective(0.1, 1000, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // sun, earth and moon will share the same geometry\n    const sphereGeometry = world.createGeometry(Geometry.SPHERE, {\n      radius: 0.5,\n      latitudeBands: 4,\n      longitudeBands: 4,\n    });\n\n    const sunMaterial = world.createMaterial(Material.BASIC).setUniform({\n      color: [1, 0, 0, 1],\n    });\n    const sun = world\n      .createRenderable()\n      .setGeometry(sphereGeometry)\n      .setMaterial(sunMaterial);\n    sun.getTransformComponent().setLocalScale([5, 5, 5]);\n\n    const earthMaterial = world.createMaterial(Material.BASIC).setUniform({\n      color: [0, 0, 1, 1],\n    });\n    const earth = world\n      .createRenderable()\n      .setGeometry(sphereGeometry)\n      .setMaterial(earthMaterial);\n\n    const moonMaterial = world.createMaterial(Material.BASIC).setUniform({\n      color: [1, 1, 0, 1],\n    });\n    const moon = world\n      .createRenderable()\n      .setGeometry(sphereGeometry)\n      .setMaterial(moonMaterial);\n    moon.getTransformComponent().setLocalScale([0.5, 0.5, 0.5]);\n\n    const solarSystem = world.createRenderable();\n    const earthOrbit = world.createRenderable();\n    earthOrbit.getTransformComponent().translateLocal([5, 0, 0]);\n    const moonOrbit = world.createRenderable();\n    moonOrbit.getTransformComponent().translateLocal([0.5, 0, 0]);\n\n    scene.addRenderable(solarSystem);\n    scene.addRenderable(sun);\n    scene.addRenderable(earthOrbit);\n    scene.addRenderable(earth);\n    scene.addRenderable(moonOrbit);\n    scene.addRenderable(moon);\n\n    sun.attach(solarSystem);\n    earthOrbit.attach(solarSystem);\n    earth.attach(earthOrbit);\n    moonOrbit.attach(earthOrbit);\n    moon.attach(moonOrbit);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n\n      solarSystem\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 0, 1));\n      earthOrbit\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 0, 2));\n      moon\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 0, 3));\n\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  }, []);\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n};\n\nReactDOM.render(<SolarSystem />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.solarSystem = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  // @see https://threejsfundamentals.org/threejs/lessons/threejs-scenegraph.html\n  function SolarSystem() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 10).setPerspective(0.1, 1000, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // sun, earth and moon will share the same geometry\n\n      var sphereGeometry = world.createGeometry(_gWebgpu.Geometry.SPHERE, {\n        radius: 0.5,\n        latitudeBands: 4,\n        longitudeBands: 4\n      });\n      var sunMaterial = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [1, 0, 0, 1]\n      });\n      var sun = world.createRenderable().setGeometry(sphereGeometry).setMaterial(sunMaterial);\n      sun.getTransformComponent().setLocalScale([5, 5, 5]);\n      var earthMaterial = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [0, 0, 1, 1]\n      });\n      var earth = world.createRenderable().setGeometry(sphereGeometry).setMaterial(earthMaterial);\n      var moonMaterial = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [1, 1, 0, 1]\n      });\n      var moon = world.createRenderable().setGeometry(sphereGeometry).setMaterial(moonMaterial);\n      moon.getTransformComponent().setLocalScale([0.5, 0.5, 0.5]);\n      var solarSystem = world.createRenderable();\n      var earthOrbit = world.createRenderable();\n      earthOrbit.getTransformComponent().translateLocal([5, 0, 0]);\n      var moonOrbit = world.createRenderable();\n      moonOrbit.getTransformComponent().translateLocal([0.5, 0, 0]);\n      scene.addRenderable(solarSystem);\n      scene.addRenderable(sun);\n      scene.addRenderable(earthOrbit);\n      scene.addRenderable(earth);\n      scene.addRenderable(moonOrbit);\n      scene.addRenderable(moon);\n      sun.attach(solarSystem);\n      earthOrbit.attach(solarSystem);\n      earth.attach(earthOrbit);\n      moonOrbit.attach(earthOrbit);\n      moon.attach(moonOrbit);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        solarSystem.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 0, 1));\n        earthOrbit.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 0, 2));\n        moon.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 0, 3));\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  ;\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(SolarSystem, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/scenegraph/demo/cubes.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/cubes.tsx","order":1,"filename":"cubes.tsx","title":"Attach cubes to a rotating group","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OEcdTJOyRQMAAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst CUBE_NUM = 300;\n\nfunction rand(min: number, max: number) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n  return min + (max - min) * Math.random();\n}\n\nconst App = function Group() {\n  let frameId;\n\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // all cubes share the same geometry\n    const boxGeometry = world.createGeometry(Geometry.BOX, {\n      halfExtents: [0.1, 0.1, 0.1],\n    });\n\n    const cubeGroup = world.createRenderable();\n\n    for (let i = 0; i < CUBE_NUM; i++) {\n      const material = world.createMaterial(Material.BASIC).setUniform({\n        color: i > 0 ? [1, 0, 0, 1] : [0, 1, 0, 1],\n      });\n\n      const cube = world\n        .createRenderable()\n        .setGeometry(boxGeometry)\n        .setMaterial(material);\n\n      const randomScale = rand(0.1, 0.5);\n\n      cube\n        .getTransformComponent()\n        .translate([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)])\n        .setLocalScale([randomScale, randomScale, randomScale]);\n\n      // attach every cube to group\n      if (i > 0) {\n        cube.attach(cubeGroup);\n      }\n\n      scene.addRenderable(cube);\n    }\n    scene.addRenderable(cubeGroup);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n      cubeGroup\n        .getTransformComponent()\n        .rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const groupFolder = gui.addFolder('group');\n    const cubes = [];\n    const groupConfig = {\n      scale: 1,\n      addCube: () => {\n        const material = world.createMaterial(Material.BASIC).setUniform({\n          color: [rand(0, 1), rand(0, 1), rand(0, 1), 1],\n        });\n        const cube = world\n          .createRenderable()\n          .setGeometry(boxGeometry)\n          .setMaterial(material);\n\n        const randomScale = rand(1, 2);\n        cube\n          .getTransformComponent()\n          .translate([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)])\n          .setLocalScale([randomScale, randomScale, randomScale]);\n        cube.attach(cubeGroup);\n        scene.addRenderable(cube);\n        cubes.push(cube);\n      },\n      removeCube: () => {\n        const cube = cubes.pop();\n        if (cube) {\n          cube.detach();\n          scene.removeEntity(cube);\n        }\n      },\n      toggleGroupVisible: () => {\n        cubeGroup.setVisible(!cubeGroup.isVisible());\n      },\n    };\n    groupFolder.add(groupConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      cubeGroup.getTransformComponent().setLocalScale([size, size, size]);\n    });\n    groupFolder.add(groupConfig, 'addCube').name('Add Cube');\n    groupFolder.add(groupConfig, 'removeCube').name('Remove Cube');\n    groupFolder.add(groupConfig, 'toggleGroupVisible').name('Hide/Show Group');\n    groupFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  }, []);\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.cubes = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var CUBE_NUM = 300;\n\n  function rand(min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    return min + (max - min) * Math.random();\n  }\n\n  var App = function Group() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // all cubes share the same geometry\n\n      var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: [0.1, 0.1, 0.1]\n      });\n      var cubeGroup = world.createRenderable();\n\n      for (var i = 0; i < CUBE_NUM; i++) {\n        var material = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n          color: i > 0 ? [1, 0, 0, 1] : [0, 1, 0, 1]\n        });\n        var cube = world.createRenderable().setGeometry(boxGeometry).setMaterial(material);\n        var randomScale = rand(0.1, 0.5);\n        cube.getTransformComponent().translate([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)]).setLocalScale([randomScale, randomScale, randomScale]); // attach every cube to group\n\n        if (i > 0) {\n          cube.attach(cubeGroup);\n        }\n\n        scene.addRenderable(cube);\n      }\n\n      scene.addRenderable(cubeGroup);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        cubeGroup.getTransformComponent().rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var groupFolder = gui.addFolder('group');\n      var cubes = [];\n      var groupConfig = {\n        scale: 1,\n        addCube: function addCube() {\n          var material = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n            color: [rand(0, 1), rand(0, 1), rand(0, 1), 1]\n          });\n          var cube = world.createRenderable().setGeometry(boxGeometry).setMaterial(material);\n          var randomScale = rand(1, 2);\n          cube.getTransformComponent().translate([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)]).setLocalScale([randomScale, randomScale, randomScale]);\n          cube.attach(cubeGroup);\n          scene.addRenderable(cube);\n          cubes.push(cube);\n        },\n        removeCube: function removeCube() {\n          var cube = cubes.pop();\n\n          if (cube) {\n            cube.detach();\n            scene.removeEntity(cube);\n          }\n        },\n        toggleGroupVisible: function toggleGroupVisible() {\n          cubeGroup.setVisible(!cubeGroup.isVisible());\n        }\n      };\n      groupFolder.add(groupConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        cubeGroup.getTransformComponent().setLocalScale([size, size, size]);\n      });\n      groupFolder.add(groupConfig, 'addCube').name('Add Cube');\n      groupFolder.add(groupConfig, 'removeCube').name('Remove Cube');\n      groupFolder.add(groupConfig, 'toggleGroupVisible').name('Hide/Show Group');\n      groupFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]},"description":""}},"staticQueryHashes":["1015175297","3000541721","3000541721","3378097331","638047554"]}