{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/rendering/interaction","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","examples":[{"slug":"gpgpu/basic","icon":"gallery","title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":"gallery","title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":"gallery","title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":"(function(history){\n        var pushState = history.pushState;\n        history.pushState = function(state) {\n          window.gwebgpuClean && window.gwebgpuClean();\n          return pushState.apply(history, arguments);\n        };\n      })(window.history);","playgroundWillUnmount":"window.gwebgpuClean && window.gwebgpuClean();","dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/interaction"},"frontmatter":{"title":"交互","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/interaction"},"frontmatter":{"title":"Interaction","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/camera"},"frontmatter":{"title":"相机","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/camera"},"frontmatter":{"title":"Camera","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/renderables"},"frontmatter":{"title":"Renderable","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/lighting"},"frontmatter":{"title":"Lighting","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/lighting"},"frontmatter":{"title":"光照","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/scenegraph"},"frontmatter":{"title":"SceneGraph","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/scenegraph"},"frontmatter":{"title":"场景图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/renderables"},"frontmatter":{"title":"Post Processing","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/material"},"frontmatter":{"title":"Material","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/material"},"frontmatter":{"title":"材质","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/geometry"},"frontmatter":{"title":"几何体","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/geometry"},"frontmatter":{"title":"Geometry","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.zh.md"}}}]}},"pageContext":{"allDemos":[{"relativePath":"rendering/scenegraph/demo/cubes.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/cubes.tsx","order":1,"filename":"cubes.tsx","title":"Attach cubes to a rotating group","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OEcdTJOyRQMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/scenegraph/demo/solar-system.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/solar-system.tsx","order":0,"filename":"solar-system.tsx","title":"Solar system","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*0d6WQa-BbUQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/renderables/demo/cube.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/cube.tsx","order":3,"filename":"cube.tsx","title":"A Rotating Cube","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/grid.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/grid.tsx","order":2,"filename":"grid.tsx","title":"Grid","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dYVxQoW7gmIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/line.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/line.tsx","order":1,"filename":"line.tsx","title":"2D Line","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/point.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/point.tsx","order":0,"filename":"point.tsx","title":"2D Point","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*UOGoTILse-0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/material/demo/basic.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/material/demo/basic.tsx","order":0,"filename":"basic.tsx","title":"Basic Material","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Material","order":303},"zh":{"title":"材质","order":303}}},{"relativePath":"rendering/interaction/demo/multi-canvas.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-canvas.tsx","order":2,"filename":"multi-canvas.tsx","hidden":true,"title":"Multi canvas contexts(Not recommended)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/multi-view.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-view.tsx","order":1,"filename":"multi-view.tsx","title":"Multi views(Recommended)","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ytT4SoKan_0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/pixel-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/pixel-picker.tsx","order":4,"filename":"pixel-picker.tsx","title":"PixelPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/ray-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/ray-picker.tsx","order":3,"filename":"ray-picker.tsx","title":"RayPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/responsive.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/responsive.tsx","order":0,"filename":"responsive.tsx","title":"Use a responsive viewport","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ByguS56BAO0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/geometry/demo/box.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/box.tsx","order":0,"filename":"box.tsx","title":"Box","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/merged.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/merged.tsx","order":3,"filename":"merged.tsx","title":"Merged geometry","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_fOKRJ18IcUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/plane.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/plane.tsx","order":2,"filename":"plane.tsx","title":"Plane","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*6zGmSbSJHgcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/world.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/world.tsx","order":4,"filename":"world.tsx","title":"World","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/sphere.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/sphere.tsx","order":1,"filename":"sphere.tsx","title":"Sphere","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/camera/demo/landmark.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/landmark.tsx","order":0,"filename":"landmark.tsx","title":"Switch to landmarks of a camera","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*nIKoSa3zNBMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/perspective.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/perspective.tsx","order":2,"filename":"perspective.tsx","title":"Camera with perspective projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*5aAORoqcdI0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/tracking.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/tracking.tsx","order":3,"filename":"tracking.tsx","title":"Tracking","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*RApkT63FesAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/ortho.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/ortho.tsx","order":1,"filename":"ortho.tsx","title":"Camera with orthographic projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*QQghSadPJnkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"gpgpu/graph/sssp/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/index.tsx","order":0,"filename":"index.tsx","title":"Bellman-Ford","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*U_ynS4APYr8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/sssp/demo/perf.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/perf.tsx","order":1,"filename":"perf.tsx","title":"Bellman-Ford in a large directed graph","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/fruchterman/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/index.tsx","order":0,"filename":"index.tsx","title":"Fruchterman 布局算法","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/precompiled.tsx","order":1,"filename":"precompiled.tsx","title":"Fruchterman 布局算法(预编译)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/cluster.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/cluster.tsx","order":2,"filename":"cluster.tsx","title":"Cluster","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce1.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce1.tsx","order":0,"filename":"reduce1.tsx","title":"Reduce 基础版本","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce2.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce2.tsx","order":1,"filename":"reduce2.tsx","title":"Reduce 改进 2.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce3.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce3.tsx","order":2,"filename":"reduce3.tsx","title":"Reduce 改进 3.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce4.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce4.tsx","order":3,"filename":"reduce4.tsx","title":"Reduce 改进 4.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce5.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce5.tsx","order":4,"filename":"reduce5.tsx","title":"Reduce 改进 5.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/mergeSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/mergeSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"归并排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Merge Sort","order":1},"zh":{"title":"归并排序","order":1}}},{"relativePath":"gpgpu/basic/bitonicSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/bitonicSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"奇偶排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Bitonic Sort (WebGPU Only)","order":1},"zh":{"title":"奇偶排序 (WebGPU Only)","order":1}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","order":-1,"filename":"add2vectors-precompiled.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors.tsx","order":-1,"filename":"add2vectors.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/iteration.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/iteration.tsx","order":2,"filename":"iteration.tsx","title":"迭代多次，串联自身","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/pipeline.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/pipeline.tsx","order":3,"filename":"pipeline.tsx","title":"串联多个 Kernel","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"experiment/unitchart/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/unitchart/demo/index.tsx","order":0,"filename":"index.tsx","title":"Unitchart","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Unitchart","order":6},"zh":{"title":"Unitchart","order":6}}},{"relativePath":"experiment/raytracer/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/raytracer/demo/index.tsx","order":0,"filename":"index.tsx","title":"RayTracer","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FARSSo38alcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"RayTracer","order":7},"zh":{"title":"RayTracer","order":7}}}],"exampleSections":{"examples":[{"relativePath":"rendering/interaction/demo/responsive.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/responsive.tsx","order":0,"filename":"responsive.tsx","title":"Use a responsive viewport","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ByguS56BAO0AAAAAAAAAAAAAARQnAQ","source":"import { Material, Geometry, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport SplitPane from 'react-split-pane';\nimport Stats from 'stats.js';\n\nconst App = function Responsive() {\n  let frameId: number;\n  let camera;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    camera = world\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n    camera.createLandmark('mark1', {\n      position: [0, 5, 5],\n      focalPoint: [0, 0, 0],\n    });\n    camera.createLandmark('mark2', {\n      position: [10, 0, 10],\n      focalPoint: [5, 0, 0],\n    });\n    camera.createLandmark('mark3', {\n      position: [3, 2, 5],\n      focalPoint: [0, 0, 0],\n      roll: 30,\n    });\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    const boxGeometry = world.createGeometry(Geometry.BOX, {\n      halfExtents: [1, 1, 1],\n    });\n    const material = world.createMaterial(Material.BASIC).setUniform({\n      color: [1, 0, 0, 1],\n    });\n\n    const box = world\n      .createRenderable()\n      .setGeometry(boxGeometry)\n      .setMaterial(material);\n    scene.addRenderable(box);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n  });\n\n  return (\n    <>\n      <SplitPane split=\"vertical\" defaultSize={200} primary=\"second\">\n        <canvas\n          id=\"application\"\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'block',\n          }}\n        />\n        <div>⇐ Drag this bar</div>\n      </SplitPane>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"react\", \"react-dom\", \"react-split-pane\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"react\"), require(\"react-dom\"), require(\"react-split-pane\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.react, global.reactDom, global.reactSplitPane, global.stats);\n    global.responsive = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, _react, _reactDom, _reactSplitPane, _stats) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _reactSplitPane = _interopRequireDefault(_reactSplitPane);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var App = function Responsive() {\n    var frameId;\n    var camera;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      camera = world.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n      camera.createLandmark('mark1', {\n        position: [0, 5, 5],\n        focalPoint: [0, 0, 0]\n      });\n      camera.createLandmark('mark2', {\n        position: [10, 0, 10],\n        focalPoint: [5, 0, 0]\n      });\n      camera.createLandmark('mark3', {\n        position: [3, 2, 5],\n        focalPoint: [0, 0, 0],\n        roll: 30\n      });\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view);\n      var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: [1, 1, 1]\n      });\n      var material = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [1, 0, 0, 1]\n      });\n      var box = world.createRenderable().setGeometry(boxGeometry).setMaterial(material);\n      scene.addRenderable(box);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n      return function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactSplitPane.default, {\n      split: \"vertical\",\n      defaultSize: 200,\n      primary: \"second\"\n    }, /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"div\", null, \"\\u21D0 Drag this bar\")));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/interaction/demo/multi-view.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-view.tsx","order":1,"filename":"multi-view.tsx","title":"Multi views(Recommended)","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ytT4SoKan_0AAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst $wrapper = document.getElementById('wrapper');\n\nfunction MultiView() {\n  let frameId: number;\n  let camera1;\n  let camera2;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene1 = world.createScene();\n    const scene2 = world.createScene();\n\n    camera1 = world\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n    camera2 = world\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n\n    const view1 = world\n      .createView()\n      .setCamera(camera1)\n      .setScene(scene1);\n    const view2 = world\n      .createView()\n      .setCamera(camera2)\n      .setScene(scene2);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view1, view2);\n\n    const boxGeometry = world.createGeometry(Geometry.BOX, {\n      halfExtents: [1, 1, 1],\n    });\n    const material1 = world.createMaterial(Material.BASIC).setUniform({\n      color: [1, 0, 0, 1],\n    });\n    const material2 = world.createMaterial(Material.BASIC).setUniform({\n      color: [0, 1, 0, 1],\n    });\n\n    const box1 = world\n      .createRenderable()\n      .setGeometry(boxGeometry)\n      .setMaterial(material1);\n    scene1.addRenderable(box1);\n    const transformComponent1 = box1.getTransformComponent();\n    transformComponent1.translateLocal([-1.2, 0, 0]);\n\n    const box2 = world\n      .createRenderable()\n      .setGeometry(boxGeometry)\n      .setMaterial(material2);\n    scene2.addRenderable(box2);\n    const transformComponent2 = box2.getTransformComponent();\n    transformComponent2.translateLocal([1.2, 0, 0]);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        renderer.setSize({ width, height });\n        view1.setViewport({\n          x: 0,\n          y: 0,\n          width: width / 2,\n          height,\n        });\n        view2.setViewport({\n          x: width / 2,\n          y: 0,\n          width: width / 2,\n          height,\n        });\n      }\n      return needResize;\n    };\n\n    const render = async () => {\n      if (stats) {\n        stats.update();\n      }\n\n      transformComponent1.rotateLocal(quat.fromEuler(quat.create(), 0, 1, 0));\n      transformComponent2.rotateLocal(quat.fromEuler(quat.create(), 0, 1, 0));\n\n      if (resizeRendererToDisplaySize()) {\n        camera1.setAspect(canvas.clientWidth / canvas.clientHeight);\n        camera2.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n\n      renderer.render(view1, view2);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <>\n      <canvas\n        id=\"application\"\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'block',\n        }}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: '50%',\n          height: '100%',\n          textAlign: 'right',\n          borderRight: '1px solid',\n          pointerEvents: 'none',\n        }}\n      >\n        Viewport 1\n      </div>\n      <div style={{ position: 'absolute', left: '50%', top: 0 }}>\n        Viewport 2\n      </div>\n    </>\n  );\n}\n\nReactDOM.render(<MultiView />, $wrapper);\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.multiView = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var $wrapper = document.getElementById('wrapper');\n\n  function MultiView() {\n    var frameId;\n    var camera1;\n    var camera2;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene1 = world.createScene();\n      var scene2 = world.createScene();\n      camera1 = world.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n      camera2 = world.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n      var view1 = world.createView().setCamera(camera1).setScene(scene1);\n      var view2 = world.createView().setCamera(camera2).setScene(scene2);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view1, view2);\n      var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: [1, 1, 1]\n      });\n      var material1 = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [1, 0, 0, 1]\n      });\n      var material2 = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [0, 1, 0, 1]\n      });\n      var box1 = world.createRenderable().setGeometry(boxGeometry).setMaterial(material1);\n      scene1.addRenderable(box1);\n      var transformComponent1 = box1.getTransformComponent();\n      transformComponent1.translateLocal([-1.2, 0, 0]);\n      var box2 = world.createRenderable().setGeometry(boxGeometry).setMaterial(material2);\n      scene2.addRenderable(box2);\n      var transformComponent2 = box2.getTransformComponent();\n      transformComponent2.translateLocal([1.2, 0, 0]);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          renderer.setSize({\n            width: width,\n            height: height\n          });\n          view1.setViewport({\n            x: 0,\n            y: 0,\n            width: width / 2,\n            height: height\n          });\n          view2.setViewport({\n            x: width / 2,\n            y: 0,\n            width: width / 2,\n            height: height\n          });\n        }\n\n        return needResize;\n      };\n\n      var render = async function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        transformComponent1.rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n        transformComponent2.rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (resizeRendererToDisplaySize()) {\n          camera1.setAspect(canvas.clientWidth / canvas.clientHeight);\n          camera2.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view1, view2);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '50%',\n        height: '100%',\n        textAlign: 'right',\n        borderRight: '1px solid',\n        pointerEvents: 'none'\n      }\n    }, \"Viewport 1\"), /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        left: '50%',\n        top: 0\n      }\n    }, \"Viewport 2\"));\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(MultiView, null), $wrapper);\n});"},{"relativePath":"rendering/interaction/demo/multi-canvas.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-canvas.tsx","order":2,"filename":"multi-canvas.tsx","hidden":true,"title":"Multi canvas contexts(Not recommended)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { Material, Geometry, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport { Button } from 'antd';\nimport { vec3, vec4 } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport SplitPane from 'react-split-pane';\nimport Stats from 'stats.js';\n\nconst App = function MultiWorld() {\n  let frameId: number;\n  let camera1;\n  let camera2;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas1 = document.getElementById(\n      'application1',\n    ) as HTMLCanvasElement;\n    const canvas2 = document.getElementById(\n      'application2',\n    ) as HTMLCanvasElement;\n\n    const world1 = World.create({\n      canvas: canvas1,\n    });\n    const world2 = World.create({\n      canvas: canvas2,\n    });\n\n    const renderer1 = world1.createRenderer();\n    const scene1 = world1.createScene();\n    const boxEntity1 = world1.createEntity();\n    scene1.addEntity(boxEntity1);\n\n    const renderer2 = world2.createRenderer();\n    const scene2 = world2.createScene();\n    const boxEntity2 = world2.createEntity();\n    scene2.addEntity(boxEntity2);\n\n    camera1 = world1\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas1.width / canvas1.height);\n    camera2 = world2\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas2.width / canvas2.height);\n\n    const view1 = world1\n      .createView()\n      .setCamera(camera1)\n      .setScene(scene1);\n    const view2 = world2\n      .createView()\n      .setCamera(camera2)\n      .setScene(scene2);\n\n    // const tracker1 = Tracker.create(world1);\n    // tracker1.attachControl(view1);\n    // const tracker2 = Tracker.create(world2);\n    // tracker2.attachControl(view2);\n\n    const boxGeometry1 = world1.createGeometry(Geometry.BOX, {\n      halfExtents: vec3.fromValues(1, 1, 1),\n    });\n    const material1 = world1.createMaterial(Material.BASIC).setUniform({\n      color: vec4.fromValues(1, 0, 0, 1),\n    });\n    const boxGeometry2 = world2.createBoxGeometry({\n      halfExtents: vec3.fromValues(1, 1, 1),\n    });\n    const material2 = world2.createMaterial(Material.BASIC).setUniform({\n      color: vec4.fromValues(1, 0, 0, 1),\n    });\n\n    world1\n      .createRenderable(boxEntity1)\n      .setGeometry(boxGeometry1)\n      .setMaterial(material1);\n    world2\n      .createRenderable(boxEntity2)\n      .setGeometry(boxGeometry2)\n      .setMaterial(material2);\n\n    console.log(boxEntity1, boxEntity2, boxGeometry1, boxGeometry2);\n\n    const resizeRenderer1ToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas1.clientWidth * dpr;\n      const height = canvas1.clientHeight * dpr;\n      const needResize = canvas1.width !== width || canvas1.height !== height;\n      if (needResize) {\n        view1.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas1.width = width;\n        canvas1.height = height;\n      }\n      return needResize;\n    };\n    const resizeRenderer2ToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas2.clientWidth * dpr;\n      const height = canvas2.clientHeight * dpr;\n      const needResize = canvas2.width !== width || canvas2.height !== height;\n      if (needResize) {\n        view2.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas2.width = width;\n        canvas2.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n\n      if (resizeRenderer1ToDisplaySize()) {\n        camera1.setAspect(canvas1.clientWidth / canvas1.clientHeight);\n      }\n      if (resizeRenderer2ToDisplaySize()) {\n        camera2.setAspect(canvas2.clientWidth / canvas2.clientHeight);\n      }\n\n      renderer1.render(view1);\n      renderer2.render(view2);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world1.destroy();\n      world2.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <>\n      <SplitPane split=\"vertical\" defaultSize={200} primary=\"second\">\n        <canvas\n          id=\"application1\"\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'block',\n          }}\n        />\n        <canvas\n          id=\"application2\"\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'block',\n          }}\n        />\n      </SplitPane>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"gl-matrix\", \"react\", \"react-dom\", \"react-split-pane\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"react-split-pane\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.glMatrix, global.react, global.reactDom, global.reactSplitPane, global.stats);\n    global.multiCanvas = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _glMatrix, _react, _reactDom, _reactSplitPane, _stats) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _reactSplitPane = _interopRequireDefault(_reactSplitPane);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var App = function MultiWorld() {\n    var frameId;\n    var camera1;\n    var camera2;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas1 = document.getElementById('application1');\n      var canvas2 = document.getElementById('application2');\n\n      var world1 = _gWebgpu.World.create({\n        canvas: canvas1\n      });\n\n      var world2 = _gWebgpu.World.create({\n        canvas: canvas2\n      });\n\n      var renderer1 = world1.createRenderer();\n      var scene1 = world1.createScene();\n      var boxEntity1 = world1.createEntity();\n      scene1.addEntity(boxEntity1);\n      var renderer2 = world2.createRenderer();\n      var scene2 = world2.createScene();\n      var boxEntity2 = world2.createEntity();\n      scene2.addEntity(boxEntity2);\n      camera1 = world1.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas1.width / canvas1.height);\n      camera2 = world2.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas2.width / canvas2.height);\n      var view1 = world1.createView().setCamera(camera1).setScene(scene1);\n      var view2 = world2.createView().setCamera(camera2).setScene(scene2); // const tracker1 = Tracker.create(world1);\n      // tracker1.attachControl(view1);\n      // const tracker2 = Tracker.create(world2);\n      // tracker2.attachControl(view2);\n\n      var boxGeometry1 = world1.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: _glMatrix.vec3.fromValues(1, 1, 1)\n      });\n      var material1 = world1.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: _glMatrix.vec4.fromValues(1, 0, 0, 1)\n      });\n      var boxGeometry2 = world2.createBoxGeometry({\n        halfExtents: _glMatrix.vec3.fromValues(1, 1, 1)\n      });\n      var material2 = world2.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: _glMatrix.vec4.fromValues(1, 0, 0, 1)\n      });\n      world1.createRenderable(boxEntity1).setGeometry(boxGeometry1).setMaterial(material1);\n      world2.createRenderable(boxEntity2).setGeometry(boxGeometry2).setMaterial(material2);\n      console.log(boxEntity1, boxEntity2, boxGeometry1, boxGeometry2);\n\n      var resizeRenderer1ToDisplaySize = function resizeRenderer1ToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas1.clientWidth * dpr;\n        var height = canvas1.clientHeight * dpr;\n        var needResize = canvas1.width !== width || canvas1.height !== height;\n\n        if (needResize) {\n          view1.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas1.width = width;\n          canvas1.height = height;\n        }\n\n        return needResize;\n      };\n\n      var resizeRenderer2ToDisplaySize = function resizeRenderer2ToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas2.clientWidth * dpr;\n        var height = canvas2.clientHeight * dpr;\n        var needResize = canvas2.width !== width || canvas2.height !== height;\n\n        if (needResize) {\n          view2.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas2.width = width;\n          canvas2.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRenderer1ToDisplaySize()) {\n          camera1.setAspect(canvas1.clientWidth / canvas1.clientHeight);\n        }\n\n        if (resizeRenderer2ToDisplaySize()) {\n          camera2.setAspect(canvas2.clientWidth / canvas2.clientHeight);\n        }\n\n        renderer1.render(view1);\n        renderer2.render(view2);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world1.destroy();\n        world2.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactSplitPane.default, {\n      split: \"vertical\",\n      defaultSize: 200,\n      primary: \"second\"\n    }, /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application1\",\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application2\",\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    })));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/interaction/demo/ray-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/ray-picker.tsx","order":3,"filename":"ray-picker.tsx","title":"RayPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { RayPicker, Tracker } from '@antv/g-webgpu-interactor';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst CUBE_NUM = 100;\n\nfunction rand(min: number, max: number) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n  return min + (max - min) * Math.random();\n}\n\nconst App = function RayPickerDemo() {\n  let frameId;\n  const [pickResult, setPickResult] = useState<{\n    id: number | undefined;\n    x: number;\n    y: number;\n  }>({\n    id: undefined,\n    x: -1,\n    y: -1,\n  });\n\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n    const picker = RayPicker.create(world);\n    picker.attachControl(view);\n    picker.on(\n      'pick',\n      (result: { id: number | undefined; x: number; y: number }) => {\n        setPickResult(result);\n      },\n    );\n\n    // all cubes share the same geometry\n    const boxGeometry = world.createGeometry(Geometry.BOX, {\n      halfExtents: [0.1, 0.1, 0.1],\n    });\n    const cubeGroup = world.createRenderable();\n\n    for (let i = 0; i < CUBE_NUM; i++) {\n      const material = world.createMaterial(Material.BASIC).setUniform({\n        color: [1, 0, 0, 1],\n      });\n\n      const cube = world\n        .createRenderable()\n        .setGeometry(boxGeometry)\n        .setMaterial(material);\n\n      const randomScale = rand(1, 2);\n      cube\n        .getTransformComponent()\n        .translateLocal([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)])\n        .setLocalScale([randomScale, randomScale, randomScale]);\n\n      cube.attach(cubeGroup);\n      scene.addRenderable(cube);\n    }\n    scene.addRenderable(cubeGroup);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n      cubeGroup\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 1, 0));\n\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  }, []);\n\n  return (\n    <>\n      <div\n        style={{\n          position: 'absolute',\n          top: 100,\n          left: 0,\n        }}\n      >\n        Picked ID: {pickResult.id}, x: {pickResult.x}, y: {pickResult.y}\n      </div>\n      <canvas\n        id=\"application\"\n        style={{\n          width: 600,\n          height: 600,\n          display: 'block',\n        }}\n      />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.rayPicker = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var CUBE_NUM = 100;\n\n  function rand(min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    return min + (max - min) * Math.random();\n  }\n\n  var App = function RayPickerDemo() {\n    var frameId;\n\n    var _useState = (0, _react.useState)({\n      id: undefined,\n      x: -1,\n      y: -1\n    }),\n        _useState2 = _slicedToArray(_useState, 2),\n        pickResult = _useState2[0],\n        setPickResult = _useState2[1];\n\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view);\n\n      var picker = _gWebgpuInteractor.RayPicker.create(world);\n\n      picker.attachControl(view);\n      picker.on('pick', function (result) {\n        setPickResult(result);\n      }); // all cubes share the same geometry\n\n      var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: [0.1, 0.1, 0.1]\n      });\n      var cubeGroup = world.createRenderable();\n\n      for (var i = 0; i < CUBE_NUM; i++) {\n        var material = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n          color: [1, 0, 0, 1]\n        });\n        var cube = world.createRenderable().setGeometry(boxGeometry).setMaterial(material);\n        var randomScale = rand(1, 2);\n        cube.getTransformComponent().translateLocal([rand(-1.2, 1.2), rand(-1.2, 1.2), rand(-1.2, 1.2)]).setLocalScale([randomScale, randomScale, randomScale]);\n        cube.attach(cubeGroup);\n        scene.addRenderable(cube);\n      }\n\n      scene.addRenderable(cubeGroup);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        cubeGroup.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 100,\n        left: 0\n      }\n    }, \"Picked ID: \", pickResult.id, \", x: \", pickResult.x, \", y: \", pickResult.y), /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    }));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/interaction/demo/pixel-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/pixel-picker.tsx","order":4,"filename":"pixel-picker.tsx","title":"PixelPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { World, Renderable } from '@antv/g-webgpu';\nimport { PixelPicker, Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst shapes = [\n  'circle',\n  'triangle',\n  'square',\n  'pentagon',\n  'hexagon',\n  'octogon',\n  'hexagram',\n  'rhombus',\n  'vesica',\n];\n\nconst App = function PixelPickerDemo() {\n  let frameId;\n  const [pickResult, setPickResult] = useState<{\n    id: number | undefined;\n    x: number;\n    y: number;\n  }>({\n    id: undefined,\n    x: -1,\n    y: -1,\n  });\n\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n    const pointsEntity = world.createEntity();\n    scene.addEntity(pointsEntity);\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 5)\n      .setPerspective(0.1, 200, 60, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n    const picker = PixelPicker.create(world);\n    picker.attachControl(view);\n    picker.on(\n      'pick',\n      (result: { id: number | undefined; x: number; y: number }) => {\n        setPickResult(result);\n      },\n    );\n\n    world.createRenderable(\n      pointsEntity,\n      Renderable.POINT,\n      new Array(100).fill(undefined).map((_, i) => ({\n        id: i, // used by pixel picker\n        shape: shapes[Math.floor(Math.random() * 9)],\n        size: [50, 50],\n        position: [Math.random() * 2 - 1, Math.random() * 2 - 1],\n        color: [Math.random(), Math.random(), Math.random(), 1],\n      })),\n    );\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const pixelPickerFolder = gui.addFolder('pixel picker');\n    const pickConfig = {\n      enableHighlight: true,\n      highlightColor: [255, 0, 0],\n    };\n    pixelPickerFolder.add(pickConfig, 'enableHighlight').onChange((enabled) => {\n      picker.enableHighlight(enabled);\n    });\n    pixelPickerFolder\n      .addColor(pickConfig, 'highlightColor')\n      .onChange((color) => {\n        picker.setHighlightColor([\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n          1,\n        ]);\n      });\n    pixelPickerFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  }, []);\n\n  return (\n    <>\n      <div\n        style={{\n          position: 'absolute',\n          top: 100,\n          left: 0,\n        }}\n      >\n        Picked ID: {pickResult.id}, x: {pickResult.x}, y: {pickResult.y}\n      </div>\n      <canvas\n        id=\"application\"\n        style={{\n          width: 600,\n          height: 600,\n          display: 'block',\n        }}\n      />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.react, global.reactDom, global.stats);\n    global.pixelPicker = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var shapes = ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'];\n\n  var App = function PixelPickerDemo() {\n    var frameId;\n\n    var _useState = (0, _react.useState)({\n      id: undefined,\n      x: -1,\n      y: -1\n    }),\n        _useState2 = _slicedToArray(_useState, 2),\n        pickResult = _useState2[0],\n        setPickResult = _useState2[1];\n\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var pointsEntity = world.createEntity();\n      scene.addEntity(pointsEntity);\n      var camera = world.createCamera().setPosition(0, 0, 5).setPerspective(0.1, 200, 60, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view);\n\n      var picker = _gWebgpuInteractor.PixelPicker.create(world);\n\n      picker.attachControl(view);\n      picker.on('pick', function (result) {\n        setPickResult(result);\n      });\n      world.createRenderable(pointsEntity, _gWebgpu.Renderable.POINT, new Array(100).fill(undefined).map(function (_, i) {\n        return {\n          id: i,\n          // used by pixel picker\n          shape: shapes[Math.floor(Math.random() * 9)],\n          size: [50, 50],\n          position: [Math.random() * 2 - 1, Math.random() * 2 - 1],\n          color: [Math.random(), Math.random(), Math.random(), 1]\n        };\n      }));\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var pixelPickerFolder = gui.addFolder('pixel picker');\n      var pickConfig = {\n        enableHighlight: true,\n        highlightColor: [255, 0, 0]\n      };\n      pixelPickerFolder.add(pickConfig, 'enableHighlight').onChange(function (enabled) {\n        picker.enableHighlight(enabled);\n      });\n      pixelPickerFolder.addColor(pickConfig, 'highlightColor').onChange(function (color) {\n        picker.setHighlightColor([color[0] / 255, color[1] / 255, color[2] / 255, 1]);\n      });\n      pixelPickerFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 100,\n        left: 0\n      }\n    }, \"Picked ID: \", pickResult.id, \", x: \", pickResult.x, \", y: \", pickResult.y), /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    }));\n  };\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]},"description":""}},"staticQueryHashes":["1015175297","3000541721","3000541721","3378097331","638047554"]}