{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/rendering/geometry","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","examples":[{"slug":"gpgpu/basic","icon":"gallery","title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":"gallery","title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":"gallery","title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":"(function(history){\n        var pushState = history.pushState;\n        history.pushState = function(state) {\n          window.gwebgpuClean && window.gwebgpuClean();\n          return pushState.apply(history, arguments);\n        };\n      })(window.history);","playgroundWillUnmount":"window.gwebgpuClean && window.gwebgpuClean();","dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/interaction"},"frontmatter":{"title":"交互","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/interaction"},"frontmatter":{"title":"Interaction","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/interaction/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/camera"},"frontmatter":{"title":"相机","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/camera"},"frontmatter":{"title":"Camera","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/camera/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/renderables"},"frontmatter":{"title":"Renderable","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/lighting"},"frontmatter":{"title":"Lighting","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/lighting"},"frontmatter":{"title":"光照","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/lighting/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/scenegraph"},"frontmatter":{"title":"SceneGraph","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/scenegraph"},"frontmatter":{"title":"场景图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/scenegraph/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/renderables"},"frontmatter":{"title":"Post Processing","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/renderables/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/material"},"frontmatter":{"title":"Material","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/material"},"frontmatter":{"title":"材质","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/material/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/geometry"},"frontmatter":{"title":"几何体","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/geometry"},"frontmatter":{"title":"Geometry","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/geometry/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/rendering/postprocessing"},"frontmatter":{"title":"后处理","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/postprocessing/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/unitchart/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/experiment/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"experiment/raytracer/index.zh.md"}}}]}},"pageContext":{"allDemos":[{"relativePath":"rendering/scenegraph/demo/cubes.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/cubes.tsx","order":1,"filename":"cubes.tsx","title":"Attach cubes to a rotating group","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OEcdTJOyRQMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/scenegraph/demo/solar-system.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/scenegraph/demo/solar-system.tsx","order":0,"filename":"solar-system.tsx","title":"Solar system","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*0d6WQa-BbUQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SceneGraph","order":303},"zh":{"title":"场景图","order":303}}},{"relativePath":"rendering/renderables/demo/cube.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/cube.tsx","order":3,"filename":"cube.tsx","title":"A Rotating Cube","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/grid.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/grid.tsx","order":2,"filename":"grid.tsx","title":"Grid","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dYVxQoW7gmIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/line.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/line.tsx","order":1,"filename":"line.tsx","title":"2D Line","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/renderables/demo/point.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/renderables/demo/point.tsx","order":0,"filename":"point.tsx","title":"2D Point","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*UOGoTILse-0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Renderable","order":302},"en":{"title":"Post Processing","order":303}}},{"relativePath":"rendering/material/demo/basic.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/material/demo/basic.tsx","order":0,"filename":"basic.tsx","title":"Basic Material","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Material","order":303},"zh":{"title":"材质","order":303}}},{"relativePath":"rendering/interaction/demo/multi-canvas.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-canvas.tsx","order":2,"filename":"multi-canvas.tsx","hidden":true,"title":"Multi canvas contexts(Not recommended)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/multi-view.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/multi-view.tsx","order":1,"filename":"multi-view.tsx","title":"Multi views(Recommended)","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ytT4SoKan_0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/pixel-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/pixel-picker.tsx","order":4,"filename":"pixel-picker.tsx","title":"PixelPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/ray-picker.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/ray-picker.tsx","order":3,"filename":"ray-picker.tsx","title":"RayPicker","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/interaction/demo/responsive.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/interaction/demo/responsive.tsx","order":0,"filename":"responsive.tsx","title":"Use a responsive viewport","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ByguS56BAO0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互","order":300},"en":{"title":"Interaction","order":300}}},{"relativePath":"rendering/geometry/demo/box.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/box.tsx","order":0,"filename":"box.tsx","title":"Box","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/merged.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/merged.tsx","order":3,"filename":"merged.tsx","title":"Merged geometry","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_fOKRJ18IcUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/plane.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/plane.tsx","order":2,"filename":"plane.tsx","title":"Plane","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*6zGmSbSJHgcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/world.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/world.tsx","order":4,"filename":"world.tsx","title":"World","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/geometry/demo/sphere.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/sphere.tsx","order":1,"filename":"sphere.tsx","title":"Sphere","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"几何体","order":303},"en":{"title":"Geometry","order":303}}},{"relativePath":"rendering/camera/demo/landmark.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/landmark.tsx","order":0,"filename":"landmark.tsx","title":"Switch to landmarks of a camera","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*nIKoSa3zNBMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/perspective.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/perspective.tsx","order":2,"filename":"perspective.tsx","title":"Camera with perspective projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*5aAORoqcdI0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/tracking.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/tracking.tsx","order":3,"filename":"tracking.tsx","title":"Tracking","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*RApkT63FesAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"rendering/camera/demo/ortho.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/camera/demo/ortho.tsx","order":1,"filename":"ortho.tsx","title":"Camera with orthographic projection","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*QQghSadPJnkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"相机","order":301},"en":{"title":"Camera","order":301}}},{"relativePath":"gpgpu/graph/sssp/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/index.tsx","order":0,"filename":"index.tsx","title":"Bellman-Ford","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*U_ynS4APYr8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/sssp/demo/perf.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/sssp/demo/perf.tsx","order":1,"filename":"perf.tsx","title":"Bellman-Ford in a large directed graph","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2},"zh":{"title":"单源最短路径算法 (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/graph/fruchterman/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/index.tsx","order":0,"filename":"index.tsx","title":"Fruchterman 布局算法","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/precompiled.tsx","order":1,"filename":"precompiled.tsx","title":"Fruchterman 布局算法(预编译)","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/graph/fruchterman/demo/cluster.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/graph/fruchterman/demo/cluster.tsx","order":2,"filename":"cluster.tsx","title":"Cluster","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Fruchterman Layout","order":1},"zh":{"title":"Fruchterman 布局算法","order":1}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce1.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce1.tsx","order":0,"filename":"reduce1.tsx","title":"Reduce 基础版本","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce2.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce2.tsx","order":1,"filename":"reduce2.tsx","title":"Reduce 改进 2.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce3.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce3.tsx","order":2,"filename":"reduce3.tsx","title":"Reduce 改进 3.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce4.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce4.tsx","order":3,"filename":"reduce4.tsx","title":"Reduce 改进 4.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/reduce/demo/reduce5.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/reduce/demo/reduce5.tsx","order":4,"filename":"reduce5.tsx","title":"Reduce 改进 5.0","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Reduce (WebGPU Only)","order":2},"zh":{"title":"Reduce (WebGPU Only)","order":2}}},{"relativePath":"gpgpu/basic/mergeSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/mergeSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"归并排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Merge Sort","order":1},"zh":{"title":"归并排序","order":1}}},{"relativePath":"gpgpu/basic/bitonicSort/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/bitonicSort/demo/index.tsx","order":0,"filename":"index.tsx","title":"奇偶排序","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Bitonic Sort (WebGPU Only)","order":1},"zh":{"title":"奇偶排序 (WebGPU Only)","order":1}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors-precompiled.tsx","order":-1,"filename":"add2vectors-precompiled.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/add2vectors.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/add2vectors.tsx","order":-1,"filename":"add2vectors.tsx","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/iteration.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/iteration.tsx","order":2,"filename":"iteration.tsx","title":"迭代多次，串联自身","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"gpgpu/basic/add2vectors/demo/pipeline.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/gpgpu/basic/add2vectors/demo/pipeline.tsx","order":3,"filename":"pipeline.tsx","title":"串联多个 Kernel","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"zh":{"title":"两个向量相加","order":0},"en":{"title":"Add 2 vectors","order":0}}},{"relativePath":"experiment/unitchart/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/unitchart/demo/index.tsx","order":0,"filename":"index.tsx","title":"Unitchart","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","postFrontmatter":{"en":{"title":"Unitchart","order":6},"zh":{"title":"Unitchart","order":6}}},{"relativePath":"experiment/raytracer/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/experiment/raytracer/demo/index.tsx","order":0,"filename":"index.tsx","title":"RayTracer","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FARSSo38alcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"RayTracer","order":7},"zh":{"title":"RayTracer","order":7}}}],"exampleSections":{"examples":[{"relativePath":"rendering/geometry/demo/box.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/box.tsx","order":0,"filename":"box.tsx","title":"Box","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dV0gTafuRHsAAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nfunction BoxGeometry() {\n  let frameId;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // create geometry, material and attach them to mesh\n    const boxGeometry = world.createGeometry(Geometry.BOX, {\n      halfExtents: [0.5, 0.5, 0.5],\n    });\n\n    // create a texture by url\n    const texture = world.createTexture2D({\n      url: 'https://threejs.org/examples/textures/crate.gif',\n    });\n    const material = world\n      .createMaterial(Material.BASIC, {\n        map: texture,\n      })\n      .setUniform({\n        color: [1, 1, 1, 1],\n      });\n\n    const box = world\n      .createRenderable()\n      .setGeometry(boxGeometry)\n      .setMaterial(material);\n    scene.addRenderable(box);\n    const transformComponent = box.getTransformComponent();\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      transformComponent.rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n      if (stats) {\n        stats.update();\n      }\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const cubeFolder = gui.addFolder('cube');\n    const cubeConfig = {\n      scale: 1,\n      color: [255, 255, 255],\n    };\n    cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.setLocalScale([size, size, size]);\n    });\n    cubeFolder.addColor(cubeConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: [color[0] / 255, color[1] / 255, color[2] / 255, 1],\n      });\n    });\n    cubeFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n}\n\nReactDOM.render(<BoxGeometry />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.box = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function BoxGeometry() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      });\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // create geometry, material and attach them to mesh\n\n      var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n        halfExtents: [0.5, 0.5, 0.5]\n      }); // create a texture by url\n\n      var texture = world.createTexture2D({\n        url: 'https://threejs.org/examples/textures/crate.gif'\n      });\n      var material = world.createMaterial(_gWebgpu.Material.BASIC, {\n        map: texture\n      }).setUniform({\n        color: [1, 1, 1, 1]\n      });\n      var box = world.createRenderable().setGeometry(boxGeometry).setMaterial(material);\n      scene.addRenderable(box);\n      var transformComponent = box.getTransformComponent();\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        transformComponent.rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var cubeFolder = gui.addFolder('cube');\n      var cubeConfig = {\n        scale: 1,\n        color: [255, 255, 255]\n      };\n      cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.setLocalScale([size, size, size]);\n      });\n      cubeFolder.addColor(cubeConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: [color[0] / 255, color[1] / 255, color[2] / 255, 1]\n        });\n      });\n      cubeFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(BoxGeometry, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/geometry/demo/sphere.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/sphere.tsx","order":1,"filename":"sphere.tsx","title":"Sphere","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nfunction SphereGeometry() {\n  let frameId;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // create geometry, material and attach them to mesh\n    const sphereGeometry = world.createGeometry(Geometry.SPHERE, {\n      radius: 0.5,\n    });\n\n    // create a texture by url\n    const texture = world.createTexture2D({\n      url: 'https://threejs.org/examples/textures/crate.gif',\n    });\n    const material = world\n      .createMaterial(Material.BASIC, {\n        map: texture,\n      })\n      .setUniform({\n        color: [1, 1, 1, 1],\n      });\n\n    const sphere = world\n      .createRenderable()\n      .setGeometry(sphereGeometry)\n      .setMaterial(material);\n    scene.addRenderable(sphere);\n\n    const transformComponent = sphere.getTransformComponent();\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      transformComponent.rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n      if (stats) {\n        stats.update();\n      }\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const sphereFolder = gui.addFolder('sphere');\n    const sphereConfig = {\n      scale: 1,\n      radius: 0.5,\n      color: [255, 255, 255],\n    };\n    sphereFolder.add(sphereConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.setLocalScale([size, size, size]);\n    });\n    sphereFolder.addColor(sphereConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: [color[0] / 255, color[1] / 255, color[2] / 255, 1],\n      });\n    });\n    sphereFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n}\n\nReactDOM.render(<SphereGeometry />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.sphere = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function SphereGeometry() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      });\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // create geometry, material and attach them to mesh\n\n      var sphereGeometry = world.createGeometry(_gWebgpu.Geometry.SPHERE, {\n        radius: 0.5\n      }); // create a texture by url\n\n      var texture = world.createTexture2D({\n        url: 'https://threejs.org/examples/textures/crate.gif'\n      });\n      var material = world.createMaterial(_gWebgpu.Material.BASIC, {\n        map: texture\n      }).setUniform({\n        color: [1, 1, 1, 1]\n      });\n      var sphere = world.createRenderable().setGeometry(sphereGeometry).setMaterial(material);\n      scene.addRenderable(sphere);\n      var transformComponent = sphere.getTransformComponent();\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        transformComponent.rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var sphereFolder = gui.addFolder('sphere');\n      var sphereConfig = {\n        scale: 1,\n        radius: 0.5,\n        color: [255, 255, 255]\n      };\n      sphereFolder.add(sphereConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.setLocalScale([size, size, size]);\n      });\n      sphereFolder.addColor(sphereConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: [color[0] / 255, color[1] / 255, color[2] / 255, 1]\n        });\n      });\n      sphereFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(SphereGeometry, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/geometry/demo/plane.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/plane.tsx","order":2,"filename":"plane.tsx","title":"Plane","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*6zGmSbSJHgcAAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nfunction PlaneGeometry() {\n  let frameId;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 2, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // create geometry, material and attach them to mesh\n    const planeGeometry = world.createGeometry(Geometry.PLANE);\n\n    // create a texture by url\n    const texture = world.createTexture2D({\n      url: 'https://threejs.org/examples/textures/crate.gif',\n    });\n    const material = world\n      .createMaterial(Material.BASIC, {\n        map: texture,\n      })\n      .setUniform({\n        color: [1, 1, 1, 1],\n      });\n\n    const plane = world\n      .createRenderable()\n      .setGeometry(planeGeometry)\n      .setMaterial(material);\n    scene.addRenderable(plane);\n\n    const transformComponent = plane.getTransformComponent();\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      transformComponent.rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n      if (stats) {\n        stats.update();\n      }\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const planeFolder = gui.addFolder('plane');\n    const planeConfig = {\n      scale: 1,\n      color: [255, 255, 255],\n    };\n    planeFolder.add(planeConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.setLocalScale([size, size, size]);\n    });\n    planeFolder.addColor(planeConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: [color[0] / 255, color[1] / 255, color[2] / 255, 1],\n      });\n    });\n    planeFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n}\n\nReactDOM.render(<PlaneGeometry />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.plane = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function PlaneGeometry() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 2, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      });\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // create geometry, material and attach them to mesh\n\n      var planeGeometry = world.createGeometry(_gWebgpu.Geometry.PLANE); // create a texture by url\n\n      var texture = world.createTexture2D({\n        url: 'https://threejs.org/examples/textures/crate.gif'\n      });\n      var material = world.createMaterial(_gWebgpu.Material.BASIC, {\n        map: texture\n      }).setUniform({\n        color: [1, 1, 1, 1]\n      });\n      var plane = world.createRenderable().setGeometry(planeGeometry).setMaterial(material);\n      scene.addRenderable(plane);\n      var transformComponent = plane.getTransformComponent();\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        transformComponent.rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var planeFolder = gui.addFolder('plane');\n      var planeConfig = {\n        scale: 1,\n        color: [255, 255, 255]\n      };\n      planeFolder.add(planeConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.setLocalScale([size, size, size]);\n      });\n      planeFolder.addColor(planeConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: [color[0] / 255, color[1] / 255, color[2] / 255, 1]\n        });\n      });\n      planeFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(PlaneGeometry, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/geometry/demo/merged.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/merged.tsx","order":3,"filename":"merged.tsx","title":"Merged geometry","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_fOKRJ18IcUAAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, Renderable, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst CUBE_NUM = 1000;\n\nfunction rand(min: number, max: number) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n  return min + (max - min) * Math.random();\n}\n\nfunction MergedGeometry() {\n  let frameId;\n\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 100, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene);\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    const material = world.createMaterial(Material.BASIC).setUniform({\n      color: [1, 0, 0, 1],\n    });\n    const geometries = [];\n    // reused by every geometry\n    const transformComponent = world.createRenderable().getTransformComponent();\n\n    const unmergedCubes = world.createRenderable();\n    scene.addRenderable(unmergedCubes);\n\n    for (let i = 0; i < CUBE_NUM; i++) {\n      const boxGeometry = world.createGeometry(Geometry.BOX, {\n        halfExtents: [1, 1, 1],\n      });\n      const randomScale = rand(0.02, 0.05);\n      const translation = [rand(-1, 1), rand(-1, 1), rand(-1, 1)];\n      const scale = [randomScale, randomScale, randomScale];\n\n      // do RTS transformation\n      transformComponent.translateLocal(translation).setLocalScale(scale);\n      transformComponent.updateTransform();\n\n      // apply transform matrix to every geometry\n      boxGeometry.applyMatrix(transformComponent.worldTransform);\n      // clear for next time\n      transformComponent.clearTransform();\n      geometries.push(boxGeometry);\n\n      // bad performance...\n      const boxGeometry2 = world.createGeometry(Geometry.BOX, {\n        halfExtents: [1, 1, 1],\n      });\n      const cube = world\n        .createRenderable()\n        .setGeometry(boxGeometry2)\n        .setMaterial(material);\n      cube\n        .getTransformComponent()\n        .translate(translation)\n        .setLocalScale(scale);\n      cube.attach(unmergedCubes);\n      scene.addRenderable(cube);\n      unmergedCubes.setVisible(false);\n    }\n\n    // good performance...\n    // merge all the boxes into a single geometry\n    const mergedGeometry = world.createGeometry(Geometry.MERGED, {\n      geometries,\n    });\n\n    const mergedCubes = world\n      .createRenderable()\n      .setGeometry(mergedGeometry)\n      .setMaterial(material);\n    scene.addRenderable(mergedCubes);\n\n    const grid = world.createRenderable(Renderable.GRID);\n    scene.addRenderable(grid);\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n\n      mergedCubes\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 1, 0));\n      unmergedCubes\n        .getTransformComponent()\n        .rotateLocal(quat.fromEuler(quat.create(), 0, 1, 0));\n\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const cubeFolder = gui.addFolder('merged geometry');\n    const cubeConfig = {\n      merged: true,\n    };\n    cubeFolder\n      .add(cubeConfig, 'merged')\n      .onChange((merged) => {\n        if (merged) {\n          mergedCubes.setVisible(true);\n          unmergedCubes.setVisible(false);\n        } else {\n          mergedCubes.setVisible(false);\n          unmergedCubes.setVisible(true);\n        }\n      })\n      .name('enable merged geometry');\n    cubeFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  }, []);\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n}\n\nReactDOM.render(<MergedGeometry />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.merged = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var CUBE_NUM = 1000;\n\n  function rand(min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    return min + (max - min) * Math.random();\n  }\n\n  function MergedGeometry() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 100, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene);\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view);\n      var material = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n        color: [1, 0, 0, 1]\n      });\n      var geometries = []; // reused by every geometry\n\n      var transformComponent = world.createRenderable().getTransformComponent();\n      var unmergedCubes = world.createRenderable();\n      scene.addRenderable(unmergedCubes);\n\n      for (var i = 0; i < CUBE_NUM; i++) {\n        var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX, {\n          halfExtents: [1, 1, 1]\n        });\n        var randomScale = rand(0.02, 0.05);\n        var translation = [rand(-1, 1), rand(-1, 1), rand(-1, 1)];\n        var scale = [randomScale, randomScale, randomScale]; // do RTS transformation\n\n        transformComponent.translateLocal(translation).setLocalScale(scale);\n        transformComponent.updateTransform(); // apply transform matrix to every geometry\n\n        boxGeometry.applyMatrix(transformComponent.worldTransform); // clear for next time\n\n        transformComponent.clearTransform();\n        geometries.push(boxGeometry); // bad performance...\n\n        var boxGeometry2 = world.createGeometry(_gWebgpu.Geometry.BOX, {\n          halfExtents: [1, 1, 1]\n        });\n        var cube = world.createRenderable().setGeometry(boxGeometry2).setMaterial(material);\n        cube.getTransformComponent().translate(translation).setLocalScale(scale);\n        cube.attach(unmergedCubes);\n        scene.addRenderable(cube);\n        unmergedCubes.setVisible(false);\n      } // good performance...\n      // merge all the boxes into a single geometry\n\n\n      var mergedGeometry = world.createGeometry(_gWebgpu.Geometry.MERGED, {\n        geometries: geometries\n      });\n      var mergedCubes = world.createRenderable().setGeometry(mergedGeometry).setMaterial(material);\n      scene.addRenderable(mergedCubes);\n      var grid = world.createRenderable(_gWebgpu.Renderable.GRID);\n      scene.addRenderable(grid);\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        mergedCubes.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n        unmergedCubes.getTransformComponent().rotateLocal(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var cubeFolder = gui.addFolder('merged geometry');\n      var cubeConfig = {\n        merged: true\n      };\n      cubeFolder.add(cubeConfig, 'merged').onChange(function (merged) {\n        if (merged) {\n          mergedCubes.setVisible(true);\n          unmergedCubes.setVisible(false);\n        } else {\n          mergedCubes.setVisible(false);\n          unmergedCubes.setVisible(true);\n        }\n      }).name('enable merged geometry');\n      cubeFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(MergedGeometry, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/geometry/demo/world.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/geometry/demo/world.tsx","order":4,"filename":"world.tsx","title":"World","screenshot":"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jQpbRrS6en0AAAAAAAAAAAAAARQnAQ","source":"import { Geometry, Material, World } from '@antv/g-webgpu';\nimport { Tracker } from '@antv/g-webgpu-interactor';\nimport * as dat from 'dat.gui';\nimport { quat, vec3, vec4 } from 'gl-matrix';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nfunction parseData(text) {\n  const data = [];\n  const settings = { data };\n  let max;\n  let min;\n  // split into lines\n  text.split('\\n').forEach((line) => {\n    // split the line by whitespace\n    const parts = line.trim().split(/\\s+/);\n    if (parts.length === 2) {\n      // only 2 parts, must be a key/value pair\n      settings[parts[0]] = parseFloat(parts[1]);\n    } else if (parts.length > 2) {\n      // more than 2 parts, must be data\n      const values = parts.map((v) => {\n        const value = parseFloat(v);\n        if (value === settings.NODATA_value) {\n          return undefined;\n        }\n        max = Math.max(max === undefined ? value : max, value);\n        min = Math.min(min === undefined ? value : min, value);\n        return value;\n      });\n      data.push(values);\n    }\n  });\n  return {...settings,  min, max};\n}\n\nfunction SphereGeometry() {\n  let frameId;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 0, 2)\n      .setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    const tracker = Tracker.create(world);\n    tracker.attachControl(view);\n\n    // create geometry, material and attach them to mesh\n    const sphereGeometry = world.createGeometry(Geometry.SPHERE, {\n      radius: 0.5,\n      latitudeBands: 64,\n      longitudeBands: 32,\n    });\n\n    // create a texture by url\n    const texture = world.createTexture2D({\n      url:\n        'https://2.bp.blogspot.com/-Jfw4jY6vBWM/UkbwZhdKxuI/AAAAAAAAK94/QTmtnuDFlC8/s1600/2_no_clouds_4k.jpg',\n    });\n    const material = world\n      .createMaterial(Material.BASIC, {\n        map: texture,\n      })\n      .setUniform({\n        color: [1, 1, 1, 1],\n      });\n\n    const sphere = world\n      .createRenderable()\n      .setGeometry(sphereGeometry)\n      .setMaterial(material);\n    scene.addRenderable(sphere);\n\n    const transformComponent = sphere.getTransformComponent();\n\n    const resizeRendererToDisplaySize = () => {\n      const dpr = window.devicePixelRatio;\n      const width = canvas.clientWidth * dpr;\n      const height = canvas.clientHeight * dpr;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        view.setViewport({\n          x: 0,\n          y: 0,\n          width,\n          height,\n        });\n        canvas.width = width;\n        canvas.height = height;\n      }\n      return needResize;\n    };\n\n    const render = () => {\n      if (stats) {\n        stats.update();\n      }\n      if (resizeRendererToDisplaySize()) {\n        camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n      }\n      renderer.render(view);\n      frameId = window.requestAnimationFrame(render);\n    };\n\n    // render();\n\n    const load = async () => {\n      const req = await fetch(\n        'https://threejsfundamentals.org/threejs/resources/data/gpw/gpw_v4_basic_demographic_characteristics_rev10_a000_014mt_2010_cntm_1_deg.asc',\n      );\n      const text = await req.text();\n      const { min, max, data } = parseData(text);\n      const range = max - min;\n      const boxGeometry = world.createGeometry(Geometry.BOX);\n      // const boxMaterial = world\n      //       .createMaterial(Material.BASIC)\n      //       .setUniform({\n      //         color: [1, 1, 1, 1],\n      //       });\n\n      // these helpers will make it easy to position the boxes\n      // We can rotate the lon helper on its Y axis to the longitude\n      // const lonHelperEntity = world.createEntity();\n      // const lonHelper = world.createRenderable(lonHelperEntity);\n      // scene.addEntity(lonHelperEntity);\n      // // We rotate the latHelper on its X axis to the latitude\n      // const latHelperEntity = world.createEntity();\n      // const latHelper = world.createRenderable(latHelperEntity);\n      // latHelper.attach(lonHelper);\n      // // The position helper moves the object to the edge of the sphere\n      // const positionHelperEntity = world.createEntity();\n      // const positionHelper = world.createRenderable(positionHelperEntity);\n      // positionHelper\n      //   .getTransformComponent()\n      //   .translate([0, 0, 1]);\n      // positionHelper.attach(latHelper);\n\n      const lonFudge = Math.PI * 0.5;\n      const latFudge = Math.PI * -0.135;\n      data.forEach((row, latNdx) => {\n        row.forEach((value, lonNdx) => {\n          if (value === undefined || latNdx > 20 || lonNdx > 20) {\n            return;\n          }\n          const amount = (value - min) / range;\n\n          const boxMaterial = world.createMaterial(Material.BASIC).setUniform({\n            color: [1, 0, 0, 1],\n          });\n          // const material = new THREE.MeshBasicMaterial();\n          // const hue = THREE.MathUtils.lerp(0.7, 0.3, amount);\n          // const saturation = 1;\n          // const lightness = THREE.MathUtils.lerp(0.4, 1.0, amount);\n          // material.color.setHSL(hue, saturation, lightness);\n\n          const boxEntity = world.createEntity();\n          const box = world\n            .createRenderable(boxEntity)\n            .setGeometry(boxGeometry)\n            .setMaterial(boxMaterial);\n          // box.attach(positionHelper);\n          box.getTransformComponent().localScale = [1, 1, 1];\n          box.getTransformComponent().scale([0.05, 0.05, 0.05]);\n          box.getTransformComponent().translate([0, 0, 1]);\n\n          scene.addEntity(boxEntity);\n\n          // console.log(boxEntity);\n\n          // const mesh = new THREE.Mesh(geometry, material);\n          // scene.add(mesh);\n\n          // adjust the helpers to point to the latitude and longitude\n          // lonHelper.rotation.y = THREE.MathUtils.degToRad(lonNdx + file.xllcorner) + lonFudge;\n          // latHelper.rotation.x = THREE.MathUtils.degToRad(latNdx + file.yllcorner) + latFudge;\n\n          // use the world matrix of the position helper to\n          // position this mesh.\n          // positionHelper.updateWorldMatrix(true, false);\n          // mesh.applyMatrix4(positionHelper.matrixWorld);\n\n          // mesh.scale.set(0.005, 0.005, THREE.MathUtils.lerp(0.01, 0.5, amount));\n        });\n      });\n\n      render();\n    };\n    load();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const sphereFolder = gui.addFolder('sphere');\n    const sphereConfig = {\n      scale: 1,\n      radius: 0.5,\n      color: [255, 255, 255],\n    };\n    sphereFolder.add(sphereConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.setScaleLocal(vec3.fromValues(size, size, size));\n    });\n    sphereFolder.addColor(sphereConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: vec4.fromValues(\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n          1,\n        ),\n      });\n    });\n    sphereFolder.open();\n\n    window.gwebgpuClean = () => {\n      window.cancelAnimationFrame(frameId);\n      world.destroy();\n    };\n\n    return () => {\n      window.gwebgpuClean();\n    };\n  });\n\n  return (\n    <canvas\n      id=\"application\"\n      style={{\n        width: 600,\n        height: 600,\n        display: 'block',\n      }}\n    />\n  );\n}\n\nReactDOM.render(<SphereGeometry />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"@antv/g-webgpu-interactor\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"@antv/g-webgpu-interactor\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.gWebgpuInteractor, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.world = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, _gWebgpuInteractor, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function parseData(text) {\n    var data = [];\n    var settings = {\n      data: data\n    };\n    var max;\n    var min; // split into lines\n\n    text.split('\\n').forEach(function (line) {\n      // split the line by whitespace\n      var parts = line.trim().split(/\\s+/);\n\n      if (parts.length === 2) {\n        // only 2 parts, must be a key/value pair\n        settings[parts[0]] = parseFloat(parts[1]);\n      } else if (parts.length > 2) {\n        // more than 2 parts, must be data\n        var values = parts.map(function (v) {\n          var value = parseFloat(v);\n\n          if (value === settings.NODATA_value) {\n            return undefined;\n          }\n\n          max = Math.max(max === undefined ? value : max, value);\n          min = Math.min(min === undefined ? value : min, value);\n          return value;\n        });\n        data.push(values);\n      }\n    });\n    return { ...settings,\n      min: min,\n      max: max\n    };\n  }\n\n  function SphereGeometry() {\n    var frameId;\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var camera = world.createCamera().setPosition(0, 0, 2).setPerspective(0.1, 5, 75, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      });\n\n      var tracker = _gWebgpuInteractor.Tracker.create(world);\n\n      tracker.attachControl(view); // create geometry, material and attach them to mesh\n\n      var sphereGeometry = world.createGeometry(_gWebgpu.Geometry.SPHERE, {\n        radius: 0.5,\n        latitudeBands: 64,\n        longitudeBands: 32\n      }); // create a texture by url\n\n      var texture = world.createTexture2D({\n        url: 'https://2.bp.blogspot.com/-Jfw4jY6vBWM/UkbwZhdKxuI/AAAAAAAAK94/QTmtnuDFlC8/s1600/2_no_clouds_4k.jpg'\n      });\n      var material = world.createMaterial(_gWebgpu.Material.BASIC, {\n        map: texture\n      }).setUniform({\n        color: [1, 1, 1, 1]\n      });\n      var sphere = world.createRenderable().setGeometry(sphereGeometry).setMaterial(material);\n      scene.addRenderable(sphere);\n      var transformComponent = sphere.getTransformComponent();\n\n      var resizeRendererToDisplaySize = function resizeRendererToDisplaySize() {\n        var dpr = window.devicePixelRatio;\n        var width = canvas.clientWidth * dpr;\n        var height = canvas.clientHeight * dpr;\n        var needResize = canvas.width !== width || canvas.height !== height;\n\n        if (needResize) {\n          view.setViewport({\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          canvas.width = width;\n          canvas.height = height;\n        }\n\n        return needResize;\n      };\n\n      var render = function render() {\n        if (stats) {\n          stats.update();\n        }\n\n        if (resizeRendererToDisplaySize()) {\n          camera.setAspect(canvas.clientWidth / canvas.clientHeight);\n        }\n\n        renderer.render(view);\n        frameId = window.requestAnimationFrame(render);\n      }; // render();\n\n\n      var load = async function load() {\n        var req = await fetch('https://threejsfundamentals.org/threejs/resources/data/gpw/gpw_v4_basic_demographic_characteristics_rev10_a000_014mt_2010_cntm_1_deg.asc');\n        var text = await req.text();\n\n        var _parseData = parseData(text),\n            min = _parseData.min,\n            max = _parseData.max,\n            data = _parseData.data;\n\n        var range = max - min;\n        var boxGeometry = world.createGeometry(_gWebgpu.Geometry.BOX); // const boxMaterial = world\n        //       .createMaterial(Material.BASIC)\n        //       .setUniform({\n        //         color: [1, 1, 1, 1],\n        //       });\n        // these helpers will make it easy to position the boxes\n        // We can rotate the lon helper on its Y axis to the longitude\n        // const lonHelperEntity = world.createEntity();\n        // const lonHelper = world.createRenderable(lonHelperEntity);\n        // scene.addEntity(lonHelperEntity);\n        // // We rotate the latHelper on its X axis to the latitude\n        // const latHelperEntity = world.createEntity();\n        // const latHelper = world.createRenderable(latHelperEntity);\n        // latHelper.attach(lonHelper);\n        // // The position helper moves the object to the edge of the sphere\n        // const positionHelperEntity = world.createEntity();\n        // const positionHelper = world.createRenderable(positionHelperEntity);\n        // positionHelper\n        //   .getTransformComponent()\n        //   .translate([0, 0, 1]);\n        // positionHelper.attach(latHelper);\n\n        var lonFudge = Math.PI * 0.5;\n        var latFudge = Math.PI * -0.135;\n        data.forEach(function (row, latNdx) {\n          row.forEach(function (value, lonNdx) {\n            if (value === undefined || latNdx > 20 || lonNdx > 20) {\n              return;\n            }\n\n            var amount = (value - min) / range;\n            var boxMaterial = world.createMaterial(_gWebgpu.Material.BASIC).setUniform({\n              color: [1, 0, 0, 1]\n            }); // const material = new THREE.MeshBasicMaterial();\n            // const hue = THREE.MathUtils.lerp(0.7, 0.3, amount);\n            // const saturation = 1;\n            // const lightness = THREE.MathUtils.lerp(0.4, 1.0, amount);\n            // material.color.setHSL(hue, saturation, lightness);\n\n            var boxEntity = world.createEntity();\n            var box = world.createRenderable(boxEntity).setGeometry(boxGeometry).setMaterial(boxMaterial); // box.attach(positionHelper);\n\n            box.getTransformComponent().localScale = [1, 1, 1];\n            box.getTransformComponent().scale([0.05, 0.05, 0.05]);\n            box.getTransformComponent().translate([0, 0, 1]);\n            scene.addEntity(boxEntity); // console.log(boxEntity);\n            // const mesh = new THREE.Mesh(geometry, material);\n            // scene.add(mesh);\n            // adjust the helpers to point to the latitude and longitude\n            // lonHelper.rotation.y = THREE.MathUtils.degToRad(lonNdx + file.xllcorner) + lonFudge;\n            // latHelper.rotation.x = THREE.MathUtils.degToRad(latNdx + file.yllcorner) + latFudge;\n            // use the world matrix of the position helper to\n            // position this mesh.\n            // positionHelper.updateWorldMatrix(true, false);\n            // mesh.applyMatrix4(positionHelper.matrixWorld);\n            // mesh.scale.set(0.005, 0.005, THREE.MathUtils.lerp(0.01, 0.5, amount));\n          });\n        });\n        render();\n      };\n\n      load(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var sphereFolder = gui.addFolder('sphere');\n      var sphereConfig = {\n        scale: 1,\n        radius: 0.5,\n        color: [255, 255, 255]\n      };\n      sphereFolder.add(sphereConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.setScaleLocal(_glMatrix.vec3.fromValues(size, size, size));\n      });\n      sphereFolder.addColor(sphereConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: _glMatrix.vec4.fromValues(color[0] / 255, color[1] / 255, color[2] / 255, 1)\n        });\n      });\n      sphereFolder.open();\n\n      window.gwebgpuClean = function () {\n        window.cancelAnimationFrame(frameId);\n        world.destroy();\n      };\n\n      return function () {\n        window.gwebgpuClean();\n      };\n    });\n    return /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      style: {\n        width: 600,\n        height: 600,\n        display: 'block'\n      }\n    });\n  }\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(SphereGeometry, null), document.getElementById('wrapper'));\n});"}]},"description":"<ul>\n<li>\n<p><code class=\"language-text\">Geometry.BOX</code> 立方体</p>\n<ul>\n<li><code class=\"language-text\">halfExtents</code> <code class=\"language-text\">[number, number, number]</code> 默认值为 <code class=\"language-text\">[0.5, 0.5, 0.5]</code></li>\n<li><code class=\"language-text\">widthSegments</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">1</code></li>\n<li><code class=\"language-text\">heightSegments</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">1</code></li>\n<li><code class=\"language-text\">depthSegments</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">1</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Geometry.SPHERE</code> 球体</p>\n<ul>\n<li><code class=\"language-text\">radius</code> 半径，<code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">0.5</code></li>\n<li><code class=\"language-text\">latitudeBands</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">16</code></li>\n<li><code class=\"language-text\">longitudeBands</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">16</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Geometry.PLANE</code> 平面</p>\n<ul>\n<li><code class=\"language-text\">halfExtents</code> <code class=\"language-text\">[number, number]</code> 默认值为 <code class=\"language-text\">[0.5, 0.5]</code></li>\n<li><code class=\"language-text\">widthSegments</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">5</code></li>\n<li><code class=\"language-text\">lengthSegments</code> <code class=\"language-text\">number</code> 默认值为 <code class=\"language-text\">5</code></li>\n</ul>\n</li>\n</ul>"}},"staticQueryHashes":["1015175297","3000541721","3000541721","3378097331","638047554"]}