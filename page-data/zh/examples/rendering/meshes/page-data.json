{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/rendering/meshes","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","githubUrl":"https://github.com/antvis/GWebGPUEngine","examples":[{"slug":"gpgpu","icon":null,"title":{"zh":"GPGPU","en":"GPGPU"}},{"slug":"gpgpu/basic","icon":null,"title":{"zh":"基础算法","en":"Basic Algorithms"}},{"slug":"gpgpu/graph","icon":null,"title":{"zh":"图算法","en":"Graph"}},{"slug":"rendering","icon":null,"title":{"zh":"渲染","en":"Rendering"}}],"playground":{"container":"<div style=\"min-height: 500px; justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/add2vectors/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/fruchterman/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"奇偶排序 (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"Merge Sort","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/mergeSort"},"frontmatter":{"title":"归并排序","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/mergeSort/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/bitonicSort"},"frontmatter":{"title":"Bitonic Sort (WebGPU Only)","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/bitonicSort/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"SSSP(Single source shortest path) (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/graph/sssp"},"frontmatter":{"title":"单源最短路径算法 (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/graph/sssp/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"只能在支持 WebGPU 的浏览器中运行，详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/gpgpu/reduce"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/gpgpu/basic/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gpgpu/basic/reduce/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/unitchart/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/meshes"},"frontmatter":{"title":"Mesh","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/meshes/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Compute Shader 中进行光线追踪，详见："},{"type":"element","tagName":"a","properties":{"href":"https://zhuanlan.zhihu.com/p/212162113%E3%80%82","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://zhuanlan.zhihu.com/p/212162113。"}]}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/rendering/raytracer"},"frontmatter":{"title":"RayTracer","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"rendering/raytracer/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"rendering/meshes/demo/circle.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/meshes/demo/circle.tsx","order":-1,"filename":"circle.tsx","source":"import { World } from '@antv/g-webgpu';\nimport * as dat from 'dat.gui';\nimport { quat, vec3, vec4 } from 'gl-matrix';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst App = React.memo(function RotatingCube() {\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n    const dpr = window.devicePixelRatio;\n    canvas.width = 600 * dpr;\n    canvas.height = 600 * dpr;\n    canvas.style.width = '600px';\n    canvas.style.height = '600px';\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n    const boxEntity = world.createEntity();\n    scene.addEntity(boxEntity);\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    // create geometry, material and attach them to mesh\n    const boxGeometry = world.createBoxGeometry({\n      halfExtents: vec3.fromValues(1, 1, 1),\n    });\n    const material = world.createBasicMaterial().setUniform({\n      color: vec4.fromValues(1, 0, 0, 1),\n    });\n\n    world\n      .createRenderable(boxEntity)\n      .setGeometry(boxGeometry)\n      .setMaterial(material);\n\n    const transformComponent = world.getTransformComponent(boxEntity);\n    transformComponent.translate(vec3.fromValues(-2.5, 0, 0));\n\n    const render = () => {\n      transformComponent.rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n      if (stats) {\n        stats.update();\n      }\n      renderer.render(view);\n      window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const cubeFolder = gui.addFolder('cube');\n    const cubeConfig = {\n      scale: 1,\n      color: [255, 255, 255],\n    };\n    cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.localScale = vec3.fromValues(1, 1, 1);\n      transformComponent.scale(vec3.fromValues(size, size, size));\n    });\n    cubeFolder.addColor(cubeConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: vec4.fromValues(\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n          1,\n        ),\n      });\n    });\n    cubeFolder.open();\n\n    return () => {\n      world.destroy();\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas id=\"application\" width=\"600\" height=\"600\" />\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.circle = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var App = /*#__PURE__*/_react.default.memo(function RotatingCube() {\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n      var dpr = window.devicePixelRatio;\n      canvas.width = 600 * dpr;\n      canvas.height = 600 * dpr;\n      canvas.style.width = '600px';\n      canvas.style.height = '600px';\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var boxEntity = world.createEntity();\n      scene.addEntity(boxEntity);\n      var camera = world.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      }); // create geometry, material and attach them to mesh\n\n      var boxGeometry = world.createBoxGeometry({\n        halfExtents: _glMatrix.vec3.fromValues(1, 1, 1)\n      });\n      var material = world.createBasicMaterial().setUniform({\n        color: _glMatrix.vec4.fromValues(1, 0, 0, 1)\n      });\n      world.createRenderable(boxEntity).setGeometry(boxGeometry).setMaterial(material);\n      var transformComponent = world.getTransformComponent(boxEntity);\n      transformComponent.translate(_glMatrix.vec3.fromValues(-2.5, 0, 0));\n\n      var render = function render() {\n        transformComponent.rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (stats) {\n          stats.update();\n        }\n\n        renderer.render(view);\n        window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var cubeFolder = gui.addFolder('cube');\n      var cubeConfig = {\n        scale: 1,\n        color: [255, 255, 255]\n      };\n      cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.localScale = _glMatrix.vec3.fromValues(1, 1, 1);\n        transformComponent.scale(_glMatrix.vec3.fromValues(size, size, size));\n      });\n      cubeFolder.addColor(cubeConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: _glMatrix.vec4.fromValues(color[0] / 255, color[1] / 255, color[2] / 255, 1)\n        });\n      });\n      cubeFolder.open();\n      return function () {\n        world.destroy();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      width: \"600\",\n      height: \"600\"\n    }));\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"},{"relativePath":"rendering/meshes/demo/cube.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/rendering/meshes/demo/cube.tsx","order":0,"filename":"cube.tsx","title":"A Rotating Cube","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { World } from '@antv/g-webgpu';\nimport * as dat from 'dat.gui';\nimport { quat, vec3, vec4 } from 'gl-matrix';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\n\nconst App = React.memo(function RotatingCube() {\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('wrapper');\n    $wrapper.appendChild($stats);\n\n    const canvas = document.getElementById('application') as HTMLCanvasElement;\n    const dpr = window.devicePixelRatio;\n    canvas.width = 600 * dpr;\n    canvas.height = 600 * dpr;\n    canvas.style.width = '600px';\n    canvas.style.height = '600px';\n\n    const world = World.create({\n      canvas,\n    });\n\n    const renderer = world.createRenderer();\n    const scene = world.createScene();\n    const boxEntity = world.createEntity();\n    scene.addEntity(boxEntity);\n\n    const camera = world\n      .createCamera()\n      .setPosition(0, 5, 5)\n      .setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n\n    const view = world\n      .createView()\n      .setCamera(camera)\n      .setScene(scene)\n      .setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height,\n      });\n\n    // create geometry, material and attach them to mesh\n    const boxGeometry = world.createBoxGeometry({\n      halfExtents: vec3.fromValues(1, 1, 1),\n    });\n    const material = world.createBasicMaterial().setUniform({\n      color: vec4.fromValues(1, 0, 0, 1),\n    });\n\n    world\n      .createRenderable(boxEntity)\n      .setGeometry(boxGeometry)\n      .setMaterial(material);\n\n    const transformComponent = world.getTransformComponent(boxEntity);\n    transformComponent.translate(vec3.fromValues(-2.5, 0, 0));\n\n    const render = () => {\n      transformComponent.rotate(quat.fromEuler(quat.create(), 0, 1, 0));\n      if (stats) {\n        stats.update();\n      }\n      renderer.render(view);\n      window.requestAnimationFrame(render);\n    };\n\n    render();\n\n    // GUI\n    const gui = new dat.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const cubeFolder = gui.addFolder('cube');\n    const cubeConfig = {\n      scale: 1,\n      color: [255, 255, 255],\n    };\n    cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange((size) => {\n      transformComponent.localScale = vec3.fromValues(1, 1, 1);\n      transformComponent.scale(vec3.fromValues(size, size, size));\n    });\n    cubeFolder.addColor(cubeConfig, 'color').onChange((color) => {\n      material.setUniform({\n        color: vec4.fromValues(\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n          1,\n        ),\n      });\n    });\n    cubeFolder.open();\n\n    return () => {\n      world.destroy();\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas id=\"application\" width=\"600\" height=\"600\" />\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu\", \"dat.gui\", \"gl-matrix\", \"react\", \"react-dom\", \"stats.js\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu\"), require(\"dat.gui\"), require(\"gl-matrix\"), require(\"react\"), require(\"react-dom\"), require(\"stats.js\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpu, global.dat, global.glMatrix, global.react, global.reactDom, global.stats);\n    global.cube = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpu, dat, _glMatrix, _react, _reactDom, _stats) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _stats = _interopRequireDefault(_stats);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  var App = /*#__PURE__*/_react.default.memo(function RotatingCube() {\n    (0, _react.useEffect)(function () {\n      var stats = new _stats.default();\n      stats.showPanel(0);\n      var $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      var $wrapper = document.getElementById('wrapper');\n      $wrapper.appendChild($stats);\n      var canvas = document.getElementById('application');\n      var dpr = window.devicePixelRatio;\n      canvas.width = 600 * dpr;\n      canvas.height = 600 * dpr;\n      canvas.style.width = '600px';\n      canvas.style.height = '600px';\n\n      var world = _gWebgpu.World.create({\n        canvas: canvas\n      });\n\n      var renderer = world.createRenderer();\n      var scene = world.createScene();\n      var boxEntity = world.createEntity();\n      scene.addEntity(boxEntity);\n      var camera = world.createCamera().setPosition(0, 5, 5).setPerspective(0.1, 1000, 72, canvas.width / canvas.height);\n      var view = world.createView().setCamera(camera).setScene(scene).setViewport({\n        x: 0,\n        y: 0,\n        width: canvas.width,\n        height: canvas.height\n      }); // create geometry, material and attach them to mesh\n\n      var boxGeometry = world.createBoxGeometry({\n        halfExtents: _glMatrix.vec3.fromValues(1, 1, 1)\n      });\n      var material = world.createBasicMaterial().setUniform({\n        color: _glMatrix.vec4.fromValues(1, 0, 0, 1)\n      });\n      world.createRenderable(boxEntity).setGeometry(boxGeometry).setMaterial(material);\n      var transformComponent = world.getTransformComponent(boxEntity);\n      transformComponent.translate(_glMatrix.vec3.fromValues(-2.5, 0, 0));\n\n      var render = function render() {\n        transformComponent.rotate(_glMatrix.quat.fromEuler(_glMatrix.quat.create(), 0, 1, 0));\n\n        if (stats) {\n          stats.update();\n        }\n\n        renderer.render(view);\n        window.requestAnimationFrame(render);\n      };\n\n      render(); // GUI\n\n      var gui = new dat.GUI({\n        autoPlace: false\n      });\n      $wrapper.appendChild(gui.domElement);\n      var cubeFolder = gui.addFolder('cube');\n      var cubeConfig = {\n        scale: 1,\n        color: [255, 255, 255]\n      };\n      cubeFolder.add(cubeConfig, 'scale', 0.1, 5.0).onChange(function (size) {\n        transformComponent.localScale = _glMatrix.vec3.fromValues(1, 1, 1);\n        transformComponent.scale(_glMatrix.vec3.fromValues(size, size, size));\n      });\n      cubeFolder.addColor(cubeConfig, 'color').onChange(function (color) {\n        material.setUniform({\n          color: _glMatrix.vec4.fromValues(color[0] / 255, color[1] / 255, color[2] / 255, 1)\n        });\n      });\n      cubeFolder.open();\n      return function () {\n        world.destroy();\n      };\n    }, []);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      width: \"600\",\n      height: \"600\"\n    }));\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]}}},"staticQueryHashes":["3000541721","3000541721","653731124"]}