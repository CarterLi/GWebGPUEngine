{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/tutorial/unitchart","result":{"data":{"site":{"siteMetadata":{"title":"GWebGPU","githubUrl":"https://github.com/antvis/GWebGPUEngine","examples":[{"slug":"tutorial","icon":"gallery","title":{"zh":"示例","en":"Examples"}}],"playground":{"container":"<div style=\"min-height: 500px; justify-content: center;position: relative\" id=\"wrapper\"/>","playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":{"@antv/g-webgpu":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/add2vectors"},"frontmatter":{"title":"Add 2 vectors","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/add2vectors/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的计算任务很简单，实现两个向量相加。详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/add2vectors"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/add2vectors"},"frontmatter":{"title":"两个向量相加","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/add2vectors/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/fruchterman"},"frontmatter":{"title":"Fruchterman Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/fruchterman/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/fruchterman"},"frontmatter":{"title":"Fruchterman 布局算法","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/fruchterman/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/reduce/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"只能在支持 WebGPU 的浏览器中运行，详见"},{"type":"element","tagName":"a","properties":{"href":"/zh/docs/tutorial/reduce"},"children":[{"type":"text","value":"教程"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/reduce"},"frontmatter":{"title":"Reduce (WebGPU Only)","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/reduce/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/pipeline"},"frontmatter":{"title":"Pipeline","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/pipeline/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/pipeline"},"frontmatter":{"title":"Pipeline","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/pipeline/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/rendering"},"frontmatter":{"title":"渲染","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/rendering/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/rendering"},"frontmatter":{"title":"渲染","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/rendering/index.zh.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/en/examples/tutorial/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/unitchart/index.en.md"}}},{"node":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布局语法来自 ATOM: A grammar for unit visualizations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ATOM 语法："},{"type":"element","tagName":"a","properties":{"href":"https://intuinno.github.io/unit/#/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://intuinno.github.io/unit/#/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"中文翻译："},{"type":"element","tagName":"a","properties":{"href":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"http://vis.pku.edu.cn/blog/atom_grammar/#more-9377"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原论文中给出了布局的描述语法，但并未涉及布局间切换的动画，我们使用了 GWebGPU 的渲染能力："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用 instanced array 完成所有 mark 的高性能渲染"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"布局切换时在 Shader 中完成每个 mark 位置和大小的插值，目前为线性插值"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持拾取，基于 PixelPicking"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后续可完善的方向包括："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持更多可配置的插值函数、mark 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"更多布局，扩展至 3D"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"渲染图例和坐标轴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持分面，例如 "},{"type":"element","tagName":"a","properties":{"href":"https://sanddance.js.org/app/","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://sanddance.js.org/app/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"配合滚动，实现 scrollytelling "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"https://medium.com/nightingale/from-storytelling-to-scrollytelling-a-short-introduction-and-beyond-fbda32066964"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本例数据是泰坦尼克号生还者和遇难者数据，每一条形如 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Class: First, Age: Adult, Sex: Male, Survived: Yes"}]},{"type":"text","value":"。\n黄色代表生还，蓝色代表遇难。"}]}],"data":{"quirksMode":false}},"fields":{"slug":"/zh/examples/tutorial/unitchart"},"frontmatter":{"title":"Unitchart","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/unitchart/index.zh.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"tutorial/unitchart/demo/index.tsx","absolutePath":"/Users/pyq/workspace/webgpu/GWebGPUEngine/examples/tutorial/unitchart/demo/index.tsx","order":0,"filename":"index.tsx","title":"Unitchart","screenshot":"https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png","source":"import { Chart } from '@antv/g-webgpu-unitchart';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nlet chart;\n\nconst App = React.memo(function Fruchterman() {\n  const [item, setItem] = useState();\n  const [tooltipPos, setTooltipPos] = useState([0, 0]);\n\n  useEffect(() => {\n    (async () => {\n      const canvas = document.getElementById(\n        'application',\n      ) as HTMLCanvasElement;\n\n      const groupByClassLayouts = [\n        {\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Class',\n            isShared: false,\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n        },\n        {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten',\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          sort: {\n            key: 'Survived',\n          },\n        },\n      ];\n      const groupBySexLayouts = [\n        {\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Sex',\n            isShared: false,\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n        },\n        {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten',\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          sort: {\n            key: 'Survived',\n          },\n        },\n      ];\n      const groupByAgeLayouts = [\n        {\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Age',\n            isShared: false,\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n        },\n        {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten',\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false,\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5,\n          },\n          sort: {\n            key: 'Survived',\n          },\n        },\n      ];\n      chart = new Chart({\n        canvas,\n        title: 'Titanic',\n        data: 'https://intuinno.github.io/unit/data/titanic.csv',\n        width: 600,\n        height: 600,\n        padding: {\n          top: 10,\n          left: 30,\n          bottom: 30,\n          right: 10,\n        },\n        layouts: [\n          { name: 'groupByClass', layouts: groupByClassLayouts },\n          { name: 'groupBySex', layouts: groupBySexLayouts },\n          { name: 'groupByAge', layouts: groupByAgeLayouts },\n        ],\n        mark: {\n          shape: 'circle',\n          color: {\n            key: 'Survived',\n            type: 'categorical',\n          },\n          size: {\n            type: 'max',\n            isShared: false,\n          },\n          isColorScaleShared: true,\n        },\n        onPick: (item, position) => {\n          setItem(item);\n          setTooltipPos(position);\n        },\n      });\n      await chart.init();\n\n      chart.render({\n        layout: 'groupByClass',\n      });\n    })();\n\n    return function cleanup() {\n      chart.destroy();\n    };\n  }, []);\n\n  const groupBySex = () => {\n    if (chart) {\n      chart.render({\n        layout: 'groupBySex',\n      });\n    }\n  };\n\n  const groupByClass = () => {\n    if (chart) {\n      chart.render({\n        layout: 'groupByClass',\n      });\n    }\n  };\n\n  const groupByAge = () => {\n    if (chart) {\n      chart.render({\n        layout: 'groupByAge',\n      });\n    }\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          marginBottom: 16,\n        }}\n      >\n        <button onClick={groupBySex}>Group by Sex</button>\n        <button onClick={groupByClass}>Group by Class</button>\n        <button onClick={groupByAge}>Group by Age</button>\n      </div>\n      <canvas id=\"application\" width=\"600\" height=\"600\" />\n      <div\n        style={{\n          background: 'rgba(0,0,0,.65)',\n          color: 'white',\n          position: 'absolute',\n          top: tooltipPos[1],\n          left: tooltipPos[0],\n          visibility: item ? 'visible' : 'hidden',\n          padding: 4,\n        }}\n      >\n        {item &&\n          Object.keys(item).map((itemKey) => (\n            <p key={itemKey}>\n              {itemKey}: {item[itemKey]}\n            </p>\n          ))}\n      </div>\n    </>\n  );\n});\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g-webgpu-unitchart\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g-webgpu-unitchart\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.gWebgpuUnitchart, global.react, global.reactDom);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_gWebgpuUnitchart, _react, _reactDom) {\n  \"use strict\";\n\n  _react = _interopRequireWildcard(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var chart;\n\n  var App = /*#__PURE__*/_react.default.memo(function Fruchterman() {\n    var _useState = (0, _react.useState)(),\n        _useState2 = _slicedToArray(_useState, 2),\n        item = _useState2[0],\n        setItem = _useState2[1];\n\n    var _useState3 = (0, _react.useState)([0, 0]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        tooltipPos = _useState4[0],\n        setTooltipPos = _useState4[1];\n\n    (0, _react.useEffect)(function () {\n      (async function () {\n        var canvas = document.getElementById('application');\n        var groupByClassLayouts = [{\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Class',\n            isShared: false\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          }\n        }, {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten'\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          sort: {\n            key: 'Survived'\n          }\n        }];\n        var groupBySexLayouts = [{\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Sex',\n            isShared: false\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          }\n        }, {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten'\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          sort: {\n            key: 'Survived'\n          }\n        }];\n        var groupByAgeLayouts = [{\n          name: 'layout1',\n          type: 'gridxy',\n          subgroup: {\n            type: 'groupby',\n            key: 'Age',\n            isShared: false\n          },\n          aspectRatio: 'fillX',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          }\n        }, {\n          name: 'layout2',\n          type: 'gridxy',\n          subgroup: {\n            type: 'flatten'\n          },\n          aspectRatio: 'maxfill',\n          size: {\n            type: 'uniform',\n            isShared: false\n          },\n          direction: 'LRBT',\n          align: 'LB',\n          margin: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0\n          },\n          padding: {\n            top: 5,\n            left: 5,\n            bottom: 5,\n            right: 5\n          },\n          sort: {\n            key: 'Survived'\n          }\n        }];\n        chart = new _gWebgpuUnitchart.Chart({\n          canvas: canvas,\n          title: 'Titanic',\n          data: 'https://intuinno.github.io/unit/data/titanic.csv',\n          width: 600,\n          height: 600,\n          padding: {\n            top: 10,\n            left: 30,\n            bottom: 30,\n            right: 10\n          },\n          layouts: [{\n            name: 'groupByClass',\n            layouts: groupByClassLayouts\n          }, {\n            name: 'groupBySex',\n            layouts: groupBySexLayouts\n          }, {\n            name: 'groupByAge',\n            layouts: groupByAgeLayouts\n          }],\n          mark: {\n            shape: 'circle',\n            color: {\n              key: 'Survived',\n              type: 'categorical'\n            },\n            size: {\n              type: 'max',\n              isShared: false\n            },\n            isColorScaleShared: true\n          },\n          onPick: function onPick(item, position) {\n            setItem(item);\n            setTooltipPos(position);\n          }\n        });\n        await chart.init();\n        chart.render({\n          layout: 'groupByClass'\n        });\n      })();\n\n      return function cleanup() {\n        chart.destroy();\n      };\n    }, []);\n\n    var groupBySex = function groupBySex() {\n      if (chart) {\n        chart.render({\n          layout: 'groupBySex'\n        });\n      }\n    };\n\n    var groupByClass = function groupByClass() {\n      if (chart) {\n        chart.render({\n          layout: 'groupByClass'\n        });\n      }\n    };\n\n    var groupByAge = function groupByAge() {\n      if (chart) {\n        chart.render({\n          layout: 'groupByAge'\n        });\n      }\n    };\n\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: groupBySex\n    }, \"Group by Sex\"), /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: groupByClass\n    }, \"Group by Class\"), /*#__PURE__*/_react.default.createElement(\"button\", {\n      onClick: groupByAge\n    }, \"Group by Age\")), /*#__PURE__*/_react.default.createElement(\"canvas\", {\n      id: \"application\",\n      width: \"600\",\n      height: \"600\"\n    }), /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: {\n        background: 'rgba(0,0,0,.65)',\n        color: 'white',\n        position: 'absolute',\n        top: tooltipPos[1],\n        left: tooltipPos[0],\n        visibility: item ? 'visible' : 'hidden',\n        padding: 4\n      }\n    }, item && Object.keys(item).map(function (itemKey) {\n      return /*#__PURE__*/_react.default.createElement(\"p\", {\n        key: itemKey\n      }, itemKey, \": \", item[itemKey]);\n    })));\n  });\n\n  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(App, null), document.getElementById('wrapper'));\n});"}]}}}}